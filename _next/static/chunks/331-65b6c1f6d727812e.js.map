{"version":3,"file":"static/chunks/331-65b6c1f6d727812e.js","mappings":"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","sources":["webpack://_N_E/./src/cpu/CanvasRenderHelpers.tsx","webpack://_N_E/./src/cpu/CpuExecution.tsx","webpack://_N_E/./src/cpu/CompLibraryView.tsx","webpack://_N_E/./src/cpu/CompExampleView.tsx","webpack://_N_E/./src/cpu/HoverDisplay.tsx","webpack://_N_E/./src/cpu/WireRender.tsx","webpack://_N_E/./src/cpu/schematics/SchematicLibraryView.tsx","webpack://_N_E/./src/cpu/Selection.ts","webpack://_N_E/./src/cpu/Clipboard.ts","webpack://_N_E/./src/cpu/CanvasEventHandler.tsx","webpack://_N_E/./src/utils/text.ts","webpack://_N_E/./src/cpu/library/LibraryBrowser.tsx","webpack://_N_E/./src/utils/array.ts","webpack://_N_E/./src/cpu/CompLayoutEditor.tsx","webpack://_N_E/./src/cpu/Keymap.tsx","webpack://_N_E/./src/cpu/toolbars/ToolbarBasics.tsx","webpack://_N_E/./src/cpu/ComponentAdder.tsx","webpack://_N_E/./src/cpu/toolbars/CpuToolbars.tsx","webpack://_N_E/./src/cpu/CompBoundingBox.tsx","webpack://_N_E/./src/cpu/CompDetails.tsx","webpack://_N_E/./src/cpu/CpuCanvas.tsx","webpack://_N_E/./src/cpu/CpuModel.tsx","webpack://_N_E/./src/cpu/Editor.tsx","webpack://_N_E/./src/cpu/ElfParser.tsx","webpack://_N_E/./src/cpu/ImportExport.tsx","webpack://_N_E/./src/cpu/ModelHelpers.tsx","webpack://_N_E/./src/cpu/RiscvIsa.tsx","webpack://_N_E/./src/cpu/SubSchematics.tsx","webpack://_N_E/./src/cpu/Wire.tsx","webpack://_N_E/./src/cpu/comps/CompBuilder.tsx","webpack://_N_E/./src/cpu/comps/CompPort.tsx","webpack://_N_E/./src/cpu/comps/Registers.tsx","webpack://_N_E/./src/cpu/comps/RenderHelpers.tsx","webpack://_N_E/./src/cpu/comps/RiscvInsDecode.tsx","webpack://_N_E/./src/cpu/comps/SchematicComp.tsx","webpack://_N_E/./src/cpu/displayTools/HexValueEditor.tsx","webpack://_N_E/./src/cpu/displayTools/StringEditor.tsx","webpack://_N_E/./src/cpu/library/CodeSuiteManager.tsx","webpack://_N_E/./src/cpu/comps/Alu.tsx","webpack://_N_E/./src/cpu/comps/RiscvExtra.tsx","webpack://_N_E/./src/cpu/comps/Mux.tsx","webpack://_N_E/./src/cpu/comps/SimpleMemory.tsx","webpack://_N_E/./src/cpu/comps/BinaryGates.tsx","webpack://_N_E/./src/cpu/comps/Addressing.tsx","webpack://_N_E/./src/cpu/comps/InputOutput.tsx","webpack://_N_E/./src/cpu/comps/peripheral/LedOutputSimple.tsx","webpack://_N_E/./src/cpu/comps/riscv/RegisterControl.tsx","webpack://_N_E/./src/cpu/comps/builtins.tsx","webpack://_N_E/./src/cpu/library/SharedContext.tsx","webpack://_N_E/./src/cpu/palette.tsx","webpack://_N_E/./src/cpu/schematics/pcCounterSchematic.tsx","webpack://_N_E/./src/cpu/schematics/regFileDemoSchematic.tsx","webpack://_N_E/./src/cpu/schematics/riscvBasicSchematic.tsx","webpack://_N_E/./src/cpu/schematics/romUsageSchematic.tsx","webpack://_N_E/./src/cpu/schematics/SchematicManifest.ts","webpack://_N_E/./src/cpu/schematics/SchematicLibrary.tsx","webpack://_N_E/./src/homepage/Header.tsx","webpack://_N_E/./src/utils/AffineMat2d.ts","webpack://_N_E/./src/utils/CursorDragOverlay.tsx","webpack://_N_E/./src/utils/Tooltip.tsx","webpack://_N_E/./tailwind.config.js","webpack://_N_E/./src/cpu/CompExampleView.module.scss","webpack://_N_E/./src/cpu/CompLibraryView.module.scss","webpack://_N_E/./src/cpu/CpuCanvas.module.scss","webpack://_N_E/./src/cpu/HoverDisplay.module.scss","webpack://_N_E/./src/cpu/comps/CompStyles.module.scss","webpack://_N_E/./src/cpu/displayTools/HexValueEditor.module.scss","webpack://_N_E/./src/cpu/schematics/SchematicLibraryView.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["import { AffineMat2d } from \"../utils/AffineMat2d\";\nimport { getOrAddToMap, hasFlag } from \"../utils/data\";\nimport { BoundingBox3d, Vec3 } from \"../utils/vector\";\n\n\nexport enum FontType {\n    None = 0,\n    Default = 1,\n    Mono = 2,\n    Italic = 4,\n}\n\nexport function makeCanvasFont(fontSize: number, fontType: FontType = FontType.Default) {\n    let baseType = fontType & (FontType.Default | FontType.Mono);\n    let str = hasFlag(fontType, FontType.Italic) ? 'italic ' : '';\n    switch (baseType) {\n        case FontType.Default:\n            str += `${fontSize}px Arial`;\n            break;\n        case FontType.Mono:\n            str += `${fontSize}px monospace`;\n            break;\n    }\n    return str;\n}\n\nexport interface ICanvasGridState {\n    tileCanvases: Map<string, HTMLCanvasElement>;\n    region: BoundingBox3d;\n}\n\nexport function drawGrid(mtx: AffineMat2d, ctx: CanvasRenderingContext2D, gridState: ICanvasGridState, fillStyle = '#aaa', special: boolean = false) {\n    let tl = mtx.mulVec3Inv(gridState.region.min);\n    let br = mtx.mulVec3Inv(gridState.region.max);\n\n    // draw grid\n\n    // we create a tile canvas for the 1-cell grid. We'll draw it such that ??\n    let gridCvs = getOrAddToMap(gridState.tileCanvases, 'grid1', () => document.createElement('canvas')!);\n    let gridSize = 64;\n    gridCvs.width = gridSize;\n    gridCvs.height = gridSize;\n    let gridCtx = gridCvs.getContext('2d')!;\n    gridCtx.save();\n    gridCtx.clearRect(0, 0, gridCvs.width, gridCvs.height);\n    gridCtx.beginPath();\n    let r = 2.0;\n    gridCtx.moveTo(gridSize/2, gridSize/2);\n    gridCtx.arc(gridSize/2, gridSize/2, r, 0, 2 * Math.PI);\n    gridCtx.fillStyle = fillStyle;\n    gridCtx.fill();\n    gridCtx.restore();\n\n    let gridPattern = ctx.createPattern(gridCvs, 'repeat')!;\n    function drawGridAtScale(scale: number) {\n        ctx.save();\n        ctx.fillStyle = gridPattern;\n        let scaleFactor = 1 / gridSize * scale;\n        ctx.translate(0.5, 0.5);\n        ctx.scale(scaleFactor, scaleFactor);\n        let tl2 = tl.sub(new Vec3(0.5, 0.5)).mul(1 / scaleFactor);\n        let br2 = br.sub(new Vec3(0.5, 0.5)).mul(1 / scaleFactor);\n        ctx.fillRect(tl2.x, tl2.y, br2.x - tl2.x, br2.y - tl2.y);\n        ctx.restore();\n    }\n    drawGridAtScale(1);\n}\n\n","import { getOrAddToMap, hasFlag, isNotNil } from \"../utils/data\";\nimport { CompLibrary, IResetOptions } from \"./comps/CompBuilder\";\nimport { compPortDefId, ICompPortConfig, ICompPortData } from \"./comps/CompPort\";\nimport { PortType, IEditSnapshot, IExeComp, IExeNet, IExePortRef, IExeSystem, RefType, IExeStep, IExeSystemLookup, IElRef, IoDir, IExePort, ISchematic, IComp, IEditorState } from \"./CpuModel\";\nimport { ISharedContext } from \"./library/SharedContext\";\nimport { getCompSubSchematic, getCompSubSchematicForSnapshot } from \"./SubSchematics\";\n\n/*\n\nOptions for handling sub-components.\n\nConstraints:\n  1) Have to make an IExeComp for every instance of sub-comps\n  2)\n\nOptions:\n  - Create sub-trees of IExeSystem's, or\n  - just have a flat list of IExeComp's\n\nFor a flat list, we need to be able to look up the IExeComp for a given IElRef.\nCurrently, nested IElRef's aren't supported (we just view the top-level schematic), however, we'll\nwant to support this in the future, when we support zooming into sub-schematics.\n\nIf we had subtrees, would need to break the sub-models into multiple passes, which seems tricky, also\nwould need to store the IExeSystem somewhere.\n\nLet's stick with the flat-list for now.\n\n\n\nHaving real trouble passing data between external & internal ports.\n\n*/\n\nexport function createExecutionModel(sharedContext: ISharedContext, displayModel: IEditSnapshot, existingSystem: IExeSystem | null): IExeSystem {\n\n    let exeSystem: IExeSystem = {\n        compLibrary: sharedContext.compLibrary,\n        comps: [],\n        nets: [],\n        executionSteps: [],\n        latchSteps: [],\n        lookup: { compIdToIdx: new Map(), wireIdToNetIdx: new Map() },\n        runArgs: { halt: false },\n    };\n\n    populateExecutionModel(sharedContext, displayModel, exeSystem, displayModel.mainSchematic, '', existingSystem);\n\n    let executionOrder = calcCompExecutionOrder(exeSystem.comps, exeSystem.nets);\n\n    exeSystem.executionSteps = executionOrder.executionSteps;\n    exeSystem.latchSteps = executionOrder.latchSteps;\n\n    // console.log('new exeSystem:', exeSystem);\n    // console.log('old exeSystem:', createExecutionModel(compLibrary, displayModel, existingSystem));\n\n    return exeSystem;\n}\n\nexport function populateExecutionModel(sharedContext: ISharedContext, editSnapshot: IEditSnapshot, exeSystem: IExeSystem, schematic: ISchematic, subTreePrefix: string, existingSystem: IExeSystem | null) {\n    let compLibrary = sharedContext.compLibrary;\n    // we build the subtree prefix as \"id|subId|\"\n    let connectedWires = schematic.wires;\n    let connectedComps = schematic.comps;\n\n    let compIdToLocalIdx = new Map<string, number>();\n    for (let i = 0; i < connectedComps.length; i++) {\n        compIdToLocalIdx.set(connectedComps[i].id, i);\n    }\n\n    let localCompToExeCompIdx = new Map<IComp, number>();\n    let nestedCompPortLookup = new Map<IComp, (IExeComp<ICompPortData> | null)[]>();\n\n    for (let comp of schematic.comps) {\n        let def = compLibrary.getCompDef(comp.defId)!;\n        let subSchematic = getCompSubSchematicForSnapshot(sharedContext, editSnapshot, comp);\n        if (subSchematic) {\n            let prefix = subTreePrefix + comp.id + '|';\n            populateExecutionModel(sharedContext, editSnapshot, exeSystem, subSchematic, prefix, existingSystem);\n        }\n\n        let fullCompId = subTreePrefix + comp.id;\n\n        let exeComp = compLibrary.build(comp);\n        exeComp.compFullId = fullCompId;\n\n        if (existingSystem) {\n            let existingIdx = existingSystem.lookup.compIdToIdx.get(fullCompId);\n            let existingExeComp = existingSystem.comps[existingIdx!];\n            if (existingExeComp) {\n                def.copyStatefulData?.(existingExeComp.data, exeComp.data);\n            }\n        }\n\n        let newCompIdx = exeSystem.comps.length;\n\n        exeComp.idx = newCompIdx;\n        localCompToExeCompIdx.set(comp, newCompIdx);\n        exeSystem.lookup.compIdToIdx.set(fullCompId, newCompIdx);\n        exeSystem.comps.push(exeComp);\n\n        if (subSchematic) {\n            let prefix = subTreePrefix + comp.id + '|';\n\n            let innerSchematicPorts = subSchematic.comps.filter(a => a.defId === compPortDefId) as IComp<ICompPortConfig>[];\n\n            let nestedComps = exeComp.ports.map(exePort => {\n                let port = exeComp.comp.ports[exePort.portIdx];\n                let schemPort = innerSchematicPorts.find(a => a.args.portId === port.id);\n                if (!schemPort) {\n                    return null;\n                }\n                let schemExeComp = exeSystem.comps[exeSystem.lookup.compIdToIdx.get(prefix + schemPort.id)!] as IExeComp<ICompPortData> | null;\n\n                return schemExeComp;\n            });\n\n            nestedCompPortLookup.set(exeComp.comp, nestedComps);\n        }\n    }\n\n    for (let wire of connectedWires) {\n        let refs = wire.nodes.map(n => n.ref).filter(isNotNil);\n\n        let netIdx = exeSystem.nets.length;\n        let type = PortType.None;\n        let tristate = false;\n        let width = 1;\n\n        let dests: IExePortRef[] = [];\n        let srcs: IExePortRef[] = [];\n        for (let ref of refs) {\n            let comp = connectedComps[compIdToLocalIdx.get(ref.id)!];\n            if (!comp) {\n                continue;\n            }\n            let portIdx = comp.ports.findIndex(p => p.id === ref.compNodeId);\n            if (portIdx < 0) {\n                continue;\n            }\n\n            let exeComp = exeSystem.comps[localCompToExeCompIdx.get(comp)!];\n            let exePort = exeComp.ports[portIdx];\n\n            exePort.netIdx = netIdx;\n\n            let nestedPortComps = nestedCompPortLookup.get(exeComp.comp);\n\n            let bindOutPort = true;\n\n            if (nestedPortComps) {\n                let nestedExeComp = nestedPortComps[portIdx];\n                if (nestedExeComp) {\n                    nestedExeComp.data.externalPortBound = true;\n\n                    let nestedPort = nestedExeComp.ports[1];\n                    nestedPort.netIdx = netIdx;\n                    let portRef: IExePortRef = {\n                        comp: nestedExeComp.comp,\n                        portIdx: 1,\n                        exeComp: nestedExeComp,\n                        exePort: nestedPort,\n                        valid: true,\n                    }\n                    if (hasFlag(exePort.type, PortType.In)) {\n                        dests.push(portRef);\n                    }\n                    if (hasFlag(exePort.type, PortType.Out)) {\n                        srcs.push(portRef);\n                        bindOutPort = false;\n                    }\n                }\n            }\n\n            if (hasFlag(exePort.type, PortType.In)) {\n                dests.push({ comp, portIdx, exeComp, exePort, valid: true });\n            }\n            if (hasFlag(exePort.type, PortType.Out) && bindOutPort) {\n                srcs.push({ comp, portIdx, exeComp, exePort, valid: true });\n            }\n\n            if (hasFlag(exePort.type, PortType.Tristate)) {\n                tristate = true;\n            }\n            width = exePort.width;\n            type |= exePort.type;\n        }\n\n        let wireFullId = subTreePrefix + wire.id;\n\n        let net: IExeNet = {\n            idx: netIdx,\n            width: width,\n            wireFullId,\n            wire,\n            tristate,\n            inputs: dests,\n            outputs: srcs,\n            value: 0,\n            enabledCount: 0,\n            type: type,\n        };\n\n        exeSystem.lookup.wireIdToNetIdx.set(wireFullId, netIdx);\n        exeSystem.nets.push(net);\n    }\n}\n\nexport function lookupPortInfo(system: IExeSystem, ref: IElRef) {\n    let compIdx = system.lookup.compIdToIdx.get(ref.id) ?? -1;\n    let compExe = system.comps[compIdx];\n    if (!compExe) {\n        return null;\n    }\n    let portIdx = compExe.comp.ports.findIndex(p => p.id === ref.compNodeId);\n    if (portIdx < 0) {\n        return null;\n    }\n    let portExe = compExe.ports[portIdx];\n    let comp = compExe.comp;\n    let port = comp.ports[portIdx];\n    return { compIdx, portIdx, compExe, portExe, comp, port };\n}\n\nexport function calcCompExecutionOrder(comps: IExeComp[], nets: IExeNet[]): { executionSteps: IExeStep[], latchSteps: IExeStep[] } {\n\n    // tristate nets can only propagate once all comps have completed, so consider them as nodes\n    // in the graph as well (do this with all nets for simplicity)\n    let numComps = comps.length + nets.length;\n\n    let inDegree = new Map<number, number>();\n\n    let compPhaseToNodeId = (compIdx: number, phaseIdx: number) => {\n        return compIdx + phaseIdx * numComps;\n    };\n\n    let netToNodeId = (netIdx: number, phaseIdx: number) => {\n        return comps.length + netIdx + phaseIdx * numComps;\n    };\n\n    let nodeIdToCompPhaseIdx = (nodeId: number) => {\n        let compIdx = nodeId % numComps;\n        if (compIdx >= comps.length) {\n            return null; // net\n        }\n\n        return {\n            compIdx: compIdx,\n            phaseIdx: Math.floor(nodeId / numComps),\n        };\n    };\n\n    let nodeIdToNetIdx = (nodeId: number) => {\n        let compIdx = nodeId % numComps;\n        if (compIdx < comps.length) {\n            return null; // comp\n        }\n        return {\n            netIdx: compIdx - comps.length,\n            phaseIdx: Math.floor(nodeId / numComps),\n        };\n    }\n\n    // usually have 1 phase per net, but can have more if a net is bidirectional (a port has both in and out)\n    let netNumPhases = new Map<number, number>();\n\n    // calc num phases for each net\n    for (let netIdx = 0; netIdx < nets.length; netIdx++) {\n        let net = nets[netIdx];\n        let numPhases = 1;\n        for (let input of net.inputs) {\n            if ((input.exePort.type & PortType.InOutTri) === PortType.InOutTri) {\n                numPhases = 2;\n            }\n        }\n        netNumPhases.set(netIdx, numPhases);\n    }\n\n    let topoNodeOrder: number[] = [];\n    let edges = new Map<number, number[]>();\n    let numExeNodes = 0;\n\n    for (let cId = 0; cId < comps.length; cId++) {\n        let comp = comps[cId];\n        for (let pIdx = 0; pIdx < comp.phases.length; pIdx++) {\n            let phase = comp.phases[pIdx];\n            let nodeId = compPhaseToNodeId(cId, pIdx);\n            // let afterPrevPhase = pIdx > 0;\n            let hasNextPhase = pIdx < comp.phases.length - 1;\n\n            // let linkedReadPortCount = phase.readPortIdxs.filter(i => comp.ports[i].netIdx >= 0).length;\n\n            inDegree.set(nodeId, 0);\n            let nodeEdges = getOrAddToMap(edges, nodeId, () => []);\n            if (hasNextPhase) {\n                let nextNodeId = compPhaseToNodeId(cId, pIdx + 1);\n                nodeEdges.push(nextNodeId);\n            }\n            numExeNodes += 1;\n            for (let portIdx of phase.writePortIdxs) { // write means the component is writing to the port (i.e. an output) [read0, read1] => [write0, write1]\n                let port = comp.ports[portIdx];\n                let net = nets[port.netIdx];\n                if (!net) {\n                    // console.log('comp', comp, 'port', port, 'has no net');\n                    continue;\n                }\n                let netPhaseCount = netNumPhases.get(port.netIdx)!;\n                let netPhaseId = 0;\n                if (netPhaseCount > 1 && hasFlag(port.type, PortType.InOutTri)) {\n                    netPhaseId = calculatePhaseId(port, comp, pIdx);\n                }\n                let netNodeId = netToNodeId(port.netIdx, netPhaseId);\n                nodeEdges.push(netNodeId);\n            }\n        }\n    }\n\n    function calculatePhaseId(port: IExePort, comp: IExeComp, phaseIdx: number): number {\n        for (let prevPhaseIdx = 0; prevPhaseIdx <= phaseIdx; prevPhaseIdx++) {\n            let prevPhase = comp.phases[prevPhaseIdx];\n            if (prevPhase.readPortIdxs.includes(port.portIdx)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    let portOrderings = new Map<string, { srcNetIds: number[], destNetIds: number[] }>();\n\n    for (let nId = 0; nId < nets.length; nId++) {\n        let net = nets[nId];\n        let numPhases = netNumPhases.get(nId)!;\n\n        for (let nPId = 0; nPId < numPhases; nPId++) {\n\n            let netNodeId = netToNodeId(nId, nPId);\n            inDegree.set(netNodeId, 0);\n            let nodeEdges = getOrAddToMap(edges, netNodeId, () => []);\n\n            for (let input of net.inputs) {\n\n                let destComp = input.exeComp;\n                let readPhaseIdx = destComp.phases.findIndex(p => p.readPortIdxs.includes(input.portIdx));\n                let writePortIdx = destComp.phases.findIndex(p => p.writePortIdxs.includes(input.portIdx));\n                if (readPhaseIdx < 0) {\n                    continue;\n                }\n\n                if (numPhases > 0 && writePortIdx >= 0) {\n                    let includeInPhase = (nPId > 0) !== (writePortIdx >= readPhaseIdx);\n                    if (!includeInPhase) {\n                        continue;\n                    }\n                }\n\n                let outputNodeId = compPhaseToNodeId(input.exeComp.idx, readPhaseIdx);\n                nodeEdges.push(outputNodeId);\n            }\n        }\n    }\n\n    for (let [, destIds] of edges) {\n        for (let destId of destIds) {\n            let deg = inDegree.get(destId) ?? 0;\n            inDegree.set(destId, deg + 1);\n        }\n    }\n\n    // console.log('inDegreeOriginal:', new Map(inDegree));\n\n    let queue: number[] = [];\n    for (let [nodeId, degree] of inDegree) {\n        if (degree === 0) {\n            queue.push(nodeId);\n        }\n    }\n\n    while (queue.length > 0) {\n        let nodeId = queue.splice(0, 1)[0];\n        topoNodeOrder.push(nodeId);\n        let nodeEdges = edges.get(nodeId);\n        if (nodeEdges) {\n            for (let destNodeId of nodeEdges) {\n                let degree = inDegree.get(destNodeId)!;\n                degree--;\n                inDegree.set(destNodeId, degree);\n                if (degree === 0) {\n                    queue.push(destNodeId);\n                }\n            }\n        }\n    }\n\n    let numPhasesRun: number[] = comps.map(_ => 0);\n\n    let executionSteps: IExeStep[] = [];\n    let latchSteps: IExeStep[] = [];\n    // console.log('--- topoNodeOrder ---');\n    // console.log('comps:', comps.map((c, i) => `${compPhaseToNodeId(i, 0)}: ${c.comp.name}`).join(', '));\n    // console.log('nets:', nets.map((n, i) => `${netToNodeId(i)}: ${netToString(n, comps)}`).join(', '));\n    // console.log('inDegree:', new Map(inDegree));\n    // console.log('edges:', edges);\n\n    function nodeIdToStr(nodeId: number) {\n        let compPhase = nodeIdToCompPhaseIdx(nodeId);\n        if (compPhase) {\n            let { compIdx, phaseIdx } = compPhase;\n            let comp = comps[compIdx];\n            let name = comp.comp.id;\n            let defId = comp.comp.defId;\n            return `C:${name}(${defId})/${phaseIdx}`;\n        }\n\n        let netPhase = nodeIdToNetIdx(nodeId);\n        if (netPhase) {\n            let { netIdx, phaseIdx } = netPhase;\n            let net = nets[netIdx];\n            return `N:${net.wire.id}/${phaseIdx}`;\n        }\n    }\n\n    // console.log('----- edges:');\n    // for (let [srcNodeId, destNodeIds] of edges) {\n    //     let srcStr = nodeIdToStr(srcNodeId);\n    //     let destStrs = destNodeIds.map(nodeIdToStr);\n    //     console.log(`${srcStr}: ${destStrs.join(', ')}`);\n    // }\n    // console.log('-----');\n    // console.log('------ execution order ------');\n\n    for (let nodeId of topoNodeOrder) {\n        let compPhase = nodeIdToCompPhaseIdx(nodeId);\n        if (compPhase) {\n            let { compIdx, phaseIdx } = compPhase;\n            // if (phaseIdx !== numPhasesRun[compIdx]) {\n            //     console.log('detected an incorrectly ordered phase; execution order may be incorrect');\n            // }\n            numPhasesRun[compIdx] = phaseIdx + 1;\n\n            let comp = comps[compIdx];\n            let phase = comp.phases[phaseIdx];\n\n            // if (!phase.isLatch) {\n            //     console.log('found comp', comp.compFullId, 'compPhase', compPhase, `(nId=${nodeId})`, 'comp', comp.comp.name, `(${compPhase.phaseIdx+1}/${comp.phases.length})`);\n            // }\n\n            let step: IExeStep = {\n                compIdx,\n                phaseIdx,\n                netIdx: -1,\n            };\n            if (phase.isLatch) {\n                latchSteps.push(step);\n            } else {\n                executionSteps.push(step);\n            }\n        } else {\n            let { netIdx, phaseIdx } = nodeIdToNetIdx(nodeId)!;\n            // let net = nets[netIdx];\n            // console.log('found net', net.wireFullId, 'with phase', phaseIdx,  `(nId=${nodeId})`, netToString(nets[netIdx], comps));\n\n            let step: IExeStep = {\n                compIdx: -1,\n                phaseIdx,\n                netIdx,\n            };\n            executionSteps.push(step);\n        }\n\n    }\n\n    let phaseStepCount = [...executionSteps, ...latchSteps].filter(a => a.compIdx >= 0).length;\n\n    if (phaseStepCount !== numExeNodes) {\n        console.log('detected a cycle; execution order may be incorrect: expected exe nodes', numExeNodes, 'got', phaseStepCount);\n        console.log(comps, nets);\n    } else {\n        // console.log('execution order:');\n    }\n\n    // let compsToExecute = compExecutionOrder.map(i => comps[i].comp.name);\n    // console.log('compsToExecute', compsToExecute);\n\n    return { executionSteps, latchSteps };\n}\n\nexport function stepExecutionCombinatorial(exeModel: IExeSystem, disableBackProp = false) {\n    let exeSteps = exeModel.executionSteps;\n    exeModel.runArgs.halt = false;\n\n    for (let comp of exeModel.comps) {\n        for (let port of comp.ports) {\n            if (hasFlag(port.type, PortType.Tristate)) {\n                port.ioEnabled = false;\n            }\n        }\n    }\n\n    for (let i = 0; i < exeSteps.length; i++) {\n        let step = exeSteps[i];\n        if (step.compIdx >= 0) {\n            let comp = exeModel.comps[step.compIdx];\n            // console.log(`running comp ${comp.comp.name} phase ${step.phaseIdx}`);\n            comp.phases[step.phaseIdx].func(comp, exeModel.runArgs);\n        } else {\n            let net = exeModel.nets[step.netIdx];\n            runNet(exeModel.comps, net);\n        }\n    }\n\n    if (!disableBackProp) {\n        backpropagateUnusedSignals(exeModel);\n    }\n}\n\nexport function stepExecutionLatch(exeModel: IExeSystem) {\n    let latchSteps = exeModel.latchSteps;\n    for (let i = 0; i < latchSteps.length; i++) {\n        let step = latchSteps[i];\n        let comp = exeModel.comps[step.compIdx];\n        comp.phases[step.phaseIdx].func(comp, exeModel.runArgs);\n    }\n}\n\nexport function resetExeModel(exeModel: IExeSystem, opts: IResetOptions) {\n    for (let comp of exeModel.comps) {\n        let def = exeModel.compLibrary.getCompDef(comp.comp.defId)!;\n        def.reset?.(comp, opts);\n    }\n}\n\nexport function netToString(net: IExeNet, exeComps: IExeComp[]) {\n    let portStr = (portRef: IExePortRef) => {\n        let exeComp = portRef.exeComp;\n        let comp = portRef.comp;\n        let exePort = portRef.exePort;\n        let tristateStr = hasFlag(exePort.type, PortType.Tristate) ? '(ts)' : '';\n        let portId = comp.ports[portRef.portIdx]?.id ?? '??';\n        return `${exeComp.compFullId}.${portId}${tristateStr}`;\n    };\n\n    return `(${net.outputs.map(a => portStr(a)).join(', ')}) --> (${net.inputs.map(a => portStr(a)).join(', ')})`;\n}\n\nexport function runNet(comps: IExeComp[], net: IExeNet) {\n\n    // let isPortLinkedNet = [...net.inputs, ...net.outputs].some(a => !a.comp.ports[a.exePort.portIdx]);\n\n    // let isIoNet = net.inputs.some(a => net.outputs.some(b => a.exePort === b.exePort));\n\n    if (net.tristate) {\n        // need to ensure exactly 1 output is enabled\n        let enabledCount = 0;\n        let enabledPortValue = 0;\n        for (let portRef of net.outputs) {\n            let port = portRef.exePort;\n            if (portRef.valid && port.ioEnabled && (!hasFlag(port.type, PortType.InOutTri) || port.ioDir === IoDir.Out)) {\n                enabledCount++;\n                enabledPortValue = port.value;\n            }\n        }\n        net.enabledCount = enabledCount;\n        net.value = enabledCount === 1 ? enabledPortValue : 0;\n        /*\n        if (enabledCount > 1) {\n            // console.log('tristate', netToString(net, comps), 'has', enabledCount, 'enabled outputs:');\n            for (let portRef of net.outputs) {\n                let port = portRef.exePort;\n                // let comp = comps[portRef.compIdx];\n                // if (portRef.valid && port.ioEnabled && port.ioDir === IoDir.Out) {\n                    // let portA = comp.comp.ports[portRef.portIdx];\n                    // console.log(`  - port: ${portA.id}/${portA.name} on comp ${comp.comp.id}/${comp.comp.defId}`);\n                // }\n            }\n        }\n        */\n    } else {\n        // has exactly 1 input\n        if (net.outputs.length !== 1) {\n            net.value = 0;\n        } else {\n            let port = net.outputs[0].exePort;\n            net.value = port.value;\n        }\n    }\n\n    // if (isIoNet) {\n    //     console.log('reading from io net', netToString(net, comps), 'with value', net.value.toString(16), net.value);\n    // }\n\n    for (let portRef of net.inputs) {\n        portRef.exePort.value = net.value;\n    }\n\n    // if (isPortLinkedNet) {\n    //     console.log('running net', netToString(net, comps), 'with value', net.value.toString(16), net.value);\n    // }\n}\n\nexport function backpropagateUnusedSignals(exeSystem: IExeSystem) {\n    // this if for determining if we should render a wire as being active or not in the UI\n    // e.g. if the output of a mux is not used, we want to mark its input wires as not active\n    // either\n\n    // essentially, if all output ports of a component are unused, then all input ports are also marked as unused\n    // can do this for each phase to some degree.\n\n    // not sure if we want to mess with the port.ioEnabled flags, or just have a separate flag for this\n    // primarily because those flags are used in latching, say (actually, that doesn't matter)\n\n    // OK, let's use ioEnabled, and set all inputs of a phase to false if all outputs are false\n    for (let comp of exeSystem.comps) {\n        for (let phase of comp.phases) {\n            for (let portIdx of [...phase.readPortIdxs, ...phase.writePortIdxs]) {\n                let port = comp.ports[portIdx];\n                port.dataUsed = hasFlag(port.type, PortType.Ctrl) || port.ioEnabled;\n            }\n        }\n    }\n\n    // return;\n\n    for (let i = exeSystem.executionSteps.length - 1; i >= 0; i--) {\n        let step = exeSystem.executionSteps[i];\n        if (step.compIdx !== -1) {\n            let comp = exeSystem.comps[step.compIdx];\n            let phase = comp.phases[step.phaseIdx];\n\n            let allOutputsUnused = phase.writePortIdxs.length > 0;\n            for (let portIdx of phase.writePortIdxs) {\n                let port = comp.ports[portIdx];\n                if (port.dataUsed) {\n                    allOutputsUnused = false;\n                    break;\n                }\n            }\n            for (let portIdx of [...phase.readPortIdxs, ...phase.writePortIdxs]) { // special case for multi-directional ports\n                let port = comp.ports[portIdx];\n                if (hasFlag(port.type, PortType.InOutTri) && port.ioDir !== IoDir.None) {\n                    allOutputsUnused = false;\n                    break;\n                }\n            }\n\n            if (allOutputsUnused) {\n                // let writePorts = phase.writePortIdxs.map(i => comp.comp.ports[i].id);\n                // let readPorts = phase.readPortIdxs.map(i => comp.comp.ports[i].id);\n                // console.log('marking ports as unused', comp.comp.defId, step.phaseIdx, writePorts, ' => ', readPorts);\n                for (let portIdx of phase.readPortIdxs) {\n                    let port = comp.ports[portIdx];\n                    if (!hasFlag(port.type, PortType.Ctrl)) {\n                        port.dataUsed = false;\n                    }\n                }\n            }\n\n\n        } else if (step.netIdx !== -1) {\n            let net = exeSystem.nets[step.netIdx];\n            if (hasFlag(net.type, PortType.Ctrl)) {\n                continue;\n            }\n            let allOutputsUnused = true;\n            for (let portRef of net.inputs) {\n                if (portRef.exePort.dataUsed) {\n                    allOutputsUnused = false;\n                    break;\n                }\n            }\n\n            if (allOutputsUnused) {\n                // console.log('marking net as unused', netToString(net, exeSystem.comps));\n                for (let portRef of net.outputs) {\n                    portRef.exePort.dataUsed = false;\n                }\n            }\n        }\n    }\n\n}\n","import React from \"react\";\nimport { editSnapshot, useEditorContext } from \"./Editor\";\nimport s from \"./CompLibraryView.module.scss\";\nimport { ICompDef } from \"./comps/CompBuilder\";\nimport { assignImm } from \"../utils/data\";\nimport { useGlobalDrag } from \"../utils/pointer\";\n\nexport const CompLibraryView: React.FC = () => {\n    let { editorState, setEditorState } = useEditorContext();\n\n    let { compLibrary } = editorState;\n\n    let compDefs = [...new Set([...compLibrary.libraryLookup.values()])];\n\n    let [, setDragStart] = useGlobalDrag<number>(function handleMove(ev, ds, end) {\n        setEditorState(a => {\n            if (a.dragCreateComp?.applyFunc) {\n                a = editSnapshot(end, a.dragCreateComp.applyFunc)(a);\n            }\n            if (end) {\n                a = assignImm(a, { dragCreateComp: undefined });\n            }\n            return a;\n        });\n    });\n\n    function handleMouseDown(ev: React.MouseEvent, compDef: ICompDef<any>) {\n\n        let newComp = editorState.compLibrary.create(compDef.defId)!;\n\n        setEditorState(a => assignImm(a, {\n            dragCreateComp: { compOrig: newComp },\n        }));\n\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        setDragStart(ev, 0);\n    }\n\n    return <div className={s.libraryView}>\n        <div className={s.header}>Components</div>\n        <div className={s.body}>\n            {compDefs.map((comp, idx) => {\n\n                return <div\n                    className={s.entry}\n                    key={idx}\n                    onMouseDown={ev => handleMouseDown(ev, comp.compDef!)}\n                >{comp.name}</div>;\n            })}\n        </div>\n    </div>;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useEditorContext } from \"./Editor\";\nimport s from \"./CompExampleView.module.scss\";\nimport { listElfTextSections, readElfHeader } from \"./ElfParser\";\nimport { IRomExeData } from \"./comps/SimpleMemory\";\nimport { IExeComp } from \"./CpuModel\";\nimport { ICompDataRegFile, ICompDataSingleReg } from \"./comps/Registers\";\nimport { resetExeModel, stepExecutionCombinatorial, stepExecutionLatch } from \"./CpuExecution\";\nimport { ensureSigned32Bit } from \"./comps/RiscvInsDecode\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRotate } from \"@fortawesome/free-solid-svg-icons\";\nimport { ICodeEntry } from \"./library/CodeSuiteManager\";\n\n\nexport const CompExampleView: React.FC = () => {\n    let { editorState, setEditorState, exeModel } = useEditorContext();\n\n    let [examples, setExamples] = useState<ICodeEntry[]>([]);\n    let [reloadCntr, setReloadCntr] = useState(0);\n\n    useEffect(() => {\n        let basePath = (process.env.BASE_URL ?? '') + '/riscv/examples/';\n\n        async function run() {\n            let fileName = 'add_tests.elf';\n            // let fileName = 'blinky2.elf';\n\n            let resp = await fetch(basePath + fileName);\n\n            if (resp.ok) {\n                let elfFile = new Uint8Array(await resp.arrayBuffer());\n\n                let header = readElfHeader(elfFile)!;\n                let sections = listElfTextSections(elfFile, header);\n\n                let examples = sections.map(section => {\n                    // name is '.text_add0', and we want 'add0'\n                    let name = section.name.slice(6) || section.name;\n                    return {\n                        name,\n                        elfSection: section,\n                        expectFail: name.startsWith('must_fail'),\n                    };\n                });\n\n                setExamples(examples);\n            }\n        }\n\n        run();\n\n    }, [reloadCntr]);\n\n    function handleEntryClick(example: ICodeEntry) {\n        loadEntryData(example);\n        stepExecutionCombinatorial(exeModel);\n        setEditorState(a => ({ ...a }));\n    }\n\n    function onStepClicked() {\n        // console.log('--- running execution (latching followed by steps) ---', exeModel);\n        if (!exeModel.runArgs.halt) {\n            stepExecutionLatch(exeModel);\n        }\n\n        if (!exeModel.runArgs.halt) {\n            stepExecutionCombinatorial(exeModel);\n        }\n\n        setEditorState(a => ({ ...a }));\n    }\n\n    function loadEntryData(example: ICodeEntry) {\n        let romComp = getRomComp();\n        if (romComp) {\n            let romArr = romComp.data.rom;\n            romArr.set(example.elfSection.arr);\n            romArr.fill(0, example.elfSection.arr.length);\n            romComp.data.updateCntr += 1;\n        }\n    }\n\n    function onRunAllTestsClicked() {\n        console.log('Running all tests...');\n        let startTime = performance.now();\n        let successCount = 0;\n        let totalCount = 0;\n        let insCount = 0;\n        let repeatCount = 0;\n        for (; repeatCount < 100 && successCount === totalCount; repeatCount++) {\n            for (let test of examples) {\n                loadEntryData(test);\n                resetExeModel(exeModel, { hardReset: false });\n                stepExecutionCombinatorial(exeModel, true);\n\n                totalCount += 1;\n                let completed = false;\n\n                for (let i = 0; i < 400; i++) {\n                    if (exeModel.runArgs.halt) {\n                        let regs = getRegsComp();\n                        let resRegValue = regs?.data.file[10] ?? 0;\n                        let testNumValue = regs?.data.file[11] ?? 0;\n\n                        if (resRegValue !== 44 && resRegValue !== 911) {\n                            console.log(`--- test '${test.name}' halted with unknown result in reg[a0]: ${ensureSigned32Bit(resRegValue)} ---`);\n                        } else {\n                            let isSuccess = (resRegValue === 44) !== test.expectFail;\n\n                            if (isSuccess) {\n                                successCount += 1;\n                                // console.log(`--- halted with success ---`);\n                            } else {\n                                console.log(`--- test '${test.name}' halted with FAILURE (test ${testNumValue}) ---`);\n                            }\n                        }\n                        completed = true;\n                        break;\n                    }\n\n                    insCount += 1;\n                    stepExecutionLatch(exeModel);\n                    stepExecutionCombinatorial(exeModel, true);\n                }\n\n                if (!completed) {\n                    console.log(`--- test '${test.name}' halted after too many instructions ---`);\n                }\n            }\n        }\n        let endTime = performance.now();\n        let timeMs = endTime - startTime;\n        console.log(`All tests done in ${timeMs.toFixed(1)}ms. Success: ${successCount}/${totalCount} (repeats=${repeatCount}). Instructions: ${insCount} (${(insCount / timeMs).toFixed(0)} kHz)`);\n\n        stepExecutionCombinatorial(exeModel);\n        setEditorState(a => ({ ...a }));\n    }\n\n    async function runTestsQuickly() {\n        for (let test of examples) {\n            loadEntryData(test);\n            resetExeModel(exeModel, { hardReset: false });\n            stepExecutionCombinatorial(exeModel);\n\n            let completed = false;\n\n            for (let i = 0; i < 200; i++) {\n                await new Promise(resolve => setTimeout(resolve, 10));\n                setEditorState(a => ({ ...a }));\n\n                stepExecutionCombinatorial(exeModel);\n                if (exeModel.runArgs.halt) {\n                    let regs = getRegsComp();\n                    let resRegValue = regs?.data.file[10] ?? 0;\n                    let testNumValue = regs?.data.file[11] ?? 0;\n\n                    if (resRegValue !== 44 && resRegValue !== 911) {\n                        console.log(`--- test '${test.name}' halted with unknown result in reg[a0]: ${ensureSigned32Bit(resRegValue)} ---`);\n                    } else {\n                        let isSuccess = (resRegValue === 44) !== test.expectFail;\n\n                        if (isSuccess) {\n                            // console.log(`--- halted with success ---`);\n                        } else {\n                            console.log(`--- test '${test.name}' halted with FAILURE (test ${testNumValue}) ---`);\n                        }\n                    }\n                    completed = true;\n                    break;\n                }\n\n                stepExecutionLatch(exeModel);\n            }\n\n            if (!completed) {\n                console.log(`--- test '${test.name}' halted after too many instructions ---`);\n            }\n        }\n    }\n\n    function findCompByDefId(defId: string) {\n        return exeModel.comps.find(comp => comp.comp.defId === defId);\n    }\n\n    function getPcComp() {\n        return findCompByDefId('core/flipflop/reg1') as IExeComp<ICompDataSingleReg> | undefined;\n    }\n    function getRegsComp() {\n        return findCompByDefId('core/riscv/reg32') as IExeComp<ICompDataRegFile> | undefined;\n    }\n    function getRomComp() {\n        return findCompByDefId('core/mem/rom0') as IExeComp<IRomExeData> | undefined;\n    }\n\n    function onResetClicked() {\n        resetExeModel(exeModel, { hardReset: false });\n        stepExecutionCombinatorial(exeModel);\n        setEditorState(a => ({ ...a }));\n    }\n\n    return <div className={s.exampleView}>\n        <div className={s.header}>Examples\n            <div className={s.reloadBtn} onClick={() => setReloadCntr(a => a + 1)}>\n                <FontAwesomeIcon icon={faRotate} />\n            </div>\n        </div>\n\n        <div className={s.body}>\n            {examples.map((example, idx) => {\n\n                return <div\n                    className={s.entry}\n                    onClick={() => handleEntryClick(example)}\n                    key={idx}\n                >{example.name}</div>;\n            })}\n        </div>\n\n        <div className={s.divider} />\n\n        <div className={s.body}>\n            <button className={s.btn} disabled={exeModel.runArgs.halt} onClick={onStepClicked}>Step</button>\n            <button className={s.btn} onClick={onResetClicked}>Reset</button>\n            <button className={s.btn} onClick={onRunAllTestsClicked}>Run all</button>\n            <button className={s.btn} onClick={runTestsQuickly}>Run all (slow)</button>\n        </div>\n\n    </div>;\n};\n","import React from \"react\";\nimport { hasFlag, isNotNil } from \"../utils/data\";\nimport { Popup, PopupPos } from \"../utils/Portal\";\nimport { Vec3 } from \"../utils/vector\";\nimport { ensureSigned32Bit, ensureUnsigned32Bit, signExtend32Bit } from \"./comps/RiscvInsDecode\";\nimport { lookupPortInfo, netToString } from \"./CpuExecution\";\nimport { ISchematic as IEditSchematic, IoDir, PortType, RefType } from \"./CpuModel\";\nimport { useEditorContext } from \"./Editor\";\nimport s from \"./HoverDisplay.module.scss\";\nimport { computeSubLayoutMatrix, getCompSubSchematic } from \"./SubSchematics\";\n\nexport const HoverDisplay: React.FC<{\n    canvasEl: HTMLCanvasElement | null,\n}> = ({ canvasEl }) => {\n    let { editorState, exeModel, setEditorState } = useEditorContext();\n\n    let hovered = editorState.hovered;\n\n    let x: React.ReactNode = null;\n    if (hovered) {\n        let content: React.ReactNode = null;\n\n        if (hovered.ref.type === RefType.WireSeg || hovered.ref.type === RefType.WireNode) {\n            let netIdx = exeModel.lookup.wireIdToNetIdx.get(hovered.ref.id);\n            let net = exeModel.nets[netIdx ?? -1];\n            if (net) {\n                let bitWidth = net.width;\n                let bitVals = [];\n                if (net.width === 32) {\n                    bitWidth = 8;\n                    for (let i = 3; i >= 0; i--) {\n                        bitVals.push(net.value >>> (i * bitWidth) & 0xff);\n                    }\n                } else {\n                    bitVals.push(net.value);\n                }\n\n                let topLine: React.ReactNode;\n                if (hasFlag(net.type, PortType.Ctrl)) {\n                    topLine = <div>\n                        <span className={s.numVal}>0x{net.value.toString(16).padStart(net.width >>> 2, '0')}</span>\n                        <span className={s.bitWidth}>{' '} {net.width} bits</span>\n                    </div>;\n                } else {\n                    topLine = <div>\n                        <span className={s.numVal}>{ensureSigned32Bit(net.value).toString().padStart(2, '0')}</span>\n                        &nbsp;\n                        <span className={s.hexVal}>0x{ensureUnsigned32Bit(net.value).toString(16).padStart(net.width >>> 2, '0')}</span>\n                    </div>;\n                }\n\n                content = <div>\n                    {topLine}\n                    {bitVals.map((val, i) => {\n                        return <div key={i} className={s.bitVal}>{val.toString(2).padStart(bitWidth, '0')}</div>;\n                    })}\n                    <div className={s.compId}>{netToString(net, exeModel.comps)}</div>\n                    <div className={s.compId}>{net.wire.id}</div>\n                </div>;\n            } else {\n                content = <div>net {hovered.ref.id} {\"=>\"} {netIdx} not found</div>;\n            }\n\n        } else {\n            let compIdx = exeModel.lookup.compIdToIdx.get(hovered.ref.id);\n            let idxFound = isNotNil(compIdx);\n            let exeComp = exeModel.comps[compIdx ?? -1];\n\n            let portElNode: React.ReactNode = null;\n            let portIdStr: React.ReactNode = null;\n            if (hovered.ref.type === RefType.CompNode) {\n                let portInfo = lookupPortInfo(exeModel, hovered.ref);\n                if (portInfo) {\n                    let { portExe, port } = portInfo;\n                    let type = portExe.type;\n                    let typeStr = '';\n                    if (hasFlag(type, PortType.In)) {\n                        typeStr += 'in';\n                    }\n                    if (hasFlag(type, PortType.Out)) {\n                        typeStr += 'out';\n                    }\n                    if (hasFlag(type, PortType.Ctrl)) {\n                        typeStr += ' ctrl';\n                    }\n                    if (hasFlag(type, PortType.Data)) {\n                        typeStr += ' data';\n                    }\n                    if (hasFlag(type, PortType.Tristate)) {\n                        typeStr += ' tristate';\n                    }\n                    if (hasFlag(type, PortType.Addr)) {\n                        typeStr += ' addr';\n                    }\n\n                    let isInOut = hasFlag(type, PortType.In) && hasFlag(type, PortType.Out);\n                    let dirStr = '';\n                    if (isInOut) {\n                        dirStr = ', dir=' + IoDir[portExe.ioDir];\n                    }\n\n                    portElNode = <>\n                        <span>&nbsp; Port {port.name} ({typeStr}) io:{portExe.ioEnabled ? '1' : '0'}, du:{portExe.dataUsed ? '1' : '0'}{dirStr} V:0x{portExe.value.toString(16)}</span>\n                    </>;\n                    portIdStr = <span className={s.portId}>/{port.id}</span>;\n                }\n            }\n\n            if (exeComp) {\n                content = <div>\n                    <div>{portElNode ?? exeComp.comp.name}</div>\n                    <div className={s.compId}>{exeComp.comp.id}/{exeComp.comp.defId}{portIdStr}</div>\n                </div>;\n\n            } else {\n                content = <div>comp {hovered.ref.id} not found {idxFound ? `but has idx ${idxFound}` : 'and exeComp idx not found'}</div>;\n            }\n        }\n\n        let mtx = editorState.mtx;\n        let schematic: IEditSchematic = editorState.snapshot.mainSchematic;\n\n        let subParts = hovered.ref.id.split('|');\n        for (let i = 0; i < subParts.length - 1; i++) {\n            let comp = schematic.comps.find(c => c.id === subParts[i]);\n            let def = editorState.compLibrary.getCompDef(comp?.defId ?? '');\n            if (!comp || !def) {\n                break;\n            }\n            let subSchematic = getCompSubSchematic(editorState, comp);\n            if (!subSchematic) {\n                break;\n            }\n            let subMtx = computeSubLayoutMatrix(comp, subSchematic);\n            mtx = mtx.mul(subMtx);\n            schematic = subSchematic;\n        }\n\n        let offset = new Vec3(20, 20);\n        let pos = mtx.mulVec3(hovered.modelPt).add(offset);\n        x = <Popup placement={PopupPos.TopLeft} targetEl={canvasEl} className={s.hoverDisplay} offsetX={pos.x} offsetY={pos.y}>\n            <div>{content}</div>\n        </Popup>\n    }\n\n    return <>\n        {x}\n    </>;\n};\n","import { hasFlag, isNil } from \"../utils/data\";\nimport { Vec3 } from \"../utils/vector\";\nimport { FontType, makeCanvasFont } from \"./CanvasRenderHelpers\";\nimport { ICanvasState, IEditorState, IWireGraph, IExeNet, IExeSystem, IComp, ICompPort, IExePort, RefType, PortType, IWireGraphNode, IoDir } from \"./CpuModel\";\nimport { iterWireGraphSegments } from \"./Wire\";\n\nexport function renderWire(cvs: ICanvasState, editorState: IEditorState, wire: IWireGraph, exeNet: IExeNet, exeSystem: IExeSystem, idPrefix: string) {\n    let ctx = cvs.ctx;\n\n    let isCtrl = false;\n    let isData = false;\n    let isAddr = false;\n    let fullWireId = idPrefix + wire.id;\n\n    interface IPortBinding {\n        comp: IComp;\n        port: ICompPort;\n        exePort: IExePort;\n        nodeId: number;\n    }\n\n    let isNonZero = false;\n    let portBindings = new Map<string, IPortBinding>();\n    let flowSegs = new Set<string>(); // the direction of flow is given by id0 -> id1 in \"id0:id1\"\n    let flowNodes = new Set<number>();\n    let segKey = (id0: number, id1: number) => `${id0}:${id1}`;\n    let inputNodeCount = 0;\n\n    if (exeNet) {\n        isNonZero = exeNet.value !== 0;\n\n        let key = (compId: string, portId: string) => `${compId}:${portId}`;\n\n        for (let exePortRef of [...exeNet.inputs, ...exeNet.outputs]) {\n            let exeComp = exePortRef.exeComp;\n            let exePort = exePortRef.exePort;\n            let comp = exeComp.comp;\n            let port = comp.ports[exePort.portIdx];\n\n            if (!port) {\n                continue;\n            }\n\n            portBindings.set(key(comp.id, port.id), {\n                comp: comp,\n                port: comp.ports[exePort.portIdx],\n                exePort: exePort,\n                nodeId: -1,\n            });\n        }\n\n        let nodeIdToPortBinding = new Map<number, IPortBinding>();\n\n        for (let node of wire.nodes) {\n            if (node.ref?.type === RefType.CompNode) {\n                let portBinding = portBindings.get(key(node.ref.id, node.ref.compNodeId!));\n                if (portBinding) {\n                    let port = portBinding.port;\n                    if (hasFlag(port.type, PortType.Ctrl)) {\n                        isCtrl = true;\n                    }\n                    if (hasFlag(port.type, PortType.Data)) {\n                        isData = true;\n                    }\n                    if (hasFlag(port.type, PortType.Addr)) {\n                        isAddr = true;\n                    }\n                    nodeIdToPortBinding.set(node.id, portBinding);\n                    portBinding.nodeId = node.id;\n                }\n            }\n        }\n\n        let inputNodeIds: number[] = []; // should only be one active input! multiple imply some failure, and should probably be rendered specially in some way\n        let outputNodeIds: number[] = [];\n\n        for (let binding of nodeIdToPortBinding.values()) {\n            if (hasFlag(binding.port.type, PortType.In) && binding.exePort.ioDir !== IoDir.Out && binding.exePort.dataUsed) {\n                inputNodeIds.push(binding.nodeId);\n            }\n            if (hasFlag(binding.port.type, PortType.Out) && binding.exePort.ioDir !== IoDir.In && binding.exePort.dataUsed) {\n                outputNodeIds.push(binding.nodeId);\n            }\n        }\n\n        // now walk the wire graph from the inputNodeIds to all the outputNodeIds (shortest paths)\n        // and mark those segments as flow segments\n\n        for (let inputNodeId of inputNodeIds) {\n            let visited = new Set<number>();\n            let prevNodeId = new Map<number, number>();\n            let queue = [inputNodeId];\n\n            while (queue.length > 0) {\n                let nodeId = queue.shift()!;\n                if (visited.has(nodeId)) {\n                    continue;\n                }\n                visited.add(nodeId);\n\n                let node = wire.nodes[nodeId];\n                for (let nextNodeId of node.edges) {\n                    let node1 = wire.nodes[nextNodeId];\n                    if (visited.has(node1.id)) {\n                        continue;\n                    }\n                    prevNodeId.set(node1.id, nodeId);\n                    queue.push(node1.id);\n                }\n            }\n\n            for (let outputNodeId of outputNodeIds) {\n                let nodeId = outputNodeId;\n                while (nodeId !== inputNodeId) {\n                    let prevId = prevNodeId.get(nodeId);\n                    if (prevId === undefined) {\n                        break;\n                    }\n                    flowSegs.add(segKey(prevId, nodeId));\n                    flowNodes.add(prevId);\n                    nodeId = prevId;\n                }\n            }\n        }\n        inputNodeCount = outputNodeIds.length;\n    }\n\n    let width = isCtrl || exeNet?.width < 32 ? 1 : 3;\n\n    let hoverRef = editorState.hovered?.ref;\n    let isHover = (hoverRef?.type === RefType.WireSeg || hoverRef?.type === RefType.WireNode) && hoverRef.id === fullWireId;\n\n    let isSelected = false;\n    let selectedNodes = new Set<number>();\n    let selectedSegs = new Set<string>();\n\n    for (let sel of editorState.snapshot.selected) {\n        if (!(sel.type === RefType.WireNode || sel.type === RefType.WireSeg) || sel.id !== fullWireId) {\n            continue;\n        }\n        isSelected = true;\n\n        if (sel.type === RefType.WireNode) {\n            selectedNodes.add(sel.wireNode0Id!);\n        }\n        if (sel.type === RefType.WireSeg) {\n            selectedSegs.add(segKey(sel.wireNode0Id!, sel.wireNode1Id!));\n        }\n    }\n\n    ctx.lineCap = \"square\";\n    ctx.lineJoin = \"round\";\n\n    function isSegHover(node0: IWireGraphNode, node1: IWireGraphNode) {\n        return isHover && hoverRef!.type === RefType.WireSeg && hoverRef!.wireNode0Id === node0.id && hoverRef!.wireNode1Id === node1.id;\n    }\n\n    function isNodeHover(node: IWireGraphNode) {\n        return isHover && hoverRef!.type === RefType.WireNode && hoverRef!.wireNode0Id === node.id;\n    }\n\n    function isNodeSelected(node: IWireGraphNode) {\n        return isSelected && selectedNodes.has(node.id);\n    }\n\n    function isSegSelected(node0: IWireGraphNode, node1: IWireGraphNode) {\n        return isSelected && selectedSegs.has(segKey(node0.id, node1.id));\n    }\n\n    if (inputNodeCount > 1) {\n        ctx.save();\n        iterWireGraphSegments(wire, (node0, node1) => {\n            ctx.beginPath();\n            ctx.strokeStyle = '#f00';\n            ctx.lineWidth = (width + 5) * cvs.scale;\n            // ctx.filter = 'blur(4px)';\n            ctx.moveTo(node0.pos.x, node0.pos.y);\n            ctx.lineTo(node1.pos.x, node1.pos.y);\n            ctx.stroke();\n        });\n        ctx.restore();\n    }\n\n    if (isSelected) {\n        ctx.save();\n\n        ctx.beginPath();\n        iterWireGraphSegments(wire, (node0, node1) => {\n            if (isSegSelected(node0, node1)) {\n                ctx.moveTo(node0.pos.x, node0.pos.y);\n                ctx.lineTo(node1.pos.x, node1.pos.y);\n            }\n        });\n        ctx.strokeStyle = '#00f';\n        ctx.lineWidth = (width + 3) * cvs.scale;\n        ctx.stroke();\n\n        ctx.beginPath();\n        for (let node of wire.nodes) {\n            if (isNodeSelected(node)) {\n                ctx.moveTo(node.pos.x, node.pos.y);\n                ctx.arc(node.pos.x, node.pos.y, 3 * cvs.scale, 0, 2 * Math.PI);\n            }\n        }\n        ctx.strokeStyle = '#00f';\n        ctx.lineWidth = (width) * cvs.scale;\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    if (isHover) {\n        ctx.save();\n        iterWireGraphSegments(wire, (node0, node1) => {\n            ctx.beginPath();\n            if (isSegHover(node0, node1)) {\n                ctx.strokeStyle = '#55f';\n            } else {\n                ctx.strokeStyle = '#000';\n            }\n            ctx.lineWidth = width * cvs.scale;\n            ctx.filter = 'blur(3px)';\n            ctx.moveTo(node0.pos.x, node0.pos.y);\n            ctx.lineTo(node1.pos.x, node1.pos.y);\n            ctx.stroke();\n        });\n        ctx.restore();\n    }\n\n    let noFlowColor = '#D3D3D3';\n    let zeroFlowColor = '#fec44f';\n    let nonZeroFlowColor = '#d95f0e';\n    let flowColor = isNonZero ? nonZeroFlowColor : zeroFlowColor;\n\n    iterWireGraphSegments(wire, (node0, node1) => {\n        ctx.beginPath();\n\n        let isForwardFlow = flowSegs.has(segKey(node0.id, node1.id));\n        let isBackwardFlow = flowSegs.has(segKey(node1.id, node0.id));\n        let isFlow = isForwardFlow || isBackwardFlow;\n\n        // somehow will need to indicate flow direction (not yet)\n\n        ctx.strokeStyle = noFlowColor; //'#333';\n\n        if (isFlow) {\n            ctx.strokeStyle = flowColor;\n        }\n\n        ctx.lineWidth = width * cvs.scale;\n        ctx.moveTo(node0.pos.x, node0.pos.y);\n        ctx.lineTo(node1.pos.x, node1.pos.y);\n        ctx.stroke();\n    });\n\n    function drawEndCircle(p: Vec3, isHover: boolean) {\n        if (!isHover) {\n            return;\n        }\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, 5 * cvs.scale, 0, 2 * Math.PI);\n        // ctx.fillStyle = isHover ? '#f00' : '#000';\n        ctx.strokeStyle = isHover ? '#f00' : '#000';\n        ctx.lineWidth = 2 * cvs.scale;\n        ctx.stroke();\n    }\n\n    for (let node of wire.nodes) {\n        // find nodes at a T junction or a X junction\n        // and draw a circle at the junction\n        let dirsUsed = new Set<string>();\n\n        for (let edgeId of node.edges) {\n            let node2 = wire.nodes[edgeId];\n            let edgeDir = node2.pos.sub(node.pos).normalize();\n            let dir = `${edgeDir.x.toFixed(2)},${edgeDir.y.toFixed(2)}`;\n            dirsUsed.add(dir);\n        }\n\n        let isJunction = dirsUsed.size > 2;\n        if (isJunction) {\n            let x = node.pos.x;\n            let y = node.pos.y;\n            let r = Math.max(width, 2) * 1.7 * cvs.scale;\n            ctx.beginPath();\n            ctx.arc(x, y, r, 0, 2 * Math.PI);\n            let isFlow = flowNodes.has(node.id);\n            ctx.fillStyle = isFlow ? flowColor : noFlowColor;\n            ctx.fill();\n        }\n\n        if (isSelected) {\n            ctx.fillStyle = '#666';\n            ctx.font = makeCanvasFont(18 * cvs.scale, FontType.Mono);\n            ctx.textBaseline = 'bottom';\n            ctx.textAlign = 'left';\n            for (let node of wire.nodes) {\n                ctx.fillText(node.id.toString(), node.pos.x + 0.1, node.pos.y - 0.1);\n            }\n\n        }\n    }\n\n    for (let node of wire.nodes) {\n        drawEndCircle(node.pos, isHover && isNil(hoverRef?.wireNode1Id) && hoverRef?.wireNode0Id === node.id);\n    }\n\n    if (editorState.showExeOrder) {\n        let exeNetIdx = exeSystem.lookup.wireIdToNetIdx.get(fullWireId);\n        let order = exeSystem.executionSteps.findIndex(x => x.netIdx === exeNetIdx);\n\n        if (order >= 0) {\n\n            for (let node of wire.nodes) {\n                ctx.fillStyle = '#666';\n                ctx.font = makeCanvasFont(18 * cvs.scale, FontType.Mono);\n                ctx.textBaseline = 'bottom';\n                ctx.textAlign = 'left';\n                ctx.fillText(order.toString(), node.pos.x + 0.1, node.pos.y - 0.1);\n            }\n\n        }\n    }\n}\n","import { assignImm } from \"@/src/utils/data\";\nimport { faCheck, faPencil, faTimes, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useEditorContext } from \"../Editor\";\nimport { ISchematicDef } from \"./SchematicLibrary\";\nimport s from \"./SchematicLibraryView.module.scss\";\nimport { createSchematicCompDef } from \"../comps/SchematicComp\";\n\nexport const SchematicLibraryView: React.FC = () => {\n    let { editorState, setEditorState } = useEditorContext();\n\n    let compLibrary = editorState.compLibrary;\n    let schematicLib = editorState.schematicLibrary;\n\n    let saveFromState = useCallback(() => {\n        let schemId = editorState.activeSchematicId;\n        if (schemId) {\n            let schematic = schematicLib.getSchematic(schemId);\n            if (schematic) {\n                schematic.model = editorState.snapshot;\n                schematic.undoStack = editorState.undoStack;\n                schematic.redoStack = editorState.redoStack;\n                schematic.mtx = editorState.mtx;\n\n                if (schematic.compArgs) {\n                    let libItem = createSchematicCompDef(schematic.id, schematic.name, schematic.model.mainSchematic, schematic.compArgs);\n                    compLibrary.addLibraryItem(libItem);\n                }\n            }\n            schematicLib.saveToLocalStorage(schemId);\n        }\n    }, [editorState.activeSchematicId, editorState.snapshot, editorState.undoStack, editorState.redoStack, editorState.mtx, schematicLib, compLibrary]);\n\n    function loadIntoEditor(schematic: ISchematicDef) {\n        setEditorState(() => {\n            return assignImm(editorState, { desiredSchematicId: schematic.id });\n        });\n    }\n\n    function handleEntryClick(ev: React.MouseEvent, schematic: ISchematicDef) {\n        saveFromState();\n        loadIntoEditor(schematic);\n    }\n\n    function handleAddNew(ev: React.MouseEvent) {\n        let newSchematic = schematicLib.addCustomSchematic('New Schematic')!;\n        saveFromState();\n        loadIntoEditor(newSchematic);\n    }\n\n    interface INameEditState {\n        id: string;\n        schematic: ISchematicDef;\n        name: string;\n    }\n\n    let [nameEdit, setNameEdit] = useState<INameEditState | null>(null);\n\n    function handleEditName(ev: React.MouseEvent, schematic: ISchematicDef) {\n        setNameEdit({ id: schematic.id, name: schematic.name, schematic });\n    }\n\n    function cancelEditName() {\n        setNameEdit(null);\n    }\n\n    function applyEditName() {\n        if (nameEdit) {\n            nameEdit.schematic.name = nameEdit.name;\n            schematicLib.saveToLocalStorage(nameEdit.id);\n            setNameEdit(null);\n        }\n    }\n\n    async function handleDelete(ev: React.MouseEvent, schematic: ISchematicDef) {\n        // show confirmation dialog\n        if (confirm(`Are you sure you want to delete schematic \"${schematic.name}\"?`)) {\n            schematicLib.deleteCustomSchematic(schematic.id);\n        }\n        setEditorState(a => ({ ...a }));\n    }\n\n    useEffect(() => {\n        saveFromState();\n    }, [saveFromState]);\n\n    return <div className={s.libraryView}>\n        <div className={s.header}>Schematics</div>\n        <div className={s.body}>\n            {[...schematicLib.builtinSchematics].map(([id, schematic], idx) => {\n                return <div\n                    className={s.entry}\n                    key={idx}\n                >\n                    <div\n                        className={s.name}\n                        onMouseDown={ev => handleEntryClick(ev, schematic)}\n                    >\n                        {schematic.name}\n                    </div>\n                </div>\n            })}\n\n            <div className={s.divider} />\n\n            {[...schematicLib.customSchematics].map(([id, schematic], idx) => {\n                let isEditing = nameEdit?.id === schematic.id;\n\n                return <div\n                    className={s.entry}\n                    key={idx}\n                >\n                    {!isEditing && <>\n                        <div\n                            onMouseDown={ev => handleEntryClick(ev, schematic)}\n                            className={s.name}\n                        >{schematic.name}</div>\n                        <button className={s.btnIcon} onClick={ev => handleEditName(ev, schematic)}>\n                            <FontAwesomeIcon icon={faPencil} />\n                        </button>\n                        <button className={s.btnIcon} onClick={ev => handleDelete(ev, schematic)}>\n                            <FontAwesomeIcon icon={faTrash} />\n                        </button>\n                    </>}\n                    {isEditing && <>\n                        <input className={s.input} value={nameEdit!.name} onChange={ev => setNameEdit(a => assignImm(a!, { name: ev.target.value }))} />\n                        <button className={s.btnIcon} onClick={ev => applyEditName()}>\n                            <FontAwesomeIcon icon={faCheck} />\n                        </button>\n                        <button className={s.btnIcon} onClick={ev => cancelEditName()}>\n                            <FontAwesomeIcon icon={faTimes} />\n                        </button>\n                    </>}\n                </div>;\n            })}\n\n            <div className={s.divider} />\n\n            <button className={s.btn} onClick={handleAddNew}>Add new</button>\n        </div>\n    </div>;\n};\n","import { getOrAddToMap, assignImm } from \"../utils/data\";\nimport { IEditSnapshot, RefType, IElRef, IEditContext, IEditorState } from \"./CpuModel\";\nimport { updateSubSchematic } from \"./Editor\";\nimport { refToString, copyWireGraph, wireUnlinkNodes, repackGraphIds } from \"./Wire\";\n\nexport function getPrefixForSelection(snapshot: IEditSnapshot, editCtx?: IEditContext): [string, IElRef[]] {\n    if (snapshot.selected.length === 0) {\n        return [\"\", []];\n    }\n\n    let prefix: string;\n\n    if (editCtx) {\n        prefix = editCtx.idPrefix;\n    } else {\n        let lastSelected = snapshot.selected[snapshot.selected.length - 1];\n        let splitIdx = lastSelected.id.lastIndexOf(\"|\");\n        prefix = splitIdx === -1 ? \"\" : lastSelected.id.substring(0, splitIdx + 1);\n    }\n\n    let splitIdx = prefix.length - 1;\n\n    let selected = snapshot.selected\n        .filter(s => s.id.startsWith(prefix) && s.id.lastIndexOf(\"|\") === splitIdx)\n        .map(s => assignImm(s, { id: s.id.substring(splitIdx + 1) }));\n\n    return [prefix, selected];\n}\n\nexport function deleteSelection(snapshot: IEditSnapshot, editorState: IEditorState): IEditSnapshot {\n\n    let [idPrefix, selected] = getPrefixForSelection(editorState.snapshot);\n\n    let refStrs = new Set(selected.map(s => refToString(s)));\n    function selectionHasRef(id: string, type: RefType) {\n        return refStrs.has(refToString({ id, type }));\n    }\n\n    let selectionPerWire = new Map<string, IElRef[]>();\n    for (let ref of selected) {\n        if (ref.type === RefType.WireNode || ref.type === RefType.WireSeg) {\n            getOrAddToMap(selectionPerWire, ref.id, () => []).push(ref);\n        }\n    }\n\n    let newSnapshot = updateSubSchematic(editorState, { idPrefix }, snapshot, (schematic) => {\n\n        return assignImm(schematic, {\n            comps: schematic.comps.filter(c => !selectionHasRef(c.id, RefType.Comp)),\n            wires: schematic.wires\n                .map(w => {\n                    const refs = selectionPerWire.get(w.id);\n                    if (refs) {\n                        w = copyWireGraph(w);\n                        for (let ref of refs) {\n                            if (ref.type === RefType.WireNode) {\n                                let node = w.nodes[ref.wireNode0Id!];\n                                for (let e of node.edges) {\n                                    wireUnlinkNodes(node, w.nodes[e]);\n                                }\n                            } else if (ref.type === RefType.WireSeg) {\n                                let node0 = w.nodes[ref.wireNode0Id!];\n                                let node1 = w.nodes[ref.wireNode1Id!];\n                                wireUnlinkNodes(node0, node1);\n                            }\n                        }\n                        return repackGraphIds(w);\n                    }\n                    let newNodes = w.nodes.map(n => assignImm(n, { ref: n.ref && !refStrs.has(refToString(n.ref)) ? n.ref : undefined }));\n                    return assignImm(w, { nodes: newNodes });\n                }),\n        });\n    });\n\n    return assignImm(newSnapshot, { selected: [] });\n}\n","import { StateSetter, assignImm, getOrAddToMap } from \"../utils/data\";\nimport { Vec3 } from \"../utils/vector\";\nimport { IEditorState, RefType, IElRef, IWireGraph, ISchematic, IEditSchematic, IEditContext } from \"./CpuModel\";\nimport { editSnapshot, updateSubSchematic } from \"./Editor\";\nimport { exportData, importData, } from \"./ImportExport\";\nimport { deleteSelection } from \"./Selection\";\nimport { copyWireGraph, repackGraphIds, splitIntoIslands } from \"./Wire\";\nimport { CompLibrary } from \"./comps/CompBuilder\";\n\nexport function cutSelection(ev: KeyboardEvent, editorState: IEditorState, setEditorState: StateSetter<IEditorState>) {\n    let schematic = selectionToSchematic(editorState);\n    writeToClipboard(exportData(schematic));\n    setEditorState(editSnapshot(true, deleteSelection));\n}\n\nexport function copySelection(ev: KeyboardEvent, editorState: IEditorState, setEditorState: StateSetter<IEditorState>) {\n    let schematic = selectionToSchematic(editorState);\n    writeToClipboard(exportData(schematic));\n}\n\nexport function pasteSelection(ev: KeyboardEvent, editorState: IEditorState, setEditorState: StateSetter<IEditorState>) {\n\n    readFromClipboard().then(text => {\n\n        console.log('gonna paste', text);\n\n        let res = importData(text);\n\n        if (res.issues) {\n            console.log('paste issues', res.issues);\n            return;\n        } else if (res.schematic) {\n            console.log('want to merge in schematic', res.schematic);\n\n            // now have to merge in the schematic!\n            // update the ids (there will be conflicts)\n            // move to a new position (or the same position if we're on a different schematic with no overlaps)\n            // set the selection to the newly created components/wires\n            // link up _some_ wires to comp nodes\n            // maybe move the selection with the mouse, and require a click to place it?\n            // e.g. say we want to duplicate vertically, and link things up automatically\n\n            let snapshot = editorState.snapshot;\n\n            // setEditorState(editSubSchematic({ idPrefix: snapshot.focusedIdPrefix ?? '' }, true, (schematic, editorState) => {\n            //     return mergeInSchematic(schematic, res.schematic!, editorState.compLibrary);\n            // }));\n\n            setEditorState(editSnapshot(true, (snapshot, editorState) => {\n\n                let editCtx: IEditContext = { idPrefix: snapshot.focusedIdPrefix ?? '' };\n                let newSelectionRefs: IElRef[] = [];\n                let newSnapshot = updateSubSchematic(editorState, editCtx, snapshot, (schematic) => {\n                    let [newSchematic, refs] = mergeInSchematic(schematic, res.schematic!, editorState.compLibrary);\n                    newSelectionRefs = refs;\n                    return newSchematic;\n                });\n\n                newSnapshot = assignImm(newSnapshot, { selected: newSelectionRefs });\n\n                return newSnapshot;\n            }));\n        }\n    });\n}\n\nexport function mergeInSchematic(snapshot: IEditSchematic, srcSchematic: ISchematic, compLibrary: CompLibrary): [IEditSchematic, IElRef[]] {\n    if (srcSchematic.comps.length === 0 && srcSchematic.wires.length === 0) {\n        return [snapshot, []];\n    }\n    snapshot = { ...snapshot, comps: [...snapshot.comps], wires: [...snapshot.wires] };\n\n    let compIdRemap = new Map<string, string>();\n    let newSelectionRefs: IElRef[] = [];\n\n    let delta = new Vec3(10, 10);\n\n    for (let comp of srcSchematic.comps) {\n        let id = '' + snapshot.nextCompId++;\n\n        let newComp = compLibrary.create(comp.defId, comp.args);\n        newComp.id = id;\n        newComp.pos = comp.pos.add(delta);\n\n        compIdRemap.set(comp.id, id);\n        snapshot.comps.push(newComp);\n        newSelectionRefs.push({ id, type: RefType.Comp });\n    }\n\n    for (let wire of srcSchematic.wires) {\n        let wireCopy = copyWireGraph(wire);\n        for (let node of wireCopy.nodes) {\n            if (node.ref) {\n                node.ref = { ...node.ref, id: compIdRemap.get(node.ref.id) || node.ref.id };\n            }\n            node.pos = node.pos.add(delta);\n        }\n        let id = '' + snapshot.nextWireId++;\n        for (let node of wireCopy.nodes) {\n            newSelectionRefs.push({ id, type: RefType.WireNode, wireNode0Id: node.id });\n            for (let edge of node.edges) {\n                if (edge > node.id) {\n                    newSelectionRefs.push({ id, type: RefType.WireSeg, wireNode0Id: node.id, wireNode1Id: edge });\n                }\n            }\n        }\n        snapshot.wires.push({ ...wireCopy, id });\n    }\n\n    return [snapshot, newSelectionRefs];\n}\n\nexport function writeToClipboard(text: string) {\n    navigator.clipboard.writeText(text);\n}\n\nexport function readFromClipboard(): Promise<string> {\n    return navigator.clipboard.readText();\n}\n\nexport function selectionToSchematic(editorState: IEditorState): ISchematic {\n    let selected = editorState.snapshot.selected;\n\n    let selectedCompIds = new Set(selected.filter(a => a.type === RefType.Comp).map(a => a.id));\n    let selectedWireIds = new Map<string, IElRef[]>();\n\n    for (let ref of selected) {\n        if (ref.type === RefType.WireNode || ref.type === RefType.WireSeg) {\n            getOrAddToMap(selectedWireIds, ref.id, () => []).push(ref);\n        }\n    }\n\n    let wires: IWireGraph[] = [];\n\n    for (let wire of editorState.snapshot.mainSchematic.wires) {\n        if (!selectedWireIds.has(wire.id)) {\n            continue;\n        }\n\n        let refs = selectedWireIds.get(wire.id)!;\n        let nodeIdsToInclude = new Set<number>();\n        for (let r of refs) {\n            nodeIdsToInclude.add(r.wireNode0Id!);\n            if (r.type === RefType.WireSeg) {\n                nodeIdsToInclude.add(r.wireNode1Id!);\n            }\n        }\n\n        let trimmedWire = {\n            ...wire,\n            nodes: wire.nodes.map(n => {\n                let keep = nodeIdsToInclude.has(n.id);\n                return {\n                    ...n,\n                    edges: keep ? n.edges.filter(e => nodeIdsToInclude.has(e)) : [],\n                    ref: keep && n.ref && selectedCompIds.has(n.ref.id) ? n.ref : undefined,\n                };\n            }),\n        };\n\n        for (let subWire of splitIntoIslands(repackGraphIds(trimmedWire))) {\n            wires.push(subWire);\n        }\n    }\n\n    let snapshotPartial: ISchematic = {\n        compBbox: editorState.snapshot.mainSchematic.compBbox,\n        comps: editorState.snapshot.mainSchematic.comps.filter(c => selectedCompIds.has(c.id)),\n        wires: wires,\n    };\n\n    return snapshotPartial;\n}\n\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { AffineMat2d } from '../utils/AffineMat2d';\nimport { assignImm, assignImmFull, clamp, getOrAddToMap } from '../utils/data';\nimport { hasModifiers, isKeyWithModifiers, KeyboardOrder, Modifiers, useGlobalKeyboard } from '../utils/keyboard';\nimport { useCombinedMouseTouchDrag, useTouchEvents } from '../utils/pointer';\nimport { BoundingBox3d, projectOntoVector, segmentNearestPoint, Vec3 } from '../utils/vector';\nimport { ICanvasState, IEditSchematic, IEditSnapshot, IEditorState, IElRef, IHitTest, ISchematic, ISegment, IWireGraph, RefType } from './CpuModel';\nimport { editMainSchematic, editSnapshot, editSubSchematic, useEditorContext } from './Editor';\nimport { fixWire, wireToGraph, applyWires, checkWires, copyWireGraph, EPSILON, dragSegment, moveSelectedComponents, iterWireGraphSegments, refToString, wireUnlinkNodes, repackGraphIds } from './Wire';\nimport s from './CpuCanvas.module.scss';\nimport { CursorDragOverlay } from '../utils/CursorDragOverlay';\nimport { computeSubLayoutMatrix, editCtxFromRefId as editCtxFromElRef, getActiveSubSchematic, getCompFromRef, getCompSubSchematic, getMatrixForEditContext, getSchematicForRef, globalRefToLocal } from './SubSchematics';\nimport { useFunctionRef } from '../utils/hooks';\nimport { copySelection, cutSelection, pasteSelection } from './Clipboard';\nimport { deleteSelection } from './Selection';\n\nexport const CanvasEventHandler: React.FC<{\n    embedded?: boolean;\n    cvsState: ICanvasState,\n    children: React.ReactNode;\n}> = memo(function CanvasEventHandler({ cvsState, embedded, children }) {\n\n    let [ctrlDown, setCtrlDown] = useState(false);\n    let [canvasWrapEl, setCanvasWrapEl] = useState<HTMLDivElement | null>(null);\n    let { editorState, setEditorState } = useEditorContext();\n\n\n    useGlobalKeyboard(KeyboardOrder.MainPage, ev => {\n        if (ev.key === \"Control\") {\n            setCtrlDown(ev.type === \"keydown\");\n        }\n\n        if (ev.type !== \"keydown\") {\n            return;\n        }\n\n        if (isKeyWithModifiers(ev, \"o\", Modifiers.None)) {\n            setEditorState(a => assignImm(a, { showExeOrder: !a.showExeOrder }));\n        }\n        if (isKeyWithModifiers(ev, \"p\", Modifiers.None)) {\n            setEditorState(a => assignImm(a, { transparentComps: !a.transparentComps }));\n        }\n        if (isKeyWithModifiers(ev, \"x\", Modifiers.CtrlOrCmd)) {\n            cutSelection(ev, editorState, setEditorState);\n        }\n        if (isKeyWithModifiers(ev, \"c\", Modifiers.CtrlOrCmd)) {\n            copySelection(ev, editorState, setEditorState);\n        }\n        if (isKeyWithModifiers(ev, \"v\", Modifiers.CtrlOrCmd)) {\n            pasteSelection(ev, editorState, setEditorState);\n        }\n\n        if (ev.key === \"Delete\") {\n            setEditorState(editSnapshot(true, deleteSelection));\n        }\n    }, { receiveKeyUp: true });\n\n    let handleWheelFuncRef = useFunctionRef(handleWheel);\n\n    useEffect(() => {\n        if (canvasWrapEl) {\n            function wheelHandler(ev: WheelEvent) {\n                if (!embedded || hasModifiers(ev, Modifiers.CtrlOrCmd)) {\n                    handleWheelFuncRef.current(ev);\n                }\n            }\n            canvasWrapEl.addEventListener(\"wheel\", wheelHandler, { passive: false });\n            return () => {\n                canvasWrapEl!.removeEventListener(\"wheel\", wheelHandler);\n            };\n        }\n    }, [canvasWrapEl, handleWheelFuncRef, embedded]);\n\n\n    useTouchEvents(canvasWrapEl, { mtx: editorState.mtx }, { alwaysSendDragEvent: true },\n        function handle1PointDrag(ev, ds) {\n            let aPt0 = new Vec3(ds.touches[0].clientX, ds.touches[0].clientY);\n            let bPt0 = new Vec3(ev.touches[0].clientX, ev.touches[0].clientY);\n            let delta = bPt0.sub(aPt0);\n\n            let mtx = AffineMat2d.multiply(\n                AffineMat2d.translateVec(delta),\n                ds.data.mtx,\n            );\n\n            ev.stopPropagation();\n            ev.preventDefault();\n            setEditorState(a => assignImm(a, { mtx }));\n        },\n        function handle2PointDrag(ev, ds) {\n            let aPt0 = new Vec3(ds.touches[0].clientX, ds.touches[0].clientY);\n            let aPt1 = new Vec3(ds.touches[1].clientX, ds.touches[1].clientY);\n\n            let bPt0 = new Vec3(ev.touches[0].clientX, ev.touches[0].clientY);\n            let bPt1 = new Vec3(ev.touches[1].clientX, ev.touches[1].clientY);\n\n            let aCenter = aPt0.lerp(aPt1, 0.5);\n            let bCenter = bPt0.lerp(bPt1, 0.5);\n\n            let aLen = aPt0.dist(aPt1);\n            let bLen = bPt0.dist(bPt1);\n\n            // scale by ratio of lengths; keep model centers\n\n            let scale = bLen / aLen;\n            let mtx = AffineMat2d.multiply(\n                AffineMat2d.translateVec(bCenter),\n                AffineMat2d.scale1(scale),\n                AffineMat2d.translateVec(aCenter.mul(-1)),\n                ds.data.mtx,\n            );\n\n            ev.stopPropagation();\n            ev.preventDefault();\n            setEditorState(a => assignImm(a, { mtx }));\n        });\n\n    let [dragStart, setDragStart] = useCombinedMouseTouchDrag(cvsState?.canvas ?? null, ev => {\n        let hovered = ev.button === 0 ? editorState.hovered : null;\n\n        let editCtx = hovered ? editCtxFromElRef(hovered.ref) : { idPrefix: editorState.snapshot.focusedIdPrefix ?? \"\" };\n        let mtx = getMatrixForEditContext(editCtx, editorState);\n\n        return {\n            baseMtx: editorState.mtx,\n            mtx: mtx,\n            hovered: hovered,\n            modelPos: evToModel(ev, mtx),\n            ctrlDown: ctrlDown,\n            isSelecting: (ev.button === 0 && ctrlDown) || ev.button === 2,\n        };\n     }, function handleDrag(ev, ds, end) {\n\n        let selection = document.getSelection();\n        selection?.removeAllRanges();\n\n        let delta = new Vec3(ev.clientX - ds.clientX, ev.clientY - ds.clientY);\n\n        if (ds.data.isSelecting) {\n            let endPos = evToModel(ev, ds.data.mtx);\n            let startPos = ds.data.modelPos;\n            let bb = new BoundingBox3d(startPos, endPos);\n\n            let [idPrefix, schematic] = getActiveSubSchematic(editorState);\n\n            let compRefs = schematic.comps.filter(c => {\n                let bb2 = new BoundingBox3d(c.pos, c.pos.add(c.size));\n                return bb.intersects(bb2);\n            }).map(c => ({ type: RefType.Comp, id: idPrefix + c.id }));\n\n            let wireRefs = schematic.wires.flatMap(w => {\n                let nodeRefs: IElRef[] = [];\n                for (let node of w.nodes) {\n                    if (bb.contains(node.pos)) {\n                        nodeRefs.push({ type: RefType.WireNode, id: idPrefix + w.id, wireNode0Id: node.id });\n                    }\n                }\n\n                let segRefs: IElRef[] = [];\n                iterWireGraphSegments(w, (node0, node1) => {\n                    let bb2 = new BoundingBox3d(node0.pos, node1.pos);\n                    if (bb.intersects(bb2)) {\n                        segRefs.push({ type: RefType.WireSeg, id: idPrefix + w.id, wireNode0Id: node0.id, wireNode1Id: node1.id });\n                    }\n                });\n\n                return [...nodeRefs, ...segRefs];\n            });\n\n\n            setEditorState(a => assignImm(a, {\n                selectRegion: end ? null : { bbox: bb, idPrefix: '' },\n                snapshot: assignImm(a.snapshot, {\n                    selected: [...compRefs, ...wireRefs],\n                }),\n            }));\n\n        } else if (!ds.data.hovered) {\n            let newMtx = AffineMat2d.translateVec(delta).mul(ds.data.baseMtx);\n            setEditorState(a => assignImm(a, { mtx: newMtx }));\n        } else {\n            let mtx = ds.data.mtx;\n            let hoveredRef = ds.data.hovered.ref;\n\n            if (hoveredRef.type === RefType.Comp) {\n                let isSelected = editorState!.snapshot.selected.find(a => a.type === RefType.Comp && a.id === hoveredRef.id);\n                if (isSelected) {\n                    // handleComponentDrag(end, hoveredRef, ds.data.modelPos, evToModel(ev));\n                    handleSelectionDrag(end, ds.data.modelPos, evToModel(ev, mtx));\n                }\n            } else if (hoveredRef.type === RefType.CompNode) {\n                handleWireCreateDrag(end, hoveredRef, ds.data.modelPos, evToModel(ev, mtx));\n            } else if (hoveredRef.type === RefType.WireSeg) {\n                handleWireDrag(end, hoveredRef, ds.data.modelPos, evToModel(ev, mtx));\n            } else if (hoveredRef.type === RefType.WireNode) {\n                handleWireExtendDrag(end, hoveredRef, ds.data.modelPos, evToModel(ev, mtx), mtx);\n            }\n        }\n\n        ev.stopPropagation();\n        ev.preventDefault();\n    }, function handleClick(ev, ds) {\n\n        if (ds.data.hovered) {\n            let hoveredRef = ds.data.hovered.ref;\n            setEditorState(a => assignImm(a, {\n                snapshot: assignImm(a.snapshot, {\n                    selected: [hoveredRef],\n                }),\n            }));\n        } else {\n            setEditorState(a => assignImm(a, {\n                snapshot: assignImm(a.snapshot, {\n                    selected: [],\n                }),\n            }));\n        }\n\n        ev.stopPropagation();\n        ev.preventDefault();\n    });\n\n    let showTransparentComponents = dragStart?.data.ctrlDown || ctrlDown || editorState.transparentComps;\n\n    function handleSelectionDrag(end: boolean, origModelPos: Vec3, newModelPos: Vec3) {\n\n        setEditorState(editMainSchematic(end, (schematic, state, snapshot) => {\n            let deltaPos = newModelPos.sub(origModelPos);\n            let snappedDelta = snapToGrid(deltaPos);\n            return moveSelectedComponents(schematic, snapshot.selected, snappedDelta);\n        }));\n    }\n\n    function handleWireCreateDrag(end: boolean, globalRef: IElRef, origModelPos: Vec3, newModelPos: Vec3) {\n        let editCtx = editCtxFromElRef(globalRef);\n        let ref = globalRefToLocal(globalRef);\n        setEditorState(editSubSchematic(editCtx, end, schematic => {\n            let startComp = schematic.comps.find(c => c.id === ref.id);\n            if (!startComp) {\n                console.log(`WARN: handleWireCreateDrag: comp '${ref.id}' not found`);\n                return schematic;\n            }\n            let startNode = startComp.ports.find(n => n.id === ref.compNodeId);\n            if (!startNode) {\n                console.log(`WARN: handleWireCreateDrag: comp '${ref.id}' does not have the port '${ref.compNodeId}'`);\n                return schematic;\n            }\n\n            let startPt = startComp.pos.add(startNode.pos);\n            let endPt = snapToGrid(newModelPos);\n\n            let isHorizStart = startNode.pos.x === 0 || startNode.pos.x === startComp.size.x;\n\n            // split into horizontal and vertical segments\n            // maybe drop some of the if's, and have a cleanup phase\n            let segments: ISegment[] = [];\n            if (isHorizStart) {\n                segments.push({ p0: startPt, p1: new Vec3(endPt.x, startPt.y), comp0Ref: ref });\n                segments.push({ p0: new Vec3(endPt.x, startPt.y), p1: endPt });\n            } else {\n                segments.push({ p0: startPt, p1: new Vec3(startPt.x, endPt.y), comp0Ref: ref });\n                segments.push({ p0: new Vec3(startPt.x, endPt.y), p1: endPt });\n            }\n\n            let newWire: IWireGraph = fixWire(wireToGraph({\n                id: '' + schematic.nextWireId,\n                segments: segments,\n            }));\n\n            let newWires = [...schematic.wires, newWire];\n            let newLayout = applyWires(assignImm(schematic, { nextWireId: schematic.nextWireId + 1, wires: newWires }), newWires, newWires.length - 1);\n\n            return newLayout;\n        }));\n    }\n\n    let grabDirRef = useRef<Vec3 | null>(null);\n\n    /* We are dragging from the end of a segment. For now, assume it's a bare end.\n\n    Behaviours, assuming a horiz segment:\n        - dragging into the segment shortens it\n        - dragging out from the segment lengthens it\n        - we have a region around the segment end, and the direction through which we drag\n            defines the direction of the new segment (initially)\n        - then, we allow a dogleg, with that initial dir\n        - the initial dir can be reset by dragging back into the region & then out again\n        - what about if we dogleg while shortening? if we start with a horiz initial dir, then\n            do a shorten + single extend in opposite direction, i.e. keep the elbow, rather than create a T junction\n    */\n    function handleWireExtendDrag(end: boolean, globalRef: IElRef, origModelPos: Vec3, newModelPos: Vec3, mtx: AffineMat2d) {\n        let editCtx = editCtxFromElRef(globalRef);\n        let ref = globalRefToLocal(globalRef);\n        setEditorState(editSubSchematic(editCtx, end, function handleWireExtendDrag(schematic) {\n            checkWires(schematic.wires, 'handleWireExtendDrag (pre edit)');\n            let wireIdx = schematic.wires.findIndex(w => w.id === ref.id);\n            if (wireIdx === -1) {\n                console.log(`WARN: handleWireExtendDrag: wire '${ref.id}' not found`);\n                return schematic;\n            }\n\n            let wire = copyWireGraph(schematic.wires[wireIdx]);\n            let delta = newModelPos.sub(origModelPos);\n            let node = wire.nodes[ref.wireNode0Id!];\n            let startPos = node.pos;\n\n            let screenPos = modelToScreen(startPos, mtx);\n            let mouseScreenPos = modelToScreen(newModelPos, mtx);\n            let mouseDir = mouseScreenPos.sub(screenPos);\n            let mouseDirSnapped = mouseDir.normalize().round();\n            if (mouseDirSnapped.x !== 0 && mouseDirSnapped.y !== 0) {\n                mouseDirSnapped.y = 0;\n            }\n            let grabDirPx = 20;\n            if (!grabDirRef.current && mouseDir.len() > grabDirPx) {\n                // want to make one of the 4 cardinal directions\n                grabDirRef.current = mouseDirSnapped;\n            } else if (mouseDir.len() < grabDirPx) {\n                grabDirRef.current = null;\n            }\n\n            let grabDir = grabDirRef.current ?? mouseDirSnapped;\n\n            if (end) {\n                grabDirRef.current = null;\n            }\n\n            let endPos = snapToGrid(startPos.add(delta));\n\n            let moveDelta = endPos.sub(startPos);\n\n            let isReversing = false;\n            let allDirs: Vec3[] = [];\n            for (let node1Idx of node.edges) {\n                let node1 = wire.nodes[node1Idx];\n                let dir = node1.pos.sub(startPos).normalize();\n\n                if (dir.dot(grabDir) > 1.0 - EPSILON) {\n                    let newNode0Id = wire.nodes.length;\n                    let newNode1Id = wire.nodes.length + 1;\n                    // re-wire node 1 to point to new node\n                    let midPos = startPos.add(projectOntoVector(moveDelta, grabDir));\n                    node1.edges.push(newNode0Id);\n                    node1.edges = node1.edges.filter(e => e !== node.id);\n                    node.edges = node.edges.filter(e => e !== node1.id);\n                    wire.nodes.push({ id: newNode0Id, pos: midPos, edges: [node1Idx, newNode1Id] });\n                    wire.nodes.push({ id: newNode1Id, pos: endPos, edges: [newNode0Id] });\n                    isReversing = true;\n                    break;\n                }\n                allDirs.push(dir);\n            }\n\n            if (!isReversing) {\n                if (node.edges.length === 1 && grabDir.dot(wire.nodes[node.edges[0]].pos.sub(startPos)) < -1.0 + EPSILON) {\n                    // we're extending a bare end\n                    let newNode0Id = wire.nodes.length;\n                    let midPos = startPos.add(projectOntoVector(moveDelta, grabDir));\n                    node.pos = midPos;\n                    node.edges.push(newNode0Id);\n                    wire.nodes.push({ id: newNode0Id, pos: endPos, edges: [node.id] });\n                } else {\n                    let newNode0Id = wire.nodes.length;\n                    let newNode1Id = wire.nodes.length + 1;\n                    let midPos = startPos.add(projectOntoVector(moveDelta, grabDir));\n                    node.edges.push(newNode0Id);\n                    wire.nodes.push({ id: newNode0Id, pos: midPos, edges: [node.id, newNode1Id] });\n                    wire.nodes.push({ id: newNode1Id, pos: endPos, edges: [newNode0Id] });\n                }\n            }\n\n            // how are we manipulating our graph?\n            // guess we need to insert/remove nodes & their edges?\n\n            let wires = [...schematic.wires];\n            wires[wireIdx] = wire;\n\n            checkWires(wires, 'handleWireExtendDrag');\n\n            return applyWires(schematic, wires, wireIdx);\n        }));\n\n    }\n\n    function handleWireDrag(end: boolean, globalRef: IElRef, origModelPos: Vec3, newModelPos: Vec3) {\n        let editCtx = editCtxFromElRef(globalRef);\n        let ref = globalRefToLocal(globalRef);\n\n        setEditorState(editSubSchematic(editCtx, end, (layout) => {\n            let wireIdx = layout.wires.findIndex(w => w.id === ref.id);\n            if (wireIdx === -1) {\n                console.log(`WARN: handleWireDrag: wire ${ref.id} not found`)\n                return layout;\n            }\n            let wire = layout.wires[wireIdx];\n            let delta = newModelPos.sub(origModelPos);\n            let node0 = wire.nodes[ref.wireNode0Id!];\n            let node1 = wire.nodes[ref.wireNode1Id!];\n\n            // don't allow dragging of segments connected to components (since they're pinned)\n            // probably want to support dragging by introducing a perp-segment though\n            if (node0.ref || node1.ref) {\n                return layout;\n            }\n\n            let isHoriz = node0.pos.y === node1.pos.y;\n            if (isHoriz) {\n                delta = new Vec3(0, delta.y);\n            } else {\n                delta = new Vec3(delta.x, 0);\n            }\n\n            let newWire = dragSegment(wire, ref.wireNode0Id!, ref.wireNode1Id!, delta);\n\n            let wires = [...layout.wires];\n            wires[wireIdx] = newWire;\n            return applyWires(layout, wires, wireIdx);\n        }));\n    }\n\n    function handleWheel(ev: WheelEvent) {\n        setEditorState(a => {\n            let scale = a.mtx.a;\n            let newScale = clamp(scale * Math.pow(1.0013, -ev.deltaY), 0.01, 100000) / scale;\n\n            let modelPt = evToModel(ev, a.mtx);\n            let newMtx = AffineMat2d.multiply(\n                a.mtx,\n                AffineMat2d.translateVec(modelPt),\n                AffineMat2d.scale1(newScale),\n                AffineMat2d.translateVec(modelPt.mul(-1)));\n\n            return assignImm(a, { mtx: newMtx });\n        });\n        ev.stopPropagation();\n        ev.preventDefault();\n    }\n\n    function getRefUnderCursor(editorState: IEditorState, ev: React.MouseEvent, schematic?: ISchematic, mtx?: AffineMat2d, idPrefix: string = ''): IHitTest | null {\n        mtx ??= editorState.mtx;\n        schematic ??= editorState.snapshot.mainSchematic;\n\n        let mousePt = evToModel(ev, mtx);\n        let mousePtScreen = evToScreen(ev);\n\n        let comps = schematic.comps;\n\n        let refsUnderCursor: IHitTest[] = [];\n\n        for (let i = comps.length - 1; i >= 0; i--) {\n            let comp = comps[i];\n            for (let node of comp.ports) {\n                let modelPos = comp.pos.add(node.pos);\n                let nodeScreenPos = modelToScreen(modelPos, mtx);\n                let modelDist = modelPos.dist(mousePt);\n                let screenDist = nodeScreenPos.dist(mousePtScreen);\n                if (screenDist < 10 || modelDist < 0.2) {\n                    refsUnderCursor.push({\n                        ref: { type: RefType.CompNode, id: idPrefix + comp.id, compNodeId: node.id },\n                        distPx: screenDist,\n                        modelPt: modelPos,\n                    });\n                }\n            }\n        }\n\n        if (!showTransparentComponents) {\n            for (let i = comps.length - 1; i >= 0; i--) {\n                let comp = comps[i];\n                let bb = new BoundingBox3d(comp.pos, comp.pos.add(comp.size));\n                if (bb.contains(mousePt)) {\n\n                    if ((comp.hasSubSchematic || comp.subSchematicId) && editorState.maskHover !== comp.id) {\n                        let screenBb = mtx.mulBb(bb).shrinkInPlaceXY(20);\n                        if (screenBb.contains(mousePtScreen)) {\n                            // need some test of whether we can click through to the sub-schematic,\n                            // since still want to be able to select the component itself. Also should\n                            // be related to zoom level\n                            let def = editorState.compLibrary.getCompDef(comp.defId);\n                            let subSchematic = getCompSubSchematic(editorState, comp)!;\n                            if (subSchematic && def) {\n                                let subMtx = mtx.mul(computeSubLayoutMatrix(comp, subSchematic));\n\n                                let subRef = getRefUnderCursor(editorState, ev, subSchematic, subMtx, idPrefix + comp.id + '|');\n\n                                if (subRef) {\n                                    refsUnderCursor.push(subRef);\n                                }\n                            }\n                            continue;\n                        }\n                    }\n\n                    refsUnderCursor.push({\n                        ref: { type: RefType.Comp, id: idPrefix + comp.id },\n                        distPx: 0,\n                        modelPt: mousePt,\n                    });\n                }\n            }\n        }\n\n        let wires = schematic.wires;\n        for (let i = wires.length - 1; i >= 0; i--) {\n            let wire = wires[i];\n            for (let node of wire.nodes) {\n                let pScreen = modelToScreen(node.pos, mtx);\n                let screenDist = pScreen.dist(mousePtScreen);\n                if (screenDist < 10) {\n                    refsUnderCursor.push({\n                        ref: { type: RefType.WireNode, id: idPrefix + wire.id, wireNode0Id: node.id },\n                        distPx: screenDist,\n                        modelPt: screenToModel(pScreen, mtx),\n                    });\n                }\n            }\n\n            for (let node0 of wire.nodes) {\n                let p0Screen = modelToScreen(node0.pos, mtx);\n\n                for (let node1Idx of node0.edges) {\n                    if (node1Idx <= node0.id) {\n                        continue;\n                    }\n                    let node1 = wire.nodes[node1Idx];\n\n                    let p1Screen = modelToScreen(node1.pos, mtx);\n                    let isectPt = segmentNearestPoint(p0Screen, p1Screen, mousePtScreen);\n                    let screenDist = isectPt.dist(mousePtScreen);\n                    if (screenDist < 10) {\n                        refsUnderCursor.push({\n                            ref: { type: RefType.WireSeg, id: idPrefix + wire.id, wireNode0Id: node0.id, wireNode1Id: node1.id },\n                            distPx: screenDist,\n                            modelPt: screenToModel(isectPt, mtx),\n                        });\n                    }\n                }\n            }\n        }\n\n        return refsUnderCursor[0] ?? null;\n    }\n\n    function handleMouseMove(ev: React.MouseEvent) {\n\n        if (editorState.dragCreateComp) {\n            let compOrig = editorState.dragCreateComp.compOrig;\n            let mousePos = snapToGrid(evToModel(ev, editorState.mtx));\n\n            let applyFunc = (a: IEditSnapshot): IEditSnapshot => {\n                // figure out which schematic we're in\n                // (assume the main one for now!)\n\n                let newComp = assignImm(compOrig, {\n                    id: '' + a.mainSchematic.nextCompId,\n                    pos: mousePos,\n                });\n                return assignImm(a, {\n                    mainSchematic: assignImm(a.mainSchematic, {\n                        nextCompId: a.mainSchematic.nextCompId + 1,\n                        comps: [...a.mainSchematic.comps, newComp],\n                    }),\n                });\n            };\n\n            setEditorState(a => assignImm(a, {\n                dragCreateComp: assignImm(a.dragCreateComp, { applyFunc }),\n            }));\n\n            return;\n        }\n\n        let isect = getRefUnderCursor(editorState, ev);\n\n        setEditorState(a => assignImm(a, { hovered: assignImmFull(a.hovered, isect) }));\n    }\n\n    function handleMouseEnter(ev: React.MouseEvent) {\n    }\n\n    function handleMouseLeave(ev: React.MouseEvent) {\n        setEditorState(a => assignImm(a, {\n            hovered: null,\n            dragCreateComp: a.dragCreateComp ? assignImm(a.dragCreateComp, {\n                applyFunc: undefined\n            }) : undefined,\n        }));\n    }\n\n    function handleMouseDown(ev: React.MouseEvent) {\n        if (!editorState) {\n            return;\n        }\n\n        setDragStart(ev);\n    }\n\n    let cursor: string | undefined;\n    if (dragStart && dragStart.data.hovered?.ref.type === RefType.Comp) {\n        cursor = 'move';\n\n    } else if (editorState.hovered) {\n        let hoveredRef = editorState.hovered.ref;\n        if (hoveredRef.type === RefType.CompNode) {\n            cursor = 'crosshair';\n        } else if (hoveredRef.type === RefType.WireSeg) {\n            let [ref, schematic] = getSchematicForRef(editorState, hoveredRef);\n            let wire = schematic.wires.find(w => w.id === ref.id);\n            if (wire) {\n                let node0 = wire.nodes[ref.wireNode0Id!];\n                let node1 = wire.nodes[ref.wireNode1Id!];\n                if (node0 && node1) {\n                    let isHoriz = node0.pos.y === node1.pos.y;\n                    cursor = isHoriz ? 'ns-resize' : 'ew-resize';\n                }\n            }\n        } else if (hoveredRef.type === RefType.WireNode) {\n            cursor = 'crosshair';\n        } else if (hoveredRef.type === RefType.Comp) {\n            if (editorState.snapshot.selected.find(a => a.type === RefType.Comp && a.id === hoveredRef.id)) {\n                cursor = 'move';\n            }\n\n        }\n    }\n\n    let dragCursor: string | undefined;\n    if (dragStart && !dragStart.data.hovered) {\n        dragCursor = 'cursor-grabbing';\n    }\n\n    function snapToGrid(pt: Vec3) {\n        return pt.round();\n    }\n\n    function evToModel(ev: { clientX: number, clientY: number }, mtx: AffineMat2d) {\n        return mtx.mulVec3Inv(evToScreen(ev));\n    }\n\n    function evToScreen(ev: { clientX: number, clientY: number }) {\n        let bcr = cvsState?.canvas.getBoundingClientRect();\n        return new Vec3(ev.clientX - (bcr?.x ?? 0), ev.clientY - (bcr?.y ?? 0));\n    }\n\n    function modelToScreen(pt: Vec3, mtx: AffineMat2d) {\n        return mtx.mulVec3(pt);\n    }\n\n    function screenToModel(pt: Vec3, mtx: AffineMat2d) {\n        return mtx.mulVec3Inv(pt);\n    }\n\n    return <div\n        className={s.canvasEventSurface}\n        ref={setCanvasWrapEl}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onContextMenu={ev => ev.preventDefault()}\n        style={{ cursor }}>\n        {children}\n        {dragCursor && <CursorDragOverlay className={dragCursor} />}\n    </div>;\n});\n\n","\nexport function pluralize(a: string, count: number) {\n    return count === 1 ? a : a + 's';\n}\n","import { assignImm, getOrAddToMap, isNil } from \"@/src/utils/data\";\nimport { isKeyWithModifiers, KeyboardOrder, Modifiers, useGlobalKeyboard } from \"@/src/utils/keyboard\";\nimport { FullscreenOverlay } from \"@/src/utils/Portal\";\nimport { faClone, faImage, faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\nimport { faPencil, faPlus, faTimes, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport clsx from \"clsx\";\nimport React, { ButtonHTMLAttributes, useLayoutEffect, useMemo, useState } from \"react\";\nimport { ILibraryItem } from \"../CpuModel\";\nimport { useEditorContext } from \"../Editor\";\nimport { ISchematicDef } from \"../schematics/SchematicLibrary\";\nimport { pluralize } from \"@/src/utils/text\";\nimport { Resizer } from \"@/src/utils/Resizer\";\n\ninterface IMyFolder {\n    id: string;\n    items: ILibraryItem[];\n    groups: Map<string, IItemGroup>;\n}\n\n// share the same id except for the version\ninterface IItemGroup {\n    id: string;\n    name: string;\n    items: ILibraryItem[];\n}\n\nfunction parseId(id: string): { dir: string, name: string, path: string[], version: string } {\n    let [path, version] = id.split(':');\n    let pathParts = path.split('/');\n    let dir = pathParts.slice(0, pathParts.length - 1).join('/');\n    let name = pathParts[pathParts.length - 1];\n    return { path: pathParts, version, dir, name };\n}\n\nfunction libraryItemsToFolders(libraryItems: ILibraryItem[]): IMyFolder[] {\n    let folderLookup = new Map<string, IMyFolder>();\n\n    let byKey = new Map<string, ILibraryItem>();\n    for (let item of libraryItems) {\n        byKey.set(item.id, item);\n    }\n\n    for (let libraryItem of byKey.values()) {\n        let { dir, name, path, version } = parseId(libraryItem.id);\n\n        let folder = getOrAddToMap(folderLookup, dir, () => ({ id: dir, items: [], groups: new Map() }));\n        folder.items.push(libraryItem);\n\n        let groupId = path.join('/');\n        let group = getOrAddToMap(folder.groups, groupId, () => ({ id: groupId, name, items: [] }));\n        group.items.push(libraryItem);\n    }\n\n    return [...folderLookup.values()];\n\n\n}\n\n/* What does the LibraryBrowser show?\n\nWe currently have 2 concepts:\n 1) schematics, and\n 2) components\n\nBut really they can be sort of combined.\n  - We have leaf components with purely code implementations.\n  - We have components with only code impl, but in theory could have a schematic.\n  - We have components with only a schematic, built-in (for examples), and user-defined.\n\nSo schematics might have an implicit ICompDef (say they have no I/O), or explicitly, such as when\nthey're created from a group, or created from scratch.\n\nOur unit is a component + [schematic], which really is an ICompDef<any> atm.\n\nCan map a schematic to an ICompDef, and give it an id.\n\nNamespaces:\n\n* want a separate namespace for builtin (made by me) components\n* also need something to differentiate pure code components from schematic components\n\nWant to add comp logic to schematics, so they're upgraded a bit.\n\nHave:\n\nILibraryItem {\n    id: string;\n    name: string;\n    notes: string;\n    compDef?: ICompDef,\n    schematic?: ISchematicDef,\n}\n\ni.e. both parts are optional. We can add either side of the coin as desired. When referencing\na compDef from within a schematic, will use the compDef's defId.\n\nNamespacing of ids:\n - so the id is something like '/core/alu0:34'\n - said id needs to be in some namespace\n - probably want to have a separate namespace for builtin components, and user-defined components\n - /u/ for user-defined, any other prefix for builtin\n - Have an annoying situation with compDefs vs schematics:\n   - we can only add compDefs to a schematic, so have Map<string, ICompDef> lookup\n   - then the ICompDef's reference the actual schematic data\n   - Maybe we want Map<string, ILibraryItem> for our lookup? That will get the ICompDef & any schematic\n\n- OK, yeah that's a good idea, we have Map<string, ILibraryItem> as our central lookup data-structure, and\n  likely backed by IndexedDb, say\n\n- OK, so these are _definitions_, but then the ILibraryItem.schematic.comp[i] is an _instance_ of a\n  definition, and so has custom, per instance data.\n\n- Probably stick to the IComp object in these.\n- Next thing is how to make the execution model work with these sub-schematics.\n\n  - So a schematic-component might be liberally duplicated within a schematic. Each instance will\n    have its own state data, but we can probably use the same execution model across all of them.\n  - This will require construction of various phases of operation, to fit in with the IComp phase\n    system. We can just ignore that for now though, and build the full execution model each time.\n\n- When we zoom in, we track of the compId as well as the libraryId's. Also, we probably have single IComps,\n  with multiple IExeComps (each IExeComp in each instance as req'd). But also need a way to map a [ICompId, ICompId, ...] to\n  an IExeComp set (could do an offset?).\n\n- Looks like the approach to separating out IComp's from IExeComps was a good one.\n\n- Things like on-demand generation of internal schematics can be done down the line (e.g. for RISCV ins-decode, have both\n    js impl & schematic). Will need a way of mapping any state (via refs somehow), and also a flag somewhere, which defines\n    which mode to run, plus a \"test\" / \"both\" mode. This flag would be updated based on camera movement.\n\n- Managing id transitions:\n  - Think maybe we want multiple defIds, then can migrate between them, and update our builtins. Easier than getting it\n    right the first time.\n\n- Managing builtin comps:\n  - Do we want to be creating ILibraryItem's, or just add the ICompDef's to the library? Probably the latter. What about if\n    we add (optional) schematics to a semi-builtin? Maybe our coded ILibraryItem references the ICompDef directly, and the\n    id gets replaced, instead of creating a dummy ILibraryItem.\n\n\n- Ok, what's our upgrade path?\n  - Id transition: add field with new ids that we'll write. Both ids map to the same ILibraryItem in our lookup\n  - Create our central ILibraryItem lookup, and populate it with our builtins, both schematics & comps\n  - Probably just delete all the existing models.\n\n- Create a data-store for library-items\n- Add _add schematic_ support in the library\n*/\n\nfunction schematicToLibraryItem(schematic: ISchematicDef, isBuiltin: boolean): ILibraryItem {\n    return {\n        id: schematic.id,\n        name: schematic.name,\n        schematic: schematic.model.mainSchematic,\n        // ports: schematic?.compArgs?.ports.map(p => ({ ...p })) ?? [],\n        // size: schematic?.compArgs?.size ?? new Vec3(0, 0),\n        // type: CompDefType.UserDefined,\n        // subLayout: {\n        //     ports: [],\n        //     layout: schematic.model,\n        //     bb: new BoundingBox3d(new Vec3(0, 0), new Vec3(100, 100)),\n        // },\n    };\n}\n\nexport const LibraryBrowser: React.FC<{}> = () => {\n\n    let { editorState, setEditorState } = useEditorContext();\n    let [selectedFolderId, setSelectedFolderId] = useState<string | null>(null);\n    let [selectedItemId, setSelectedItemId] = useState<string | null>(null);\n\n    let builtinSchematics = editorState.schematicLibrary.builtinSchematics;\n    let customSchematics = editorState.schematicLibrary.customSchematics;\n    let comps = editorState.compLibrary.libraryLookup;\n\n    let allItems = useMemo(() => {\n        return [\n            ...[...builtinSchematics.values()].map(s => schematicToLibraryItem(s, true)),\n            ...[...customSchematics.values()].map(s => schematicToLibraryItem(s, false)),\n            ...comps.values(),\n        ];\n    }, [comps, builtinSchematics, customSchematics]);\n\n    let folders = libraryItemsToFolders(allItems);\n\n    useGlobalKeyboard(KeyboardOrder.Modal, ev => {\n        if (isKeyWithModifiers(ev, 'Escape', Modifiers.None)) {\n            handleClose();\n        }\n    });\n\n    // let folders = groupIntoFolders(exampleItems);\n\n    let selectedFolder = folders.find(a => a.id === selectedFolderId);\n    let selectedGroupId = selectedItemId ? parseId(selectedItemId).path.join('/') : null;\n    let selectedGroup = selectedFolder && selectedGroupId ? selectedFolder.groups.get(selectedGroupId) : null;\n    let selectedItem = selectedGroup && selectedItemId ? selectedGroup.items.find(a => a.id === selectedItemId) : null;\n\n    useLayoutEffect(() => {\n        if (isNil(selectedFolderId)) {\n            setSelectedFolderId(folders[0].id);\n        }\n        if (!selectedItem && selectedFolder) {\n            let groups = [...selectedFolder.groups.values()];\n            setSelectedItemId(groups[0].items[0].id);\n        }\n\n    }, [selectedFolderId, selectedItem, folders, selectedFolder]);\n\n    function handleClose() {\n        setEditorState(a => assignImm(a, { compLibraryVisible: false }));\n    }\n\n    return <FullscreenOverlay className={\"pointer-events-auto dialog-fade-in overscroll-none touch-none\"}>\n        <div className=\"absolute inset-0 bg-opacity-40 bg-black pointer-events-auto\" onClick={handleClose} />\n        <div className=\"flex flex-col bg-white rounded shadow-2xl absolute inset-10 overflow-hidden pointer-events-auto m-auto max-w-[80rem] max-h-[50rem]\">\n            <div className=\"px-2 py-1 text-center border-b text-2xl bg-gray-500 text-white relative\">\n                Component Library\n                <button className=\"cursor-pointer absolute top-0 right-0 bottom-0\" onClick={handleClose}>\n                    <FontAwesomeIcon icon={faTimes} className=\"px-3\" />\n                </button>\n            </div>\n            <Resizer id=\"libraryBrowser\" className=\"flex-1 overflow-hidden border\" defaultFraction={0.3}>\n                <div className=\"flex flex-col flex-1 overflow-hidden\">\n                    <h2 className=\"text-center p-1 border-b\">Folders</h2>\n                    <div className=\"flex flex-col overflow-y-auto flex-1\">\n                        <div className=\"flex flex-col bg-white flex-1\">\n\n                            {folders.map(folder => {\n                                let isSelected = folder.id === selectedFolderId;\n                                let itemCount = folder.items.length;\n                                let groupCount = folder.groups.size;\n\n                                return <div\n                                    key={folder.id}\n                                    className={clsx(\"px-2 py-1 w-full flex cursor-pointer items-center\", isSelected ? \"bg-blue-200 hover:bg-blue-300\" : \"bg-white hover:bg-slate-100\")}\n                                    onClick={() => setSelectedFolderId(folder.id)}\n                                >\n                                    {folder.id || '<no folder>'}\n                                    <div className=\"ml-auto text-gray-500 text-sm\">\n                                        {groupCount} ({itemCount})\n                                    </div>\n                                </div>;\n                            })}\n\n                        </div>\n                    </div>\n                </div>\n\n                <Resizer id=\"fileInfoSplit\" vertical className=\"flex-1\" defaultFraction={0.5}>\n                    <div className=\"flex-1 overflow-y-auto bg-gray-100 shadow-inner\">\n                        <div className=\"grid p-2\"\n                            style={{ gridTemplateColumns: 'repeat(auto-fit, 230px)' }}\n                        >\n                            {selectedFolder && <>\n\n                                {[...selectedFolder.groups.entries()].map(([gId, g]) => {\n                                    let isActive = gId === selectedGroupId;\n                                    return <GroupEntryFileCell key={gId} group={g} isActive={isActive} setSelectedItemId={setSelectedItemId} />;\n                                })}\n\n                                {/* <FileCell onClick={() => { }} className=\"items-center justify-center\" isSelected={false}>\n                                    <FontAwesomeIcon icon={faPlus} className=\"mr-2 text-6xl text-gray-300 group-hover:text-gray-400\" />\n                                </FileCell> */}\n                            </>}\n                        </div>\n                    </div>\n                    <div className=\"flex flex-1 flex-col\">\n                        <h2 className=\"text-center p-1 border-b\">File Info</h2>\n                        {selectedGroup && <SelectedGroupInfo group={selectedGroup} item={selectedItem ?? null} setSelectedItemId={setSelectedItemId} /> }\n                    </div>\n                </Resizer>\n            </Resizer>\n        </div>\n    </FullscreenOverlay>;\n};\n\nexport const GroupEntryFileCell: React.FC<{\n    isActive: boolean;\n    group: IItemGroup;\n    setSelectedItemId: (id: string) => void;\n}> = ({ group, isActive, setSelectedItemId }) => {\n    let nItems = group.items.length;\n\n    function handleItemEdit(ev: React.MouseEvent) {\n        ev.stopPropagation();\n    }\n\n    function handleItemClone(ev: React.MouseEvent) {\n        ev.stopPropagation();\n    }\n\n    function handleGroupDelete(ev: React.MouseEvent) {\n        ev.stopPropagation();\n    }\n\n    return <FileCell\n        isSelected={isActive}\n        onClick={() => setSelectedItemId(group.items[0].id)}\n    >\n        <h2 className=\"text-center p-1 text-lg\">{group.items[0].name}</h2>\n\n        <div className=\"flex flex-row flex-1\">\n            <div className=\"flex-1 relative p-1\">\n                <CompImage className=\"w-full h-full\" />\n            </div>\n\n            <div className=\"px-2 text-slate-500 text-sm flex items-center flex-col\">\n                <div className=\"mb-auto\">\n                    {nItems > 1 && <>\n                        {nItems} {pluralize('version', nItems)}\n                    </>}\n                </div>\n                <div className=\"flex flex-row\">\n                <IconButton icon={faPencil} onClick={handleItemEdit} />\n                <IconButton icon={faClone} onClick={handleItemClone} />\n                <IconButton icon={faTrashAlt} onClick={handleGroupDelete} />\n                </div>\n            </div>\n        </div>\n    </FileCell>;\n};\n\nexport const IconButton: React.FC<{\n    className?: string;\n    icon: IconDefinition;\n    onClick: (ev: React.MouseEvent) => void;\n} & ButtonHTMLAttributes<HTMLButtonElement>> = ({ className, icon, onClick, ...props }) => {\n\n    return <button {...props} className={clsx(\"text-gray-500 hover:text-black p-1\", className)} onClick={onClick}>\n        <FontAwesomeIcon icon={icon} />\n    </button>;\n};\n\nexport const FileCell: React.FC<{\n    onClick: (ev: React.MouseEvent) => void;\n    className?: string;\n    children?: React.ReactNode;\n    isSelected: boolean;\n}> = ({ onClick, children, className, isSelected }) => {\n\n    return <div\n        className={clsx(\"shadow border h-[7.5rem] m-2 flex-none flex flex-col cursor-pointer\", className, isSelected ? \"bg-blue-200 hover:bg-blue-300\" : \"bg-white hover:bg-slate-100\")}\n        onClick={onClick}>\n\n        {children}\n    </div>;\n};\n\nexport const SelectedGroupInfo: React.FC<{\n    group: IItemGroup,\n    setSelectedItemId: (id: string) => void;\n    item: ILibraryItem | null,\n}> = ({ group, item, setSelectedItemId }) => {\n\n    let selectedItemId = item?.id;\n\n    return <div className=\"flex flex-1 flex-row overflow-hidden\">\n        <div className=\"w-[14rem] flex flex-col border-r\">\n            <div className=\"px-2 py-1 text-center border-b\">Versions</div>\n            <div className=\"overflow-y-auto bg-gray-100 flex-1\">\n                <div className=\"flex flex-1 flex-col\">\n                    {group.items.map(item => {\n                        let { version } = parseId(item.id);\n                        let isSelected = item.id === selectedItemId;\n\n                        return <div\n                            key={item.id}\n                            className={clsx(\"px-2 py-1 flex items-center cursor-pointer\", isSelected ? \"bg-blue-200 hover:bg-blue-300\" : \"bg-white hover:bg-slate-100\")}\n                            onClick={() => setSelectedItemId(item.id)}\n                            >\n                            <div className=\"mr-1\">Version</div>\n                            <div className=\"pr-2 mr-auto\">{version}</div>\n\n                            <div className=\"text-sm\">\n                                <IconButton icon={faPencil} onClick={() => {}} />\n                                <IconButton icon={faClone} onClick={() => {}} />\n                                <IconButton icon={faTrashAlt} onClick={() => {}} />\n                            </div>\n                        </div>;\n                    })}\n                </div>\n            </div>\n        </div>\n        <div className=\"flex flex-col flex-1 px-3 overflow-hidden\">\n            <div className=\"flex flex-col py-1\">\n                <h1 className=\"text-lg\">{item?.name ?? group.name}</h1>\n                <h2 className=\"text-sm text-slate-500 font-mono pt-1\">{item?.id ?? group.id}</h2>\n            </div>\n            <div className=\"flex-1 flex-shrink overflow-hidden max-w-[20rem]\">\n                <CompImage className=\"flex-grow-0 pb-[66%]\" />\n            </div>\n        </div>\n    </div>;\n};\n\nexport const CompImage: React.FC<{\n    className?: string;\n    url?: string;\n}> = ({ className, url }) => {\n\n    let urlResolved = url;  // ?? \"https://via.placeholder.com/150\";\n\n    return <div className={clsx(\"bg-gray-200 flex items-center justify-center rounded relative overflow-hidden bg-opacity-30 shadow\", className)}>\n        {url && <img src={urlResolved} className=\"absolute inset-0 max-h-full max-w-full object-cover w-full h-full\" alt=\"Component\" />}\n        {!url && <div className=\"absolute inset-0 flex justify-center items-center bg-gray-200 bg-opacity-0\">\n            <FontAwesomeIcon icon={faImage} className=\"mr-2 text-6xl text-gray-400\" />\n        </div>}\n    </div>;\n};\n","\nexport function multiSortStableAsc<T>(arr: T[], sorters: ((a: T) => any)[]) {\n    let args = arr.map((a, i) => [...sorters.map(s => s(a)), i] as any[]);\n\n    let numSorters = sorters.length + 1;\n\n    args.sort((a, b) => {\n        for (let i = 0; i < numSorters; i++) {\n            if (a[i] < b[i]) {\n                return -1;\n            } else if (a[i] > b[i]) {\n                return 1;\n            }\n        }\n        return 0;\n    });\n\n    return args.map(a => arr[a[numSorters - 1]]);\n}\n","import clsx from 'clsx';\nimport React, { memo, useEffect, useLayoutEffect, useMemo, useReducer, useRef, useState } from 'react';\nimport { ViewLayoutContext, editSnapshot, editSnapshotDirect, useEditorContext, useViewLayout } from './Editor';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretRight, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { Gripper, ICompPortConfig, compPortDefId } from './comps/CompPort';\nimport { pluralize } from '../utils/text';\nimport { assignImm, clamp, hasFlag, isNotNil, makeArray } from '../utils/data';\nimport { Vec3 } from '../utils/vector';\nimport { useResizeChangeHandler } from '../utils/layout';\nimport { IComp, ICompPort, IEditSchematic, IEditSnapshot, PortType } from './CpuModel';\nimport { multiSortStableAsc } from '../utils/array';\nimport { paletteTw } from './palette';\nimport { AffineMat2d } from '../utils/AffineMat2d';\nimport { IPointerEvent, useCombinedMouseTouchDrag } from '../utils/pointer';\nimport { drawGrid } from './CanvasRenderHelpers';\nimport { CursorDragOverlay } from '../utils/CursorDragOverlay';\nimport { useFunctionRef } from '../utils/hooks';\n\n/*\n\nWhen we're editing a schematic, we have the option of making a component out of it. We need to choose\nthe size of the component and the positioning of its ports.\n\nThere is a 0,1-1 mapping between ports in the schematic and ports in the component. We may pre-add ports\non the component, and they'll essentially be ignored (value 0). When we add ports on the schematic, we'll\ntry to fit them on the component somewhere, maybe trying to position them how they're positioned on the\nschematic (will need a 'floating' flag).\n\nIf there's no where to put them, maybe leave them in an \"unattached\" state, and the user can manually\nresize the component and position them as desired.\n\nThe CompLayoutEditor is a side panel for managing the layout of a component. It will have a list of\nthe ports, as well as a diagram where ports can be dragged around. The component itself can also be\nresized (but not moved).\n\nIt'll be a hideable drawer thing, and if there's no component for the schematic, we'll show \"Create Component (4 ports)\"\ninstead. Clicking that will create a component with 4 ports, and open the drawer.\n\n\nWe'll need to add the info to EditorState, and probably CPULayout so we have undo/redo support.\n\nMight have to change ICpuLayout and split an interface off that goes into the edit tree (undoStack, redoStack, with selection etc).\n\n*/\n\nexport const CompLayoutToolbar: React.FC<{\n    className?: string;\n}> = memo(function CompLayoutToolbar({ className }) {\n    let { editorState, setEditorState } = useEditorContext();\n    let [isExpanded, setIsExpanded] = useState(false);\n\n    let snapshot = editorState.snapshotTemp ?? editorState.snapshot;\n    let schematic = snapshot.mainSchematic;\n\n    let hasComponent = schematic.compSize.x > 0 && schematic.compSize.y > 0;\n\n    let numPorts = useMemo(() => {\n        let numPorts = 0;\n        for (let comp of editorState.snapshot.mainSchematic.comps) {\n            if (comp.defId === compPortDefId) {\n                numPorts++;\n            }\n        }\n\n        return numPorts;\n    }, [editorState.snapshot]);\n\n    function onCreateEditClicked(ev: React.MouseEvent) {\n        setIsExpanded(a => !a);\n        if (!hasComponent) {\n            setEditorState(editSnapshot(true, (snap, state) => {\n                return assignImm(snap, {\n                    mainSchematic: assignImm(snap.mainSchematic, {\n                        compSize: new Vec3(4, 4),\n                    }),\n                });\n            }));\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n\n    return <div className={clsx(\"flex flex-col bg-white shadow-md border m-6 rounded items-stretch overflow-hidden\", className)}>\n        <div className='flex flex-row h-10'>\n            <div className=\"p-3 hover:bg-blue-300 cursor-pointer flex-1 flex justify-end items-center\" onClick={onCreateEditClicked}>\n                {!hasComponent && <>Create Component ({numPorts} {pluralize('port', numPorts)})\n                    <FontAwesomeIcon icon={faPlus} className=\"ml-2\" />\n                </>}\n                {hasComponent && <>\n                    Edit Component ({numPorts} {pluralize('port', numPorts)})\n                    <FontAwesomeIcon icon={faCaretRight} className=\"ml-3 transition-transform\" rotation={isExpanded ? 90 : undefined} />\n                </>}\n            </div>\n        </div>\n        {isExpanded && <CompLayoutEditor />}\n    </div>;\n});\n\nexport const CompLayoutEditor: React.FC<{\n\n}> = memo(function CompLayoutEditor({ }) {\n    let { editorState, setEditorState } = useEditorContext();\n    let [canvasWrapEl, setCanvasWrapEl] = useState<HTMLDivElement | null>(null);\n    let [canvaEl, setCanvasEl] = useState<HTMLCanvasElement | null>(null);\n    let [compPos, setCompPos] = useState(new Vec3());\n    let [dragPortIdx, setDragPortIdx] = useState<number | null>(null);\n    let [, redraw] = useReducer(a => a + 1, 0);\n\n    let [mtx, setMtx] = useState(() => {\n        let initScale = 40;\n        return new AffineMat2d(initScale, 0, 0, initScale, 1, 1);\n    });\n\n    useResizeChangeHandler(canvaEl?.parentElement, (bcr) => {\n        redraw();\n    });\n\n    let cvsBitsRef = useRef({\n        extraCanvases: new Map<string, HTMLCanvasElement>(),\n    });\n\n    function evToModel(ev: IPointerEvent) {\n        let bcr = canvaEl!.getBoundingClientRect();\n        let ctxPos = new Vec3(ev.clientX - bcr.left, ev.clientY - bcr.top);\n        return mtx.mulVec3Inv(ctxPos);\n    }\n\n    function handleWheel(ev: WheelEvent) {\n        let scale = mtx.a;\n        let newScale = clamp(scale * Math.pow(1.0013, -ev.deltaY), 0.01, 100000) / scale;\n\n        let modelPt = evToModel(ev);\n        let newMtx = AffineMat2d.multiply(\n            mtx,\n            AffineMat2d.translateVec(modelPt),\n            AffineMat2d.scale1(newScale),\n            AffineMat2d.translateVec(modelPt.mul(-1)));\n\n        setMtx(newMtx);\n        ev.stopPropagation();\n        ev.preventDefault();\n    }\n\n    let handleWheelFuncRef = useFunctionRef(handleWheel);\n\n    useEffect(() => {\n        if (canvasWrapEl) {\n            function wheelHandler(ev: WheelEvent) {\n                handleWheelFuncRef.current(ev);\n            }\n            canvasWrapEl.addEventListener(\"wheel\", wheelHandler, { passive: false });\n            return () => {\n                canvasWrapEl!.removeEventListener(\"wheel\", wheelHandler);\n            };\n        }\n    }, [canvasWrapEl, handleWheelFuncRef]);\n\n\n    let [dragStart, setDragStart] = useCombinedMouseTouchDrag(canvasWrapEl, ev => {\n        return { mtx };\n     }, function handleDrag(ev, ds, end) {\n        let delta = new Vec3(ev.clientX - ds.clientX, ev.clientY - ds.clientY);\n        let newMtx = AffineMat2d.translateVec(delta).mul(ds.data.mtx);\n        setMtx(newMtx);\n    });\n\n    useLayoutEffect(() => {\n        if (!canvaEl) {\n            return;\n        }\n        let bits = cvsBitsRef.current;\n\n        let ctx = canvaEl.getContext('2d')!;\n\n        let pr = window.devicePixelRatio;\n        let desiredWidth = Math.floor(canvaEl.parentElement!.clientWidth * pr);\n        let desiredHeight = Math.floor(canvaEl.parentElement!.clientHeight * pr);\n\n        if (canvaEl.width !== desiredWidth || canvaEl.height !== desiredHeight) {\n            canvaEl.width = desiredWidth;\n            canvaEl.height = desiredHeight;\n        }\n\n        ctx.save();\n        ctx.clearRect(0, 0, canvaEl.width, canvaEl.height);\n        ctx.scale(pr, pr);\n        ctx.transform(...mtx.toTransformParams());\n\n        // drawGrid(mtx, ctx, { tileCanvases: bits.extraCanvases }, '#aaa');\n\n        ctx.restore();\n\n    });\n\n    let snapshot = editorState.snapshotTemp ?? editorState.snapshot;\n    let schematic = snapshot.mainSchematic;\n\n    let schematicPortComps = useMemo(() => {\n        let ports = schematic.comps\n            .filter(a => a.defId === compPortDefId) as IComp<ICompPortConfig>[];\n\n        ports = multiSortStableAsc(ports, [a => a.args.type]);\n\n        return ports;\n    }, [schematic.comps]);\n\n    useEffect(() => {\n        let portIds = new Set(schematic.compPorts.map(a => a.id));\n        let schematicPortIds = new Set(schematicPortComps.map(a => a.args.portId));\n\n        let schematicPortsToAdd = schematic.compPorts.filter(a => !schematicPortIds.has(a.id));\n        let portsToAdd = schematicPortComps.filter(a => !portIds.has(a.args.portId));\n\n        let currPortPoses = schematic.compPorts.map(a => a.pos);\n\n        let autogenPorts: ICompPort[] = [];\n        for (let schemPort of portsToAdd) {\n            let targetPos: Vec3 | null = null;\n            for (let pos of iterPorts(schematic.compSize)) {\n                if (!currPortPoses.some(a => a.dist(pos) < 0.001)) {\n                    targetPos = pos;\n                    break;\n                }\n            }\n            if (targetPos) {\n                autogenPorts.push({\n                    id: schemPort.args.portId,\n                    pos: targetPos,\n                    name: schemPort.args.name,\n                    type: schemPort.args.type,\n                    width: schemPort.args.bitWidth,\n                });\n                currPortPoses.push(targetPos);\n            }\n        }\n\n        let newPorts = [...schematic.compPorts, ...autogenPorts];\n\n        if (autogenPorts.length > 0) {\n            setEditorState(editSnapshotDirect((snap) => {\n                return assignImm(snap, {\n                    mainSchematic: assignImm(snap.mainSchematic, {\n                        compPorts: newPorts,\n                    }),\n                });\n            }));\n        }\n\n    }, [schematicPortComps, schematic.compPorts, schematic.compSize, setEditorState]);\n\n    function handleCompPosChange(end: boolean, pos: Vec3) {\n        setCompPos(pos);\n    }\n\n    return <div className='h-[30rem] w-[20rem] bg-white flex flex-col'>\n\n        <ViewLayoutContext.Provider value={{ el: canvaEl!, mtx }}>\n            <div className='bg-white flex-1 border-y relative shadow-inner cursor-grab' ref={setCanvasWrapEl} onMouseDown={setDragStart}>\n                <canvas className='absolute w-full h-full' ref={setCanvasEl} />\n                <div className=\"overflow-hidden absolute left-0 top-0 w-full h-full pointer-events-none\">\n                    <div className=\"absolute origin-top-left\" style={{ transform: `matrix(${mtx.toTransformParams().join(',')})` }}>\n                        <CompBoxEditor size={schematic.compSize} pos={compPos} setPos={handleCompPosChange} />\n                        {schematic.compPorts.map((port, i) => {\n                            let portId = port.id;\n                            let schematicComp = schematicPortComps.find(a => a.args.portId === portId) ?? null;\n                            return <CompPortEditor\n                                key={i}\n                                portIdx={i}\n                                compPos={compPos}\n                                compSize={schematic.compSize}\n                                schematicComp={schematicComp}\n                                port={port}\n                                draggingPortIdx={dragPortIdx}\n                                setDraggingPortIdx={setDragPortIdx}\n                            />;\n                        })}\n                    </div>\n                </div>\n            </div>\n        </ViewLayoutContext.Provider>\n        <div className='x-compProps flex flex-col border-t'>\n            {editorState.schematicLibrary.getSchematic(editorState.activeSchematicId!)?.name}\n        </div>\n        <div className='x-compListViewport h-[12rem] overflow-y-auto bg-gray-100'>\n            <div className='x-compListBody flex-1 border-y'>\n                {schematicPortComps.map((comp, i) => {\n                    let args = comp.args;\n                    let isInput = hasFlag(args.type, PortType.In);\n\n                    return <div className='x-compListItem flex flex-row items-center py-1 border-b bg-white' key={i}>\n                        <div className={clsx('mx-2 w-[1.2rem] text-center font-mono rounded', isInput ? paletteTw.portInputBg : paletteTw.portOutputBg)}>{isInput ? 'I' : 'O'}</div>\n                        <div className='flex font-mono text-xs ml-1 w-[3rem]'>{args.portId}</div>\n                        <div className='flex-1'>{args.name}</div>\n                        <div className='px-2'>{args.bitWidth}</div>\n                    </div>;\n                })}\n            </div>\n        </div>\n        {dragStart && <CursorDragOverlay className='cursor-grabbing' />}\n\n    </div>;\n});\n\nfunction *iterPorts(size: Vec3) {\n    for (let i = 1; i < size.x; i++) {\n        yield new Vec3(i, 0);\n    }\n    for (let i = 1; i < size.y; i++) {\n        yield new Vec3(size.x, i);\n    }\n    for (let i = size.x - 1; i >= 1; i--) {\n        yield new Vec3(i, size.y);\n    }\n    for (let i = size.y - 1; i >= 1; i--) {\n        yield new Vec3(0, i);\n    }\n}\n\nexport const CompBoxEditor: React.FC<{\n    pos: Vec3;\n    size: Vec3;\n    setPos: (end: boolean, pos: Vec3) => void;\n}> = memo(function CompBoxEditor({ pos, size, setPos }) {\n    let { setEditorState } = useEditorContext();\n    let { mtx, el } = useViewLayout();\n    let [boxEl, setBoxEl] = useState<HTMLDivElement | null>(null);\n\n    function handleResize(end: boolean, pos: Vec3, size: Vec3) {\n        setPos(end, pos);\n        setEditorState(editSnapshot(end, snap => {\n            return assignImm(snap, {\n                mainSchematic: resizeCompBox(snap.mainSchematic, size),\n            });\n        }));\n    }\n\n    function evToModel(ev: IPointerEvent) {\n        let bcr = el!.getBoundingClientRect();\n        let ctxPos = new Vec3(ev.clientX - bcr.left, ev.clientY - bcr.top);\n        return mtx.mulVec3Inv(ctxPos);\n    }\n\n    // let [dragStart, setDragStart] = useCombinedMouseTouchDrag(boxEl, () => pos, function handleDrag(ev, ds, end) {\n    //     let delta = evToModel(ev).sub(evToModel(ds));\n    //     setPos(end, ds.data.add(delta).round());\n    // });\n\n    let zoom = mtx.a;\n\n    return <>\n        <div ref={setBoxEl} className={clsx('x_compRect absolute border border-black rounded origin-top-left cursor-move', paletteTw.compBg)}\n            // style={{ left: pos.x, top: pos.y, width: size.x + 'px', height: size.y + 'px', borderWidth: 1/pxPerUnit }} //, transform: `scale(${1/pxPerUnit})` }}>\n            style={{ width: size.x * zoom, height: size.y * zoom, transform: `translate(${pos.x}px, ${pos.y}px) scale(${1/zoom})` }}\n        >\n            {makeArray(4).map((_, i) => {\n                return <Gripper key={i} gripPos={i} pos={pos} size={size} onResize={handleResize} />;\n            })}\n        </div>\n        {/* <div\n            className={clsx('absolute origin-top-left')}\n            style={{ left: pos.x, top: pos.y, width: size.x * zoom, height: size.y * zoom, transform: `scale(${1/zoom})` }}\n        >\n        </div> */}\n    </>;\n});\n\nexport const CompPortEditor: React.FC<{\n    portIdx: number;\n    compPos: Vec3;\n    compSize: Vec3;\n    schematicComp: IComp<ICompPortConfig> | null;\n    port: ICompPort;\n    draggingPortIdx: number | null;\n    setDraggingPortIdx: (idx: number | null) => void;\n}> = memo(function CompPortEditor({ portIdx, compPos, compSize, schematicComp, port, draggingPortIdx, setDraggingPortIdx }) {\n    let { setEditorState } = useEditorContext();\n    let { mtx, el } = useViewLayout();\n    let [portEl, setPortEl] = useState<HTMLDivElement | null>(null);\n\n    function evToModel(ev: IPointerEvent) {\n        let bcr = el!.getBoundingClientRect();\n        let ctxPos = new Vec3(ev.clientX - bcr.left, ev.clientY - bcr.top);\n        return mtx.mulVec3Inv(ctxPos);\n    }\n\n    let [dragStart, setDragStart] = useCombinedMouseTouchDrag(portEl, () => port.pos, function handleDrag(ev, ds, end) {\n        let delta = evToModel(ev).sub(evToModel(ds));\n        let newPos = ds.data.add(delta);\n        setDraggingPortIdx(end ? null : portIdx);\n        setEditorState(editSnapshot(end, snap => {\n            return assignImm(snap, {\n                mainSchematic: movePortToNewLocation(snap.mainSchematic, portIdx, newPos),\n            });\n        }));\n        ev.stopPropagation();\n        ev.preventDefault();\n    });\n\n    let isInput = hasFlag(port.type, PortType.In);\n    let pos = compPos.add(port.pos);\n\n    let zoom = mtx.a;\n    let edge = getEdgeOfPort(port, compSize);\n\n    return <div\n        ref={setPortEl}\n        className={clsx(\n            'x_compPortHit group absolute origin-top-left cursor-crosshair flex items-center justify-center pointer-events-auto',\n            isNotNil(draggingPortIdx) && 'transition-transform',\n        )}\n        style={{ width: 12, height: 12, transform: `translate(${pos.x}px, ${pos.y}px) scale(${1/zoom}) translate(-50%, -50%)` }}\n        onMouseDown={(ev) => {\n            setDragStart(ev);\n            ev.stopPropagation();\n            ev.preventDefault();\n        }}\n    >\n        <div\n            className={clsx(\n                'x_compPort absolute rounded-[5px] w-[10px] h-[10px] group-hover:shadow border border-black',\n                isInput && 'bg-teal-400',\n                !isInput && 'bg-orange-400',\n            )}\n        />\n        <div\n            className={clsx(\n                'font-mono absolute whitespace-nowrap',\n                edge === RectSide.Top && 'rotate-[60deg] right-1 bottom-1 origin-right',\n                edge === RectSide.Bottom && 'rotate-[60deg] left-1 top-1 origin-left',\n                edge === RectSide.Left && 'right-4',\n                edge === RectSide.Right && 'left-4',\n            )}\n        >\n            {port.id}\n        </div>\n        {dragStart && <CursorDragOverlay className='cursor-crosshair' />}\n    </div>;\n\n});\n\nfunction resizeCompBox(snap: IEditSchematic, newSize: Vec3): IEditSchematic {\n    let compSize = snap.compSize;\n\n    let newCompPorts = [...snap.compPorts];\n\n    for (let edge of [0, 1, 2, 3]) {\n        let { edgeLen, fixedXPos } = getEdgeInfo(edge, snap.compSize)\n        let { edgeLen: newEdgeLen, fixedPos: newFixedPos } = getEdgeInfo(edge, newSize)\n        let portsOnEdge = getPortsOnEdge(snap.compPorts, edge, compSize);\n\n        // we do an insertion sort to reposition the ports\n        // and they may need to be shuffled around at each stage\n        let newPortsOnEdge: IEdgePort[] = [];\n        for (let edgePort of portsOnEdge) {\n            let insertPos = edgePort.linePos / edgeLen * newEdgeLen;\n            let success = insertPortAtPos(edgePort, insertPos, newEdgeLen, newPortsOnEdge);\n            if (!success) {\n                return snap;\n            }\n        }\n\n        for (let edgePort of newPortsOnEdge) {\n            let srcIdx = edgePort.srcIdx;\n            newCompPorts[srcIdx] = assignImm(newCompPorts[srcIdx], {\n                pos: new Vec3()\n                    .setAt(fixedXPos ? 0 : 1, newFixedPos)\n                    .setAt(fixedXPos ? 1 : 0, edgePort.linePos),\n            });\n        }\n    }\n\n    return assignImm(snap, {\n        compSize: newSize,\n        compPorts: newCompPorts,\n    });\n}\n\nenum RectSide {\n    Top,\n    Right,\n    Bottom,\n    Left,\n}\n\nfunction getEdgeOfPort(port: ICompPort, compSize: Vec3): RectSide {\n    let { x, y } = port.pos;\n    if (x === 0) {\n        return RectSide.Left;\n    } else if (x === compSize.x) {\n        return RectSide.Right;\n    } else if (y === 0) {\n        return RectSide.Top;\n    } else if (y === compSize.y) {\n        return RectSide.Bottom;\n    } else {\n        throw new Error(`Port ${port.id} is not on the edge of the component`);\n    }\n}\n\nfunction insertPortAtPos(portToInsert: IEdgePort, insertPos: number, edgeLen: number, portsOnEdge: IEdgePort[]) {\n\n    function tryMovePorts(startIdx: number, delta: number): number[] | null {\n        if (startIdx < 0 || startIdx >= portsOnEdge.length) {\n            return null;\n        }\n\n        // we'll insert at startIdx, and shift all ports after that by delta\n        // if there's no room, we'll return false\n        let deltas: number[] = portsOnEdge.map(() => 0);\n\n        let prevPos = portsOnEdge[startIdx].linePos; // the position we need to move out from\n        for (let i = startIdx; i >= 0 && i < portsOnEdge.length; i += delta) {\n            let port = portsOnEdge[i];\n            if (port.linePos !== prevPos) { // no need to move this port\n                break;\n            }\n            deltas[i] = delta;\n            let movedPos = port.linePos + delta;\n            if (movedPos < 1 || movedPos > edgeLen - 1) {\n                return null;\n            }\n            prevPos = movedPos;\n        }\n\n        return deltas;\n    }\n\n    let insertPosRounded = clamp(Math.round(insertPos), 1, edgeLen - 1);\n    let matchIdx = portsOnEdge.findIndex(a => a.linePos === insertPosRounded);\n\n    if (matchIdx >= 0) {\n        // need to shift ports on the edge to make room for the new port\n        // may need to shift either left or right, but the bestPos determines the order\n        let matchPos = portsOnEdge[matchIdx].linePos;\n        let deltas: number[] | null = null;\n        if (insertPos < matchPos) {\n            deltas = tryMovePorts(matchIdx, 1) ?? tryMovePorts(matchIdx, -1);\n        } else {\n            deltas = tryMovePorts(matchIdx, -1) ?? tryMovePorts(matchIdx, 1);\n        }\n\n        if (!deltas) {\n            return false;\n        }\n\n        for (let i = 0; i < portsOnEdge.length; i++) {\n            let edgePort = portsOnEdge[i];\n            let delta = deltas[i];\n            edgePort.linePos += delta;\n        }\n    }\n\n    portToInsert.linePos = insertPosRounded;\n    portsOnEdge.push(portToInsert);\n\n    return true;\n}\n\ninterface IEdgePort {\n    srcIdx: number;\n    pos: Vec3;\n    linePos: number;\n}\n\nfunction getEdgeInfo(edge: number, compSize: Vec3) {\n    let fixedXPos = edge === 1 || edge === 3; // right or left\n    let comparePos = edge === 1 || edge === 2 ? compSize : new Vec3(0, 0);\n    let edgeLen = fixedXPos ? compSize.y : compSize.x;\n    let fixedPos = fixedXPos ? comparePos.x : comparePos.y;\n    return { fixedXPos, edgeLen, fixedPos };\n}\n\nfunction getPortsOnEdge(ports: ICompPort[], bestEdge: number, compSize: Vec3): IEdgePort[] {\n\n    let fixedXPos = bestEdge === 1 || bestEdge === 3; // right or left\n    let comparePos = bestEdge === 1 || bestEdge === 2 ? compSize : new Vec3(0, 0);\n\n    let portsOnEdge = ports\n        .map((a, i) => ({\n            srcIdx: i,\n            pos: a.pos,\n            linePos: fixedXPos ? a.pos.y : a.pos.x,\n        }))\n        .filter(a => fixedXPos ? a.pos.x === comparePos.x : a.pos.y === comparePos.y);\n\n    portsOnEdge = multiSortStableAsc(portsOnEdge, [a => a.linePos]);\n\n    return portsOnEdge;\n}\n\nfunction movePortToNewLocation(snap: IEditSchematic, portIdx: number, newPos: Vec3): IEditSchematic {\n\n    let compSize = snap.compSize;\n    // note that newPos is not rounded, and will need to be in this function\n\n    // need to a) find the nearest edge position, and b) try to fit it into that edge\n    // slots along an edge of length 4 are at positions 1, 2, 3, i.e excluding 0 and 4\n\n    let xMin = 0.55;\n    let xMax = compSize.x - 0.55;\n\n    let yMin = 0.55;\n    let yMax = compSize.y - 0.55;\n\n    let bestEdge = 0;\n    let bestPos: Vec3 | null = null;\n    let bestDist = 0;\n\n    for (let edge of [0, 1, 2, 3]) {\n        let pos: Vec3;\n        if (edge === 0) { // top\n            pos = new Vec3(clamp(newPos.x, xMin, xMax), 0);\n        } else if (edge === 1) { // right\n            pos = new Vec3(compSize.x, clamp(newPos.y, yMin, yMax));\n        } else if (edge === 2) { // bottom\n            pos = new Vec3(clamp(newPos.x, xMin, xMax), compSize.y);\n        } else { // left\n            pos = new Vec3(0, clamp(newPos.y, yMin, yMax));\n        }\n\n        let dist = pos.dist(newPos);\n        if (!bestPos || dist < bestDist) {\n            bestPos = pos;\n            bestEdge = edge;\n            bestDist = dist;\n        }\n    }\n\n    if (!bestPos) {\n        return snap;\n    }\n\n    let { fixedXPos, edgeLen, fixedPos } = getEdgeInfo(bestEdge, compSize);\n\n    let portsOnEdge = getPortsOnEdge(snap.compPorts, bestEdge, compSize)\n        .filter(a => a.srcIdx !== portIdx);\n\n    if (portsOnEdge.length >= edgeLen - 1) {\n        // no room for this port\n        return snap;\n    }\n\n    let portToAdd: IEdgePort = {\n        linePos: fixedXPos ? bestPos.y : bestPos.x,\n        pos: bestPos,\n        srcIdx: portIdx,\n    };\n\n    let success = insertPortAtPos(portToAdd, portToAdd.linePos, edgeLen, portsOnEdge);\n    if (!success) {\n        return snap;\n    }\n\n    let newPorts = [...snap.compPorts];\n\n    for (let edgePort of portsOnEdge) {\n        let srcIdx = edgePort.srcIdx;\n        let port = newPorts[srcIdx];\n        newPorts[srcIdx] = assignImm(port, {\n            pos: new Vec3()\n                .setAt(fixedXPos ? 0 : 1, fixedPos)\n                .setAt(fixedXPos ? 1 : 0, edgePort.linePos),\n        });\n    }\n\n    return assignImm(snap, { compPorts: newPorts });\n}\n","\n/*\nMaybe a bit premature!\n\nMainly just want to support rendering either Cmd or Ctrl for Mac/Windows.\n\nCmd symbol: ⌘ (U+2318) \\u2318\n*/\n\nimport { hasFlag } from \"../utils/data\";\nimport { Modifiers } from \"../utils/keyboard\";\n\nexport enum KeymapAction {\n\n}\n\nexport class KeymapManager {\n    constructor() {\n\n    }\n\n\n}\n\nexport function modifiersToString(key: string, modifiers: Modifiers = Modifiers.None) {\n\n    // deprecated interface, but sufficient for determining if Mac for modifiers\n    // But can't use it here, since this code gets executed on the server as well (for hydration)\n    let isMac = false; // navigator.platform.indexOf('Mac') >= 0;\n\n    let str = '';\n    if (hasFlag(modifiers, Modifiers.CtrlOrCmd)) {\n        str += isMac ? '\\u2318' : 'Ctrl';\n    }\n    if (hasFlag(modifiers, Modifiers.Alt)) {\n        str += ' Alt';\n    }\n    if (hasFlag(modifiers, Modifiers.Shift)) {\n        str += ' Shift';\n    }\n    return (str + ' ' + key).trim();\n}\n\nexport function useKeymap() {\n\n}\n","import { Tooltip } from '@/src/utils/Tooltip';\nimport { IBaseEvent } from '@/src/utils/pointer';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport clsx from 'clsx';\nimport React from 'react';\n\nexport const ToolbarDivider: React.FC<{ className?: string }> = ({ className }) => {\n    return <div className={clsx(className, 'w-[1px] bg-slate-300 my-1 mx-2')} />;\n};\n\n\nexport const ToolbarButton: React.FC<{\n    className?: string,\n    icon?: IconProp,\n    text?: string,\n    disabled?: boolean;\n    notImpl?: boolean;\n    tip?: React.ReactNode,\n    children?: React.ReactNode,\n    onClick?: (ev: IBaseEvent) => void,\n}> = ({ className, icon, text, disabled, notImpl, tip, children, onClick }) => {\n\n    let btn = <button\n        className={clsx(className, 'group self-stretch min-w-[3rem] flex items-center justify-center disabled:opacity-40 rounded-md my-1', !disabled && \"hover:bg-blue-300 active:bg-blue-400\", notImpl && \"bg-red-100\")}\n        disabled={disabled}\n        onClick={onClick}\n    >\n        {text}\n        {icon && <FontAwesomeIcon icon={icon} className={clsx('text-gray-600 disabled:text-gray-300', text && 'ml-3')} />}\n        {children}\n    </button>;\n\n    return tip ? <Tooltip tip={tip}>{btn}</Tooltip> : btn;\n};\n","import React from \"react\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ToolbarButton } from \"./toolbars/ToolbarBasics\";\n\nexport const ComponentAdder: React.FC<{\n}> = () => {\n\n    return <>\n        <ToolbarButton className=\"px-4\">\n            <FontAwesomeIcon icon={faPlus} className=\"mr-2\" />\n            Add Component\n        </ToolbarButton>\n    </>;\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { faBook, faCheck, faChevronRight, faClockRotateLeft, faCodeFork, faExpand, faFileArrowDown, faFloppyDisk, faForward, faForwardFast, faForwardStep, faPause, faPlay, faPowerOff, faRedo, faRotateLeft, faSortNumericUp, faTimes, faUndo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { assignImm, isNotNil } from '../../utils/data';\nimport { useGlobalKeyboard, KeyboardOrder, isKeyWithModifiers, Modifiers } from '../../utils/keyboard';\nimport { IBaseEvent } from '../../utils/pointer';\nimport { editMainSchematic, editSnapshot, redoAction, undoAction, useEditorContext } from '../Editor';\nimport clsx from 'clsx';\nimport { Tooltip } from '../../utils/Tooltip';\nimport { resetExeModel, stepExecutionCombinatorial, stepExecutionLatch } from '../CpuExecution';\nimport { modifiersToString } from '../Keymap';\nimport { ComponentAdder } from '../ComponentAdder';\nimport { ToolbarButton, ToolbarDivider } from './ToolbarBasics';\nimport { useInterval, useRequestAnimationFrame } from '@/src/utils/hooks';\nimport { ToolbarTypes } from '../CpuModel';\n\nexport const MainToolbar: React.FC<{\n    readonly?: boolean,\n    toolbars?: ToolbarTypes[],\n}> = ({ readonly, toolbars }) => {\n    let { editorState, setEditorState } = useEditorContext();\n\n    useGlobalKeyboard(KeyboardOrder.MainPage, ev => {\n        if (isKeyWithModifiers(ev, 'z', Modifiers.CtrlOrCmd)) {\n            undo();\n        }\n        if (isKeyWithModifiers(ev, 'y', Modifiers.CtrlOrCmd) || isKeyWithModifiers(ev, 'z', Modifiers.CtrlOrCmd | Modifiers.Shift)) {\n            redo();\n        }\n    });\n\n    function save() {\n        if (editorState.activeSchematicId) {\n            editorState.schematicLibrary.saveToLocalStorage(editorState.activeSchematicId);\n        }\n    }\n\n    function saveAs() {\n\n    }\n\n    function saveToFile() {\n        if (editorState.activeSchematicId) {\n            editorState.schematicLibrary.saveToFile(editorState.activeSchematicId, editorState.snapshot);\n        }\n    }\n\n    function undo() {\n        setEditorState(undoAction(editorState));\n    }\n\n    function redo() {\n        setEditorState(redoAction(editorState));\n    }\n\n    function handleLibraryClick() {\n        setEditorState(a => assignImm(a, { compLibraryVisible: !a.compLibraryVisible }));\n    }\n\n    function handleNameChange(ev: IBaseEvent, value: string, end: boolean) {\n        setEditorState(editMainSchematic(end, a => assignImm(a, { name: value })));\n    }\n\n    let undoAvailable = editorState.undoStack.length > 0;\n    let redoAvailable = editorState.redoStack.length > 0;\n\n    if (readonly) {\n        return <div className='top-1 left-1 h-12 bg-white drop-shadow-md flex'>\n            {toolbars?.includes(ToolbarTypes.PlayPause) && <>\n                <StepperControls />\n                <ToolbarDivider />\n            </>}\n            {toolbars?.includes(ToolbarTypes.Viewport) && <>\n                <ViewportControls />\n\n            </>}\n        </div>;\n    }\n\n    return <div className='h-12 bg-white drop-shadow-md flex'>\n        <ToolbarButton icon={faFloppyDisk} onClick={save} tip={`Save (${modifiersToString('S', Modifiers.CtrlOrCmd)})`} />\n        <ToolbarButton icon={faCodeFork} onClick={saveAs} notImpl tip={`Duplicate (${modifiersToString('S', Modifiers.CtrlOrCmd | Modifiers.Shift)})`} />\n        <ToolbarButton icon={faFileArrowDown} onClick={saveToFile} tip={`Save To File`} />\n\n        <ToolbarDivider />\n\n        <ToolbarButton icon={faUndo} disabled={!undoAvailable} onClick={undo} tip={`Undo (${modifiersToString('Z', Modifiers.CtrlOrCmd)})`} />\n        <ToolbarButton icon={faRedo} disabled={!redoAvailable} onClick={redo} tip={`Redo (${modifiersToString('Y', Modifiers.CtrlOrCmd)}, ${modifiersToString('Z', Modifiers.CtrlOrCmd | Modifiers.Shift)})`} />\n\n        <ToolbarDivider />\n\n        <ToolbarButton className=\"whitespace-nowrap px-4\" onClick={handleLibraryClick} text={\"Library\"} icon={faBook} />\n\n        <ToolbarDivider />\n\n        <StepperControls />\n\n        <ToolbarDivider />\n\n        <ViewportControls />\n\n        <ToolbarDivider />\n\n        <ComponentAdder />\n\n        <ToolbarDivider />\n\n        <div className='min-w-[200px] h-full flex items-center'>\n            <div className='mr-2'>Name:</div>\n            <ToolbarNameEditor value={editorState.snapshot.mainSchematic.name} setValue={handleNameChange} />\n        </div>\n    </div>;\n};\n\n\n\nconst ToolbarNameEditor: React.FC<{\n    value: string,\n    setValue: (ev: IBaseEvent, value: string, end: boolean) => void,\n}> = ({ value, setValue }) => {\n    let [editingName, setEditingName] = useState<string | null>(null);\n\n    let isEditingName = isNotNil(editingName);\n    let [inputEl, setInputEl] = useState<HTMLInputElement | null>(null);\n\n    useEffect(() => {\n        if (inputEl) {\n            inputEl.focus();\n            inputEl.select();\n        }\n    }, [inputEl]);\n\n    function applyEditName(ev: IBaseEvent) {\n        setValue(ev, editingName!, true);\n        setEditingName(null);\n    }\n\n    function cancelEditName(ev: IBaseEvent) {\n        setValue(ev, value, true);\n        setEditingName(null);\n    }\n\n    function handleKeyDown(ev: React.KeyboardEvent) {\n        if (isEditingName) {\n            if (isKeyWithModifiers(ev, 'Enter')) {\n                applyEditName(ev);\n                ev.stopPropagation();\n                ev.preventDefault();\n            } else if (isKeyWithModifiers(ev, 'Escape')) {\n                cancelEditName(ev);\n                ev.stopPropagation();\n                ev.preventDefault();\n            }\n        }\n        ev.stopPropagation();\n    }\n\n    return <>\n        {!isEditingName && <div className='hover:bg-slate-300 bg-slate-100 my-1 px-2 py-1 rounded flex-1' onClick={() => setEditingName(value)}>{value}</div>}\n        {isEditingName && <>\n            <input\n                ref={setInputEl}\n                type='text'\n                className='bg-slate-300 px-2 py-1 mr-1 my-1 rounded focus:outline-none focus:border-slate-500 w-[16rem] max-w-[20rem] flex-shrink'\n                value={editingName || ''}\n                onChange={ev => setEditingName(ev.target.value)}\n                onKeyDown={handleKeyDown}\n                onKeyUp={ev => ev.stopPropagation()}\n            />\n            <button className={\"px-1 mx-1 hover:text-slate-200\"} onClick={applyEditName}>\n                <FontAwesomeIcon icon={faCheck} />\n            </button>\n            <button className={\"px-1 mx-1 hover:text-slate-200\"} onClick={cancelEditName}>\n                <FontAwesomeIcon icon={faTimes} />\n            </button>\n        </>}\n    </>;\n};\n\n\nexport const StepperControls: React.FC<{\n\n}> = () => {\n    let { editorState, setEditorState, exeModel } = useEditorContext();\n\n    useGlobalKeyboard(KeyboardOrder.MainPage, ev => {\n        if (isKeyWithModifiers(ev, ' ', Modifiers.None)) {\n            step();\n        }\n        if (isKeyWithModifiers(ev, 'Backspace', Modifiers.None)) {\n            resetSoft();\n        }\n    });\n\n    function resetHard() {\n        resetExeModel(exeModel, { hardReset: true });\n        stepExecutionCombinatorial(exeModel);\n        setEditorState(a => ({ ...a }));\n    }\n\n    function resetSoft() {\n        resetExeModel(exeModel, { hardReset: false });\n        stepExecutionCombinatorial(exeModel);\n        setEditorState(a => ({ ...a }));\n    }\n\n    function step() {\n        if (!exeModel.runArgs.halt) {\n            stepExecutionLatch(exeModel);\n        }\n\n        if (!exeModel.runArgs.halt) {\n            stepExecutionCombinatorial(exeModel);\n        }\n\n        setEditorState(a => ({ ...a }));\n    }\n\n    let isPlaying = isNotNil(editorState.stepSpeed);\n    let intervalEnabled = isPlaying && editorState.stepSpeed! < 60;\n    let interval = isNotNil(editorState.stepSpeed) ? 1000 / editorState.stepSpeed : 0;\n    let animFrameEnabled = isPlaying && !intervalEnabled;\n\n    function stepOrStop() {\n        if (exeModel.runArgs.halt) {\n            setEditorState(a => assignImm(a, { stepSpeed: undefined }));\n            return false;\n        }\n\n        if (!exeModel.runArgs.halt) {\n            stepExecutionLatch(exeModel);\n        }\n\n        stepExecutionCombinatorial(exeModel);\n\n        setEditorState(a => ({ ...a }));\n\n        return !exeModel.runArgs.halt;\n    }\n\n\n    useInterval(intervalEnabled, interval, () => {\n        stepOrStop();\n    }, { runImmediately: true });\n\n    let iterAcc = useRef(0);\n\n    if (!animFrameEnabled) {\n        iterAcc.current = 0;\n    }\n\n    useRequestAnimationFrame(animFrameEnabled, dt => {\n        let perfStart = performance.now();\n        let numIterationsFloat = editorState.stepSpeed! * dt / 1;\n        let maxTime = 16;\n        iterAcc.current += numIterationsFloat;\n        let itersToRun = Math.floor(iterAcc.current);\n        for (let i = 0; i < itersToRun; i++) {\n            let running = stepOrStop();\n            if (!running || performance.now() > perfStart + maxTime) {\n                iterAcc.current = 0;\n                break;\n            }\n            iterAcc.current -= 1;\n        }\n    });\n\n    function forwardSlow() {\n        setEditorState(a => assignImm(a, { stepSpeed: 1.0 }));\n    }\n\n    function forwardMed() {\n        setEditorState(a => assignImm(a, { stepSpeed: 20.0 }));\n    }\n\n    function forwardFast() {\n        setEditorState(a => assignImm(a, { stepSpeed: 100000.0 }));\n    }\n\n    function stop() {\n        setEditorState(a => assignImm(a, { stepSpeed: undefined }));\n    }\n\n    let halted = exeModel.runArgs.halt && !isPlaying;\n\n    return <>\n        <ToolbarButton icon={faPowerOff} disabled={false} onClick={resetHard} tip={\"Hard reset: clear all memory\"} />\n        <ToolbarButton icon={faClockRotateLeft} disabled={false} onClick={resetSoft} tip={`Soft reset: clear RAM & registers (${modifiersToString('Backspace')})`} />\n        <ToolbarButton icon={faChevronRight} disabled={halted} onClick={step} className='px-4' text={'Step'} tip={`Take single step (${modifiersToString('Space')})`} />\n        <ToolbarButton icon={isPlaying ? faPause : faPlay} disabled={halted} onClick={isPlaying ? stop : forwardSlow} tip={\"Step slowly: 1 Hz\"} />\n        <ToolbarButton icon={faForward} disabled={halted} onClick={forwardMed} tip={\"Step medium: 20 Hz\"} />\n        <ToolbarButton icon={faForwardFast} disabled={halted} onClick={forwardFast} tip={\"Step fast as possible\"} />\n    </>;\n};\n\nconst ViewportControls: React.FC<{\n\n}> = () => {\n    let { editorState, setEditorState, exeModel } = useEditorContext();\n\n    function handleExpand() {\n        setEditorState(a => assignImm(a, { needsZoomExtent: true }));\n    }\n\n    return <>\n        <ToolbarButton icon={faExpand} disabled={false} onClick={handleExpand} tip={\"Zoom Extent\"} />\n    </>;\n};\n","import React, { useState } from \"react\";\nimport { IViewLayoutContext, editMainSchematic, editSnapshot, useEditorContext, useViewLayout } from \"./Editor\";\nimport { BoundingBox3d, Vec3 } from \"../utils/vector\";\nimport { RectCorner, RectSide } from \"./comps/SchematicComp\";\nimport clsx from \"clsx\";\nimport { IPointerEvent, useCombinedMouseTouchDrag } from \"../utils/pointer\";\nimport { assignImm } from \"../utils/data\";\nimport { CursorDragOverlay } from \"../utils/CursorDragOverlay\";\n\nexport const CompBoundingBox: React.FC<{\n\n}> = () => {\n    let { editorState, setEditorState } = useEditorContext();\n    let viewLayout = useViewLayout();\n    let schematic = (editorState.snapshotTemp ?? editorState.snapshot).mainSchematic;\n    let compBb = schematic.compBbox;\n\n    function handleEdgeDrag(end: boolean, side: RectSide, dest: Vec3) {\n        setEditorState(editMainSchematic(end, (layout) => {\n            let prev = layout.compBbox;\n\n            let tl = prev.min.clone();\n            let br = prev.max.clone();\n\n            let isVertical = side === RectSide.Left || side === RectSide.Right;\n\n            if (isVertical) {\n                if (side === RectSide.Left) { tl.x = dest.x; } else { br.x = dest.x; }\n            } else {\n                if (side === RectSide.Top) { tl.y = dest.y; } else { br.y = dest.y; }\n            }\n\n            tl = roundToHalfway(tl);\n            br = roundToHalfway(br);\n\n            return assignImm(layout, { compBbox: new BoundingBox3d(tl, br) });\n        }));\n\n    }\n\n    function handleCornerDrag(end: boolean, corner: RectCorner, dest: Vec3) {\n        setEditorState(editMainSchematic(end, (layout) => {\n            let prev = layout.compBbox;\n\n            let tl = prev.min.clone();\n            let br = prev.max.clone();\n\n            if (corner & RectCorner.IsLeft) { tl.x = dest.x; } else { br.x = dest.x; }\n            if (corner & RectCorner.IsTop) { tl.y = dest.y; } else { br.y = dest.y; }\n\n            tl = roundToHalfway(tl);\n            br = roundToHalfway(br);\n\n            return assignImm(layout, { compBbox: new BoundingBox3d(tl, br) });\n        }));\n    }\n\n    let scale = viewLayout.mtx.a;\n    let dirs = [RectSide.Top, RectSide.Right, RectSide.Bottom, RectSide.Left];\n    let corners = [RectCorner.TopLeft, RectCorner.TopRight, RectCorner.BottomRight, RectCorner.BottomLeft];\n\n    return <div style={{ position: 'absolute', transformOrigin: 'top left', transform: `scale(${1/scale})` }}>\n        {dirs.map(side => <EdgeHitTarget key={side} bb={compBb} side={side} viewLayout={viewLayout} onEdgeDrag={handleEdgeDrag} />)}\n        {corners.map(corner => <CornerHitTarget key={corner} bb={compBb} corner={corner} viewLayout={viewLayout} onCornerDrag={handleCornerDrag} />)}\n    </div>;\n};\n\nexport const EdgeHitTarget: React.FC<{\n    viewLayout: IViewLayoutContext,\n    bb: BoundingBox3d;\n    side: RectSide;\n    onEdgeDrag: (end: boolean, side: RectSide, dest: Vec3) => void;\n}> = ({ bb, side, onEdgeDrag, viewLayout }) => {\n    let [el, setEl] = useState<HTMLDivElement | null>(null);\n\n    let [dragStart, setDragStart] = useCombinedMouseTouchDrag(el, (ev) => {\n        ev.stopPropagation();\n        ev.preventDefault();\n        return 0;\n    }, (ev, _ds, end) => {\n        onEdgeDrag(end, side, evToModel(viewLayout, ev));\n        ev.stopPropagation();\n        ev.preventDefault();\n    });\n\n    let isVertical = side === RectSide.Left || side === RectSide.Right;\n    let size = bb.size();\n    let scale = viewLayout.mtx.a;\n    let hitWidth = 16;\n\n    let transform: string | undefined;\n    if (isVertical) {\n        let left = side === RectSide.Left ? bb.min.x : bb.max.x;\n        transform = `translate(${left * scale}px, ${bb.min.y * scale}px) translateX(-50%)`;\n    } else {\n        let top = side === RectSide.Top ? bb.min.y : bb.max.y;\n        transform = `translate(${bb.min.x * scale}px, ${top * scale}px) translateY(-50%)`;\n    }\n\n    return <div\n        ref={setEl}\n        className={clsx(\"pointer-events-auto absolute\")}\n        style={{\n            cursor: isVertical ? \"ew-resize\" : \"ns-resize\",\n            transform: transform,\n            width: isVertical ? `${hitWidth}px` : `${size.x * scale}px`,\n            height: isVertical ? `${size.y * scale}px` : `${hitWidth}px`,\n        }}\n        onMouseDown={setDragStart}\n    >\n        {dragStart && <CursorDragOverlay className={isVertical ? \"cursor-ew-resize\" : \"cursor-ns-resize\"} />}\n    </div>;\n};\n\nexport const CornerHitTarget: React.FC<{\n     viewLayout: IViewLayoutContext,\n     bb: BoundingBox3d;\n     corner: RectCorner;\n     onCornerDrag: (end: boolean, corner: RectCorner, dest: Vec3) => void;\n}> = ({ bb, corner, viewLayout, onCornerDrag }) => {\n    let [el, setEl] = useState<HTMLDivElement | null>(null);\n\n    let [dragStart, setDragStart] = useCombinedMouseTouchDrag(el, (ev) => {\n        ev.stopPropagation();\n        ev.preventDefault();\n        return 0;\n    }, (ev, _ds, end) => {\n        onCornerDrag(end, corner, evToModel(viewLayout, ev));\n        ev.stopPropagation();\n        ev.preventDefault();\n    });\n\n    let isMainDiag = corner === RectCorner.TopLeft || corner === RectCorner.BottomRight;\n\n    let hitWidth = 16;\n    let left = (corner & RectCorner.IsLeft) ? bb.min.x : bb.max.x;\n    let top = (corner & RectCorner.IsTop) ? bb.min.y : bb.max.y;\n    let scale = viewLayout.mtx.a;\n\n    return <div\n        ref={setEl}\n        className={clsx(\"pointer-events-auto absolute\")}\n        style={{\n            cursor: isMainDiag ? \"nwse-resize\" : \"nesw-resize\",\n            transform: `translate(${left * scale}px, ${top * scale}px) translate(-50%, -50%)`,\n            width: `${hitWidth}px`,\n            height: `${hitWidth}px`,\n        }}\n        onMouseDown={setDragStart}\n    >\n        {dragStart && <CursorDragOverlay className={isMainDiag ? \"cursor-nwse-resize\" : \"cursor-nesw-resize\"} />}\n    </div>;\n};\n\nfunction evToScreen(viewLayout: IViewLayoutContext, ev: IPointerEvent) {\n    let bcr = viewLayout.el.getBoundingClientRect();\n    return new Vec3(ev.clientX - bcr.left, ev.clientY - bcr.top);\n}\n\nfunction evToModel(viewLayout: IViewLayoutContext, ev: IPointerEvent) {\n    return screenToModel(viewLayout, evToScreen(viewLayout, ev));\n}\n\nfunction screenToModel(viewLayout: IViewLayoutContext, screenPos: Vec3) {\n    return viewLayout.mtx.mulVec3Inv(screenPos);\n}\n\nfunction modelToScreen(viewLayout: IViewLayoutContext, modelPos: Vec3) {\n    return viewLayout.mtx.mulVec3(modelPos);\n}\n\nfunction roundToHalfway(a: Vec3) {\n    return new Vec3(\n        Math.round(a.x - 0.5) + 0.5,\n        Math.round(a.y - 0.5) + 0.5);\n}\n","import React from \"react\";\nimport { editComp, useEditorContext } from \"./Editor\";\nimport { IEditSnapshot, RefType } from \"./CpuModel\";\nimport { StringEditor } from \"./displayTools/StringEditor\";\nimport { assignImm } from \"../utils/data\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { getCompFromRef, getCompSubSchematic } from \"./SubSchematics\";\n\nexport const CompDetails: React.FC<{\n}> = ({  }) => {\n\n    let editCtx = useEditorContext();\n    let { editorState, setEditorState } = editCtx;\n\n    let snapshot = editorState.snapshotTemp ?? editorState.snapshot;\n    let numSelected = snapshot.selected.length;\n\n    let singleCompRef = numSelected === 1 && snapshot.selected[0].type === RefType.Comp ? snapshot.selected[0] : null;\n    let singleComp = singleCompRef ? getCompFromRef(editorState, singleCompRef.id) : null;\n    let compDef = singleComp ? editorState.compLibrary.getCompDef(singleComp.defId) : null;\n\n    function handleNameUpdate(end: boolean, value: string) {\n        setEditorState(editComp({ idPrefix: \"\" }, end, singleComp!, comp => assignImm(comp, { name: value })));\n    }\n\n    function handleExtIdUpdate(end: boolean, value: string) {\n        setEditorState(editComp({ idPrefix: \"\" }, end, singleComp!, comp => assignImm(comp, { extId: value })));\n    }\n\n    function handleInternalSchematicAddNew() {\n        let newSchematic = editorState.schematicLibrary.addCustomSchematic('New Schematic')!;\n        newSchematic.model.mainSchematic.parentCompDefId = singleComp!.defId;\n        // probably want to zoom into the new schematic??\n        setEditorState(editComp({ idPrefix: \"\" }, true, singleComp!, comp => assignImm(comp, { subSchematicId: newSchematic.id })));\n    }\n\n    let subSchematic = singleComp ? getCompSubSchematic(editorState, singleComp) : null;\n\n    return <div className=\"flex flex-col flex-1\">\n        {numSelected === 0 && <div>No component selected</div>}\n        {numSelected === 1 && singleComp && compDef && <div>\n            <div className=\"mt-2 mb-2 mx-2\"><b>{singleComp.name}</b></div>\n            <div className=\"mx-2\">\n                <EditKvp label={'Id'}><code>{singleComp.id}</code></EditKvp>\n                <EditKvp label={'Def Id'}><code>{singleComp.defId}</code></EditKvp>\n                <EditKvp label={'Name'}><StringEditor className=\"bg-slate-100 rounded flex-1\" value={singleComp.name} update={handleNameUpdate} /></EditKvp>\n                <EditKvp label={'Ext Id'}><StringEditor className=\"bg-slate-100 rounded font-mono flex-1\" value={singleComp.extId ?? ''} update={handleExtIdUpdate} /></EditKvp>\n                <EditKvp label={'Pos'}>{`${singleComp.pos}`}</EditKvp>\n                <EditKvp label={'Size'}>{`${singleComp.size}`}</EditKvp>\n            </div>\n            <div className=\"m-2\">\n                <div className=\"mb-2\">Internal Schematic</div>\n                {!subSchematic && <button\n                    className=\"rounded border-gray-400 border border-solid py-1 px-2 hover:bg-slate-100\"\n                    onClick={handleInternalSchematicAddNew}>\n                    <FontAwesomeIcon icon={faPlus} className=\"mr-2\" />\n                    Add New\n                </button>}\n                {singleComp.subSchematicId && <EditKvp label={'Id'}><code>{singleComp.subSchematicId}</code></EditKvp>}\n                {subSchematic && <EditKvp label={'Name'}><code>{subSchematic?.name}</code></EditKvp>}\n            </div>\n        </div>}\n    </div>;\n};\n\nexport const EditKvp: React.FC<{\n    label: string;\n    children?: React.ReactNode;\n}> = ({ label, children }) => {\n    return <div className=\"flex flex-row items-center my-1\">\n        <div className=\"w-[5rem] mr-2\">{label}</div>\n        <div className=\"flex-1\">{children}</div>\n    </div>;\n};\n","'use client';\n\nimport React, { useCallback, useContext, useEffect, useLayoutEffect, useMemo, useReducer, useRef, useState } from \"react\";\nimport { useResizeChangeHandler } from \"../utils/layout\";\nimport { BoundingBox3d, Vec3 } from \"../utils/vector\";\nimport s from \"./CpuCanvas.module.scss\";\nimport { AffineMat2d } from \"../utils/AffineMat2d\";\nimport { IDragStart } from \"../utils/pointer\";\nimport { assignImm, getOrAddToMap, isNil, isNotNil } from \"../utils/data\";\nimport { EditorContext, IEditorContext, IViewLayoutContext, ViewLayoutContext } from \"./Editor\";\nimport { RefType, IComp, PortType, ICompPort, ICanvasState, IEditorState, IHitTest, IExeSystem, ICompRenderArgs, ISchematic, ToolbarTypes, IEditSnapshot } from \"./CpuModel\";\nimport { createExecutionModel, stepExecutionCombinatorial } from \"./CpuExecution\";\nimport { CompLibraryView } from \"./CompLibraryView\";\nimport { CompExampleView } from \"./CompExampleView\";\nimport { HoverDisplay } from \"./HoverDisplay\";\nimport { renderWire } from \"./WireRender\";\nimport { SchematicLibraryView } from \"./schematics/SchematicLibraryView\";\nimport { CanvasEventHandler } from \"./CanvasEventHandler\";\nimport { LibraryBrowser } from \"./library/LibraryBrowser\";\nimport { CompLayoutToolbar } from \"./CompLayoutEditor\";\nimport { palette } from \"./palette\";\nimport { drawGrid, makeCanvasFont } from \"./CanvasRenderHelpers\";\nimport { computeSubLayoutMatrix, getCompSubSchematic } from \"./SubSchematics\";\nimport { computeModelBoundingBox, computeZoomExtentMatrix, createCpuEditorState } from \"./ModelHelpers\";\nimport { MainToolbar } from \"./toolbars/CpuToolbars\";\nimport { SharedContextContext, createSharedContext } from \"./library/SharedContext\";\nimport { CompBoundingBox } from \"./CompBoundingBox\";\nimport { CompDetails } from \"./CompDetails\";\nimport { Resizer } from \"../utils/Resizer\";\n\ninterface ICanvasDragState {\n    mtx: AffineMat2d;\n    hovered: IHitTest | null;\n    modelPos: Vec3;\n}\n\n/**\n\nSo our sandbox needs a bit of work. To main goals:\n\n* be able to load a small inset schematic, as in the guides\n* show a rich editor for editing/browsing the schematics\n\n* So need a \"load this\" api\n\n*/\n\nexport const CpuCanvas: React.FC<{\n    embedded?: boolean;\n    readonly?: boolean;\n    schematicId?: string;\n    toolbars?: ToolbarTypes[],\n    children?: React.ReactNode;\n}> = ({ schematicId, readonly, embedded, toolbars, children }) => {\n    let [cvsState, setCvsState] = useState<ICanvasState | null>(null);\n    let sharedContext = useContext(SharedContextContext);\n    // let [lsState, setLsState] = useLocalStorageState(\"cpu-layout\", hydrateFromLS);\n    let [editorState, setEditorState] = useState<IEditorState>(() => createCpuEditorState(sharedContext));\n    let [, redraw] = useReducer((x) => x + 1, 0);\n\n    let [isClient, setIsClient] = useState(false);\n    useEffect(() => setIsClient(true), []);\n\n    // let initialLoad = useRef(true);\n    // useEffect(() => {\n    //     if (initialLoad.current) {\n    //         initialLoad.current = false;\n    //         setEditorState(a => assignImm(a, {\n    //             snapshot: wiresFromLsState(a.snapshot, lsState, a.compLibrary),\n    //             needsZoomExtent: true,\n    //         }));\n    //     }\n    // }, [lsState]);\n\n    useEffect(() => {\n        if (schematicId) {\n            setEditorState(a => assignImm(a, { desiredSchematicId: schematicId ?? null }));\n        }\n    }, [schematicId]);\n\n    useLayoutEffect(() => {\n        if (cvsState) {\n            let bcr = cvsState.canvas.getBoundingClientRect();\n            setEditorState(a => {\n                // goal: zoom-extent so the canvas fits the entire schematic\n                if (!a.needsZoomExtent) {\n                    return a;\n                }\n                let bb = computeModelBoundingBox(a.snapshot);\n\n                if (bb.empty) {\n                    bb = new BoundingBox3d(new Vec3(0, 0), new Vec3(20, 20));\n                }\n\n                let mtx = computeZoomExtentMatrix(bb, new BoundingBox3d(new Vec3(readonly ? 0 : 330, readonly ? 50 : 0), new Vec3(bcr.width, bcr.height)), 0.05);\n                return assignImm(a, { mtx, needsZoomExtent: false });\n            });\n        }\n    }, [cvsState, editorState.needsZoomExtent, readonly]);\n\n    useEffect(() => {\n        // setCtrlDown(false);\n        let ctx = sharedContext ?? createSharedContext();\n        setEditorState(a => {\n            return assignImm(a, {\n                sharedContext: ctx,\n                codeLibrary: ctx.codeLibrary,\n                schematicLibrary: ctx.schematicLibrary,\n                compLibrary: ctx.compLibrary,\n                snapshot: assignImm(a.snapshot, {\n                    mainSchematic: assignImm(a.snapshot.mainSchematic, {\n                        comps: ctx.compLibrary.updateAllCompsFromDefs(a.snapshot.mainSchematic.comps),\n                    }),\n                }),\n                needsZoomExtent: true,\n            });\n        });\n    }, [sharedContext]);\n\n    useEffect(() => {\n        if (editorState.activeSchematicId !== editorState.desiredSchematicId && editorState.desiredSchematicId && editorState.schematicLibrary.localStorageSchematicsLoaded) {\n            const schematic = editorState.schematicLibrary.getSchematic(editorState.desiredSchematicId);\n\n            if (schematic) {\n                setEditorState(a => assignImm(a, {\n                    activeSchematicId: schematic.id,\n                    snapshot: schematic.model,\n                    undoStack: schematic.undoStack ?? [],\n                    redoStack: schematic.redoStack ?? [],\n                    mtx: schematic.mtx ?? new AffineMat2d(),\n                    needsZoomExtent: true,\n                }));\n            } else {\n                setEditorState(a => assignImm(a, {\n                    desiredSchematicId: null,\n                }));\n            }\n        }\n\n    }, [editorState.desiredSchematicId, editorState.schematicLibrary, editorState.activeSchematicId, editorState.schematicLibrary.localStorageSchematicsLoaded]);\n\n    useResizeChangeHandler(cvsState?.canvas?.parentElement, redraw);\n\n    let prevExeModel = useRef<{ system: IExeSystem, id: string | null } | null>(null);\n\n    let exeModel = useMemo(() => {\n        let prev = prevExeModel.current;\n        let sameId = prev && prev.id === editorState.activeSchematicId;\n\n        let model = createExecutionModel(editorState.sharedContext, editorState.snapshot, prev && sameId ? prev.system : null);\n\n        if (isClient) {\n            stepExecutionCombinatorial(model);\n        }\n\n        return model;\n    }, [editorState.sharedContext, editorState.snapshot, editorState.activeSchematicId, isClient]);\n\n    prevExeModel.current = { system: exeModel, id: editorState.activeSchematicId };\n\n    let setCanvasEl = useCallback((el: HTMLCanvasElement | null) => {\n        setCvsState(el ? {\n            canvas: el,\n            ctx: el.getContext('2d')!,\n            size: new Vec3(1, 1),\n            scale: 1,\n            region: new BoundingBox3d(new Vec3(0, 0), new Vec3(1, 1)),\n            tileCanvases: new Map(),\n            mtx: AffineMat2d.identity(),\n        } : null);\n    }, []);\n\n    // useEffect(() => {\n    //     let newState = wiresToLsState(editorState.snapshot);\n    //     setLsState(a => assignImm(a, newState));\n    //     let strExport = exportData(editorState.snapshot);\n    //     localStorage.setItem(\"cpu-layout-str\", strExport);\n    //     // importData(strExport);\n    // }, [editorState.snapshot, setLsState]);\n\n    useLayoutEffect(() => {\n        if (!cvsState) {\n            return;\n        }\n\n        let { canvas, ctx } = cvsState;\n\n        let bcr = canvas.parentElement!.getBoundingClientRect();\n        let w = bcr.width;\n        let h = bcr.height;\n        canvas.width = Math.floor(w * window.devicePixelRatio);\n        canvas.height = Math.floor(h * window.devicePixelRatio);\n        canvas.style.width = `${w}px`;\n        canvas.style.height = `${h}px`;\n        cvsState.size.x = w;\n        cvsState.size.y = h;\n        cvsState.region = new BoundingBox3d(new Vec3(0, 0), new Vec3(w, h));\n        cvsState.scale = 1.0 / editorState.mtx.a;\n        cvsState.mtx = editorState.mtx;\n        let pr = window.devicePixelRatio;\n\n        ctx.save();\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.scale(pr, pr);\n\n        ctx.transform(...editorState.mtx.toTransformParams());\n        ctx.save();\n        renderCpu(cvsState, editorState, (editorState.snapshotTemp ?? editorState.snapshot).mainSchematic, exeModel);\n        // renderDragState(cvsState, editorState, dragStart, grabDirRef.current);\n        ctx.restore();\n\n        ctx.restore();\n    });\n\n\n    let ctx: IEditorContext = useMemo(() => {\n        return { editorState, setEditorState, cvsState, exeModel };\n    }, [editorState, setEditorState, cvsState, exeModel]);\n\n    let singleElRef = editorState.snapshot.selected.length === 1 ? editorState.snapshot.selected[0] : null;\n\n    function getCompDomElements(schematic: ISchematic, idPrefix: string) {\n        let comps = schematic.comps\n            .map(comp => {\n                let def = editorState.compLibrary.getCompDef(comp.defId)!;\n                return (def.renderDom || def.subLayout || comp.subSchematicId) && cvsState ? {\n                    comp,\n                    def,\n                    renderDom: def.renderDom,\n                } : null;\n            })\n            .filter(isNotNil)\n            .map(a => {\n                cvsState!.mtx = editorState.mtx;\n                let compFullId = idPrefix + a.comp.id;\n\n                let subLayoutDom = null;\n                let subSchematic = getCompSubSchematic(editorState, a.comp);\n                if (subSchematic) {\n                    let subMtx = computeSubLayoutMatrix(a.comp, subSchematic);\n\n                    subLayoutDom = <div\n                        className={\"absolute origin-top-left\"}\n                        style={{ transform: `matrix(${subMtx.toTransformParams().join(',')})` }}\n                    >\n                        {getCompDomElements(subSchematic, idPrefix + a.comp.id + '|')}\n                    </div>;\n                }\n\n                return <React.Fragment key={a.comp.id}>\n                    {a.renderDom?.({\n                        comp: a.comp,\n                        ctx: cvsState?.ctx!,\n                        cvs: cvsState!,\n                        editCtx: { idPrefix },\n                        exeComp: exeModel.comps[exeModel.lookup.compIdToIdx.get(compFullId) ?? -1],\n                        styles: null!,\n                        isActive: !!singleElRef && singleElRef.type === RefType.Comp && singleElRef.id === compFullId,\n                    }) ?? null}\n                    {subLayoutDom}\n                </React.Fragment>;\n\n        });\n\n        return <>\n            {comps}\n            <CompBoundingBox  />\n        </>;\n    }\n\n    let compDivs = getCompDomElements((editorState.snapshotTemp ?? editorState.snapshot).mainSchematic, '');\n\n    let viewLayout = useMemo<IViewLayoutContext>(() => {\n        return { el: cvsState?.canvas ?? null!, mtx: editorState.mtx };\n    }, [cvsState, editorState.mtx]);\n\n    return <EditorContext.Provider value={ctx}>\n        <ViewLayoutContext.Provider value={viewLayout}>\n            {!embedded && <MainToolbar readonly={readonly} toolbars={toolbars} />}\n            <Resizer className=\"flex-1 flex flex-row\" id={\"cpu-tools-right\"} defaultFraction={0.9}>\n                <div className=\"relative touch-none flex-1 overflow-hidden\">\n                    <canvas className=\"absolute touch-none w-full h-full\" ref={setCanvasEl} />\n                    {cvsState && <CanvasEventHandler cvsState={cvsState} embedded={embedded}>\n                        <div className={\"overflow-hidden absolute left-0 top-0 w-full h-full pointer-events-none\"}>\n                            <div\n                                className={\"absolute origin-top-left\"}\n                                style={{ transform: `matrix(${editorState.mtx.toTransformParams().join(',')})` }}>\n                                {compDivs}\n                            </div>\n                            {editorState.transparentComps && <div className=\"absolute w-full h-full pointer-events-auto top-0 left-0\" />}\n                        </div>\n                    </CanvasEventHandler>}\n                    <div className={s.toolsLeftTop}>\n                        {!embedded && <>\n                            <CompLibraryView />\n                            <CompExampleView />\n                            <SchematicLibraryView />\n                        </>}\n                        {!editorState.snapshotTemp && !editorState.maskHover && <HoverDisplay canvasEl={cvsState?.canvas ?? null} />}\n                    </div>\n                    {embedded && <div className=\"absolute left-2 top-2 pointer-events-auto\">\n                        <MainToolbar readonly={readonly} toolbars={toolbars} />\n                    </div>}\n                    <div className=\"cls_toolsTopRight absolute top-0 right-0\">\n                        {!readonly && <CompLayoutToolbar />}\n                    </div>\n                    {editorState.compLibraryVisible && <LibraryBrowser />}\n                    {children}\n                </div>\n                {!readonly && <div className=\"flex-1 flex flex-col\">\n                    <CompDetails />\n                </div>}\n            </Resizer>\n        </ViewLayoutContext.Provider>\n    </EditorContext.Provider>;\n};\n\nfunction renderAxes(cvs: ICanvasState, editorState: IEditorState) {\n    let ctx = cvs.ctx;\n    ctx.save();\n    ctx.lineWidth = 4 * cvs.scale;\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(4, 0);\n    ctx.strokeStyle = \"#f00\";\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(0, 4);\n    ctx.strokeStyle = \"#0f0\";\n    ctx.stroke();\n    ctx.restore();\n}\n\nfunction renderCpu(cvs: ICanvasState, editorState: IEditorState, layout: ISchematic, exeSystem: IExeSystem, idPrefix = '') {\n    let ctx = cvs.ctx;\n    let snapshot = editorState.snapshotTemp ?? editorState.snapshot;\n\n    drawGrid(editorState.mtx, ctx, cvs, '#aaa', !!idPrefix);\n\n    for (let wire of layout.wires) {\n        let exeNet = exeSystem.nets[exeSystem.lookup.wireIdToNetIdx.get(idPrefix + wire.id) ?? -1];\n        renderWire(cvs, editorState, wire, exeNet, exeSystem, idPrefix);\n    }\n\n    let compIdxToExeOrder = new Map<number, number[]>();\n    let idx = 0;\n    for (let step of exeSystem.executionSteps) {\n        getOrAddToMap(compIdxToExeOrder, step.compIdx, () => []).push(idx++);\n    }\n\n    let singleElRef = editorState.snapshot.selected.length === 1 ? editorState.snapshot.selected[0] : null;\n\n    ctx.save();\n    ctx.globalAlpha = editorState.transparentComps ? 0.5 : 1.0;\n    for (let comp of layout.comps) {\n        let compFullId = idPrefix + comp.id;\n        let exeCompIdx = exeSystem.lookup.compIdToIdx.get(compFullId) ?? -1;\n        let exeComp = exeSystem.comps[exeCompIdx];\n        let compDef = editorState.compLibrary.getCompDef(comp.defId);\n\n        let isHover = editorState.hovered?.ref.type === RefType.Comp && editorState.hovered.ref.id === compFullId;\n\n        let isValidExe = !!exeComp;\n        ctx.fillStyle = isValidExe ? palette.compBg : \"#aaa\";\n        ctx.strokeStyle = isHover ? \"#a00\" : \"#000\";\n        ctx.lineWidth = 1 * cvs.scale;\n\n        if (compDef?.renderAll !== true) {\n            ctx.beginPath();\n            ctx.rect(comp.pos.x, comp.pos.y, comp.size.x, comp.size.y);\n            ctx.fill();\n            ctx.stroke();\n        }\n\n        let compRenderArgs: ICompRenderArgs<any> = {\n            comp,\n            ctx,\n            cvs,\n            exeComp,\n            editCtx: { idPrefix },\n            styles: {\n                fontSize: 1.6,\n                lineHeight: 2.0,\n                fillColor: isValidExe ? \"#8a8\" : \"#aaa\",\n                strokeColor: isHover ? \"#a00\" : \"#000\",\n                lineWidth: 1 * cvs.scale,\n            },\n            isActive: !!singleElRef && singleElRef.type === RefType.Comp && singleElRef.id === compFullId,\n        };\n\n        if (compDef?.render) {\n            compDef.render(compRenderArgs);\n        } else if (compDef?.renderDom) {\n            // handled elsewhere\n        } else {\n            let text = comp.name;\n            let textHeight = 3;\n            ctx.font = makeCanvasFont(textHeight / 4);\n            ctx.textAlign = 'center';\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = \"#000\";\n            ctx.fillText(text, comp.pos.x + (comp.size.x) / 2, comp.pos.y + (comp.size.y) / 2);\n        }\n\n        for (let node of comp.ports) {\n            renderCompPort(cvs, editorState, comp, node);\n        }\n\n        let subSchematic = getCompSubSchematic(editorState, comp);\n        if (compDef && subSchematic) {\n            // nested rendering!!!!\n            ctx.save();\n\n            let subMtx = computeSubLayoutMatrix(comp, subSchematic);\n\n            ctx.transform(...subMtx.toTransformParams());\n\n            let innerMtx = cvs.mtx.mul(subMtx.inv());\n\n            let subCvs: ICanvasState = {\n                ...cvs,\n                mtx: cvs.mtx.mul(subMtx),\n                scale: cvs.scale / subMtx.a,\n                region: innerMtx.mulBb(new BoundingBox3d(comp.pos, comp.pos.add(comp.size))),\n            };\n\n            renderCpu(subCvs, editorState, subSchematic, exeSystem, idPrefix + comp.id + '|');\n\n            ctx.restore();\n        }\n\n        if (editorState.showExeOrder) {\n            let orders = compIdxToExeOrder.get(exeCompIdx) ?? [];\n            let text = orders.join(', ');\n            ctx.save();\n            ctx.fillStyle = \"#a3a\";\n            ctx.strokeStyle = \"#000\";\n            ctx.lineWidth = 3 * cvs.scale;\n            ctx.font = makeCanvasFont(30 * cvs.scale);\n            ctx.textAlign = 'center';\n            ctx.textBaseline = \"middle\";\n            let px = comp.pos.x + (comp.size.x) / 2;\n            let py = comp.pos.y + (comp.size.y) / 2;\n            // ctx.filter = \"blur(1px)\";\n            ctx.strokeText(text, px, py);\n            // ctx.filter = \"none\";\n            ctx.fillText(text, px, py);\n            ctx.restore();\n        }\n    }\n    ctx.restore();\n\n    ctx.save();\n    ctx.beginPath();\n    let selectedCompSet = new Set(editorState.snapshot.selected.filter(a => a.type === RefType.Comp).map(a => a.id));\n    for (let comp of layout.comps.filter(c => selectedCompSet.has(idPrefix + c.id))) {\n        ctx.rect(comp.pos.x, comp.pos.y, comp.size.x, comp.size.y);\n    }\n    ctx.strokeStyle = \"#77f\";\n    ctx.lineWidth = 2 * cvs.scale;\n    ctx.filter = \"blur(1px)\";\n    ctx.stroke();\n    ctx.restore();\n\n    renderSelectRegion(cvs, editorState, idPrefix);\n\n    renderComponentBoundingBox(cvs, editorState, snapshot, idPrefix);\n\n    // renderAxes(cvs, editorState);\n}\n\n\nfunction renderSelectRegion(cvs: ICanvasState, editorState: IEditorState, idPrefix: string) {\n\n    if (!editorState.selectRegion || editorState.selectRegion.idPrefix !== idPrefix) {\n        return;\n    }\n\n    let region = editorState.selectRegion;\n    let ctx = cvs.ctx;\n    let p0 = region.bbox.min; // editorState.mtx.mulVec3Inv(region.min);\n    let p1 = region.bbox.max; // editorState.mtx.mulVec3Inv(region.max);\n\n    ctx.save();\n    ctx.strokeStyle = \"#000\";\n    ctx.lineWidth = 1 * cvs.scale;\n    ctx.beginPath();\n    ctx.rect(p0.x, p0.y, p1.x - p0.x, p1.y - p0.y);\n    ctx.stroke();\n    ctx.restore();\n}\n\n/*\nfunction renderDragState(cvs: ICanvasState, editorState: IEditorState, dragStart: IDragStart<ICanvasDragState> | null, dragDir: Vec3 | null) {\n    let ctx = cvs.ctx;\n    if (!dragStart || !dragStart.data.hovered) {\n        return;\n    }\n\n    let hover = dragStart.data.hovered;\n\n    if (hover.ref.type === RefType.WireSeg && !isNil(hover.ref.wireNode0Id) && isNil(hover.ref.wireNode1Id)) {\n        let wireNodeId = hover.ref.wireNode0Id;\n        let node = editorState.snapshot.wires.find(w => w.id === hover.ref.id)?.nodes[wireNodeId!];\n\n        if (node) {\n            // draw a light grey circle here\n            let x = node.pos.x;\n            let y = node.pos.y;\n            let r = 20 * cvs.scale;\n            // ctx.beginPath();\n            // ctx.arc(x, y, r, 0, 2 * Math.PI);\n            // ctx.lineWidth = 1 * cvs.scale;\n            // ctx.strokeStyle = \"#aaa\";\n            // ctx.stroke();\n\n            // draw a cross in the circle (lines at 45deg)\n            let r2 = r * Math.SQRT1_2;\n\n            ctx.beginPath();\n            ctx.moveTo(x - r2, y - r2);\n            ctx.lineTo(x + r2, y + r2);\n            ctx.moveTo(x - r2, y + r2);\n            ctx.lineTo(x + r2, y - r2);\n            ctx.strokeStyle = \"#aaa\";\n            ctx.lineWidth = 1 * cvs.scale;\n            ctx.stroke();\n\n            // draw an arc according to the drag direction\n            if (dragDir) {\n                let arcStart = Math.atan2(dragDir.y, dragDir.x) - Math.PI / 4;\n                let arcEnd = arcStart + Math.PI / 2;\n                ctx.beginPath();\n                ctx.arc(x, y, r, arcStart, arcEnd);\n                ctx.strokeStyle = \"#aaa\";\n                ctx.lineWidth = 3 * cvs.scale;\n                ctx.stroke();\n\n            }\n\n        }\n    }\n\n}\n*/\n\nfunction renderCompPort(cvs: ICanvasState, editorState: IEditorState, comp: IComp, node: ICompPort) {\n    let hoverRef = editorState.hovered?.ref;\n    let isHover = hoverRef?.type === RefType.CompNode && hoverRef.id === comp.id && hoverRef.compNodeId === node.id;\n    let type = node.type ?? 0;\n    let isInput = (type & PortType.In) !== 0;\n    let isTristate = (type & PortType.Tristate) !== 0;\n    let ctx = cvs.ctx;\n    let x = comp.pos.x + node.pos.x;\n    let y = comp.pos.y + node.pos.y;\n\n    let scale = Math.min(cvs.scale, 1 / 15);\n\n    let r = 3 * scale;\n    ctx.beginPath();\n    ctx.arc(x, y, r, 0, 2 * Math.PI);\n    ctx.strokeStyle = isHover ? \"#f00\" : \"#000\";\n    ctx.fillStyle = isInput ? \"#fff\" : isTristate ? \"#a3f\" : \"#00fa\";\n    ctx.fill();\n    ctx.stroke();\n\n    if (node.name) {\n        let isTop = node.pos.y === 0;\n        let isBot = node.pos.y === comp.size.y;\n        let isLeft = node.pos.x === 0;\n        let isRight = node.pos.x === comp.size.x;\n\n        let text = node.name;\n        let textHeight = 12 * scale;\n        ctx.font = makeCanvasFont(textHeight);\n        ctx.textAlign = (isTop || isBot) ? 'center' : isLeft ? 'start' : 'end';\n        ctx.textBaseline = (isLeft || isRight) ? \"middle\" : isTop ? 'top' : 'bottom';\n        ctx.fillStyle = \"#000\";\n        let deltaAmt = 8 * scale;\n        let deltaX = isLeft ? deltaAmt : isRight ? -deltaAmt : 0;\n        let deltaY = isTop ? deltaAmt : isBot ? -deltaAmt : 0;\n        ctx.fillText(text, x + deltaX, y + deltaY);\n    }\n}\n\nfunction renderComponentBoundingBox(cvs: ICanvasState, editorState: IEditorState, layout: IEditSnapshot, idPrefix: string) {\n    let ctx = cvs.ctx;\n    ctx.save();\n\n    let bb = layout.mainSchematic.compBbox;\n    let size = bb.size();\n    ctx.beginPath();\n    ctx.rect(bb.min.x, bb.min.y, size.x, size.y);\n\n    ctx.lineWidth = 1 * cvs.scale;\n    ctx.strokeStyle = \"#000\";\n    ctx.stroke();\n\n    ctx.restore();\n}\n","import { AffineMat2d } from \"../utils/AffineMat2d\";\nimport { BoundingBox3d, Vec3 } from \"../utils/vector\";\nimport { CompLibrary, ICompDef } from \"./comps/CompBuilder\";\nimport { CodeSuiteManager } from \"./library/CodeSuiteManager\";\nimport { ISharedContext } from \"./library/SharedContext\";\nimport { SchematicLibrary } from \"./schematics/SchematicLibrary\";\n\n/* All components & schematics and each version of them is represented by a separate ILibraryItem.\n\nSchematics are usually the top-level entities that users build with, with a set of wires & components.\nSchematics can also be used within other schematics by also having an associated component (in the same\nILibraryItem). In that case, there are components within the schematic which map onto the ports of the\ncomponent. That way, schematics can be nested arbitrarily.\n\nComponents within a given schematic reference library-items from our library via a string id. There is\na global namespace of ids, where each maps to our ILibraryItem. In some cases, to allow for id-renaming,\nan ILibraryItem can have multiple ids. On write, all schematics are updated to use the primary id.\n*/\n\nexport interface ILibraryItem {\n    id: string;\n    altIds?: string[];\n\n    name: string;\n    notes?: string;\n    compDef?: ICompDef<any>;\n    schematic?: ISchematic;\n}\n\nexport interface IExeRunArgs {\n    halt: boolean;\n}\n\nexport interface IExeSystem {\n    comps: IExeComp[];\n    nets: IExeNet[];\n    executionSteps: IExeStep[];\n    latchSteps: IExeStep[]; // latches are done just prior to the next round of execution steps (it's useful to pause prior to latching)\n    lookup: IExeSystemLookup;\n    runArgs: IExeRunArgs;\n    compLibrary: CompLibrary;\n}\n\nexport interface IExeSystemLookup {\n    compIdToIdx: Map<string, number>;\n    wireIdToNetIdx: Map<string, number>;\n}\n\nexport interface IExeStep {\n    compIdx: number; // -1 for nets\n    phaseIdx: number; // -1 for nets\n\n    netIdx: number; // -1 for comps\n}\n\nexport interface IExeComp<T = any> {\n    idx: number;\n    comp: IComp; // a (maybe) rendered component\n    ports: IExePort[];\n    data: T;\n    phases: IExePhase<T>[];\n    subSystem?: IExeSystem;\n    compFullId: string;\n}\n\nexport interface IExePhase<T = any> {\n    readPortIdxs: number[];\n    writePortIdxs: number[];\n    func: (comp: IExeComp<T>, args: IExeRunArgs) => void;\n    isLatch: boolean;\n}\n\nexport interface IExePort {\n    portIdx: number; // into IComp.ports[i]\n    netIdx: number;\n    width: number;\n    type: PortType;\n    ioEnabled: boolean; // for tristate (true otherwise). For inputs, false means the input is ignored (e.g. an inactive mux input). The latter is useful for rendering\n    ioDir: IoDir; // for rendering. Only needed to be set when is a bidirectional port\n    dataUsed: boolean; // for rendering, and involves back-propagation (but typically follows ioEnabled)\n    value: number;\n}\n\nexport enum IoDir {\n    None, // check flag in PortDir\n    In,\n    Out,\n}\n\nexport interface IExeNet {\n    idx: number;\n    wire: IWireGraph; // a (maybe) rendered wire\n    wireFullId: string;\n    inputs: IExePortRef[]; // will have multiple inputs for buses (inputs with tristate)\n    outputs: IExePortRef[];\n    tristate: boolean;\n    width: number;\n    type: PortType;\n    value: number;\n    enabledCount: number;\n}\n\n// in our execution data model, we use indexes rather than ids for perf\nexport interface IExePortRef {\n    comp: IComp;\n    portIdx: number;\n    exeComp: IExeComp\n    exePort: IExePort;\n    valid: boolean;\n}\n\n// We're adding a new level of state, which tracks all editors (tabs), and they each have their own state (mostly).\n// Keep some global state like the comp library here.\nexport interface IProgramState {\n    compLibrary: CompLibrary;\n    schematicLibrary: SchematicLibrary;\n\n    activeEditorIdx: number;\n    editors: IEditorState[];\n}\n\nexport interface IEditorState {\n    mtx: AffineMat2d;\n\n    snapshot: IEditSnapshot;\n    snapshotTemp: IEditSnapshot | null;\n\n    undoStack: IEditSnapshot[];\n    redoStack: IEditSnapshot[];\n\n    desiredSchematicId: string | null;\n    activeSchematicId: string | null;\n\n    // time to combine these!! Actually, let's use CompLibrary, since it's used in more places, & rename it\n    sharedContext: ISharedContext;\n    compLibrary: CompLibrary;\n    schematicLibrary: SchematicLibrary;\n    codeLibrary: CodeSuiteManager;\n\n    selectRegion: ISelectRegion | null;\n    hovered: IHitTest | null;\n    maskHover: string | null;\n    addLine: boolean\n    showExeOrder: boolean;\n    transparentComps: boolean;\n    compLibraryVisible: boolean;\n    needsZoomExtent: boolean;\n\n    dragCreateComp?: IDragCreateComp;\n\n    stepSpeed?: number;\n}\n\nexport interface ISelectRegion {\n    idPrefix: string;\n    bbox: BoundingBox3d;\n}\n\nexport interface IDragCreateComp {\n    compOrig: IComp;\n    applyFunc?: (a : IEditSnapshot) => IEditSnapshot;\n}\n\nexport interface IHitTest {\n    ref: IElRef;\n    distPx: number;\n    modelPt: Vec3;\n}\n\nexport interface ICanvasState {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    region: BoundingBox3d;\n    size: Vec3; // derived\n    scale: number; // derived\n    mtx: AffineMat2d; // derived\n    tileCanvases: Map<string, HTMLCanvasElement>;\n}\n\nexport enum ToolbarTypes {\n    PlayPause = \"PlayPause\",\n    Viewport = \"Viewport\",\n}\n\nexport interface IElRef {\n    type: RefType;\n    id: string;\n    compNodeId?: string;\n    wireNode0Id?: number;\n    wireNode1Id?: number;\n}\n\nexport enum RefType {\n    Comp,\n    WireSeg,\n    WireNode,\n    CompNode,\n}\n\nexport type IElement = IComp | ICompPort;\n\nexport interface IWire {\n    id: string;\n    segments: ISegment[];\n}\n\nexport interface IWireGraph {\n    id: string;\n    nodes: IWireGraphNode[];\n}\n\nexport interface IWireGraphNode {\n    id: number;\n    pos: Vec3;\n    edges: number[]; // index into IWireGraph.nodes; bi-directional edges\n    ref?: IElRef;\n}\n\nexport interface ISegment {\n    p0: Vec3;\n    p1: Vec3;\n    comp0Ref?: IElRef;\n    comp1Ref?: IElRef;\n}\n\nexport interface ICompRenderArgs<T, A = any> {\n    cvs: ICanvasState;\n    ctx: CanvasRenderingContext2D;\n    editCtx: IEditContext;\n    comp: IComp<A>;\n    exeComp: IExeComp<T>;\n    styles: IRenderStyles;\n    isActive: boolean;\n}\n\nexport interface IEditContext {\n    idPrefix: string;\n}\n\nexport interface IRenderStyles {\n    lineHeight: number;\n    fontSize: number;\n    lineWidth: number;\n    strokeColor: string;\n    fillColor: string;\n}\n\nexport interface IComp<A = any> {\n    id: string;\n    defId: string;\n    name: string;\n    extId?: string; // an id that can be referenced \"externally\"\n    subSchematicId?: string;\n    pos: Vec3;\n    size: Vec3;\n    ports: ICompPort[];\n    args: A;\n    resolved: boolean;\n    hasSubSchematic: boolean;\n}\n\nexport interface ICompPort {\n    id: string;\n    pos: Vec3; // relative to comp\n    name: string;\n    type: PortType;\n    width?: number;\n}\n\n\nexport enum PortType {\n    None = 0,\n    In = 1 << 0,\n    Out = 1 << 1,\n    Tristate = 1 << 2,\n\n    // these ones propagate onto the wire/net for display\n    Data = 1 << 3,\n    Addr = 1 << 4,\n    Ctrl = 1 << 5,\n\n    OutTri = Out | Tristate,\n    InOutTri = In | Out | Tristate,\n}\n\nexport interface ISchematic {\n    comps: IComp[];\n    wires: IWireGraph[];\n    compBbox: BoundingBox3d;\n    parentCompDefId?: string;\n}\n\nexport interface IEditSnapshot {\n    focusedIdPrefix: string | null; // where pastes will go, etc, and should point to a subSchematic. null means the top-level, mainSchematic\n    selected: IElRef[];\n    mainSchematic: IEditSchematic;\n    subSchematics: Record<string, IEditSchematic>;\n}\n\n/**\n * OK, how do we manage our components that are builtin, but we want to add schematics for?\n * We want the multiple schematics to map to a builtin comp, and select the given schematic\n * for a given comp. Mostly we want to edit the schematic from within a parent schematic, and then\n * save it, ideally to that parent schematic (unless we want it to live on its own).\n *\n * Probably start with it living on its own. (since we can't save to the parent schematic yet)\n * We'll have a field on the realized comp which says which schematic we're using underneath.\n *\n * So we click on a comp, and UI shows up to a) select from some pre-existing schematics, or b) create a new one.\n * This will be on the RHS, and also have things like the extId of the component & other details.\n *\n * The schematic is tied to a particular comp, but sort of weakly, and it's clear that the comp ports\n * are the source-of-truth. Probably have ability to disable/hide/ignore not-connected ports, which is defined by the\n * presence of the port in the schematic.\n*/\n\nexport interface IEditSchematic {\n    id: string;\n    name: string;\n    comps: IComp[];\n    wires: IWireGraph[];\n    compBbox: BoundingBox3d;\n\n    nextCompId: number;\n    nextWireId: number;\n\n    // this schematic uses a component from the compLibrary as its parent component\n    parentCompDefId?: string;\n\n    // -- or --\n\n    // this schematic has component definitions supplied explicitly\n    compSize: Vec3;\n    compPorts: ICompPort[];\n}\n\nexport interface IMemoryMap {\n    romOffset: number;\n    ramOffset: number;\n    ioOffset: number;\n    ioSize: number;\n\n    rom: Uint8Array;\n    ram: Uint8Array;\n}\n","import { createContext, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { assignImm, isNotNil, StateSetter } from '../utils/data';\nimport { IComp, IEditContext, IEditSchematic, IEditSnapshot, IEditorState, IExeSystem, ISchematic } from './CpuModel';\nimport { updateWiresForComp } from './Wire';\nimport { AffineMat2d } from '../utils/AffineMat2d';\nimport { Subscriptions } from '../utils/hooks';\nimport { getCompSubSchematicForPrefix } from './SubSchematics';\n\nexport enum PortHandling {\n    Detach, // e.g. for rotating a component, the wire will need to be manually re-attached\n    Move, // e.g. resizing a component, the wire will move with the port\n}\n\nexport interface ICompEditArgs {\n    portHandling?: PortHandling;\n}\n\n\nexport function editCompConfig<A>(editCtx: IEditContext, end: boolean, comp: IComp<A>, updateConfig: (config: A) => A, compEditArgs?: ICompEditArgs) {\n    return editComp(editCtx, end, comp, a => assignImm(a, { args: updateConfig(a.args) }), compEditArgs);\n}\n\n/*\n\n## Editing Sub-Schematics ##\n\n* We have a good system of refs, where we refer to a comp by its id and its parent comp ids\n* But then we need to edit those refs\n* We can find the comp, as well as extract the idPrefix\n* This runs into trouble when we're operating on a selection that is cross-schematic\n* Probably want some way to figure out the primary schematic, or disallow cross-schematic selections\n\n*/\n\nexport function editComp<A>(editCtx: IEditContext, end: boolean, comp: IComp<A>, updateComp: (comp: IComp<A>) => IComp<A>, compEditArgs?: ICompEditArgs) {\n    return editSubSchematic(editCtx, end, (schematic, state) => {\n\n        let comp2 = schematic.comps.find(a => a.id === comp.id) as IComp<A> | null;\n        if (!comp2) {\n            console.log('unable to edit comp!!');\n            return schematic;\n        }\n\n        let comp3 = updateComp(comp2);\n        if (comp3 === comp2) {\n            return schematic;\n        }\n\n        schematic = assignImm(schematic, { comps: schematic.comps.map(a => a.id === comp.id ? comp3! : a) });\n        state.compLibrary.updateCompFromDef(comp3);\n\n        schematic = updateWiresForComp(schematic, comp3, compEditArgs?.portHandling ?? PortHandling.Move);\n\n        return schematic;\n    });\n}\n\nexport function editSubSchematic(editCtx: IEditContext, end: boolean, updateEditSchematic: (schematic: IEditSchematic, state: IEditorState, snapshot: IEditSnapshot) => IEditSchematic) {\n    return (state: IEditorState) => {\n\n        let newSnapshot = updateSubSchematic(state, editCtx, state.snapshot, (schematic) => updateEditSchematic(schematic, state, state.snapshot));\n\n        if (end) {\n            if (newSnapshot === state.snapshot) {\n                return assignImm(state, { snapshotTemp: null });\n            }\n\n            state = assignImm(state, {\n                snapshot: newSnapshot,\n                snapshotTemp: null,\n                undoStack: [...state.undoStack, state.snapshot],\n                redoStack: [],\n            });\n        } else {\n            state = assignImm(state, { snapshotTemp: newSnapshot });\n        }\n\n        return state;\n    };\n}\n\nexport function updateSubSchematic(editorState: IEditorState, editCtx: IEditContext, snapshot: IEditSnapshot, updateEditSchematic: (schematic: IEditSchematic) => IEditSchematic): IEditSnapshot {\n    if (editCtx.idPrefix) {\n        let subSchematic = getCompSubSchematicForPrefix(editorState.sharedContext, snapshot, editCtx.idPrefix);\n        if (subSchematic) {\n            return assignImm(snapshot, {\n                subSchematics: assignImm(snapshot.subSchematics, {\n                    [subSchematic.id]: updateEditSchematic(subSchematic),\n                }),\n            });\n        }\n    } else {\n        return assignImm(snapshot, {\n            mainSchematic: updateEditSchematic(snapshot.mainSchematic),\n        });\n    }\n\n    return snapshot;\n}\n\nexport function editMainSchematic(end: boolean, updateEditSchematic: (schematic: IEditSchematic, state: IEditorState, snapshot: IEditSnapshot) => IEditSchematic) {\n    return editSubSchematic({ idPrefix: '' }, end, updateEditSchematic);\n}\n\nexport function editSnapshot(end: boolean, updateSnapshot: (element: IEditSnapshot, state: IEditorState) => IEditSnapshot) {\n    return (state: IEditorState) => {\n        let newSnapshot = updateSnapshot(state.snapshot, state);\n\n        if (end) {\n            if (newSnapshot === state.snapshot) {\n                return assignImm(state, { snapshotTemp: null });\n            }\n\n            state = assignImm(state, {\n                snapshot: newSnapshot,\n                snapshotTemp: null,\n                undoStack: [...state.undoStack, state.snapshot],\n                redoStack: [],\n            });\n        } else {\n            state = assignImm(state, { snapshotTemp: newSnapshot });\n        }\n\n        return state;\n    };\n}\n\nexport function editSnapshotDirect(updateSnapshot: (element: IEditSnapshot, state: IEditorState) => IEditSnapshot) {\n    return (state: IEditorState) => {\n        let changed = updateSnapshot(state.snapshot, state);\n        return assignImm(state, { snapshot: changed, snapshotTemp: null });\n    };\n}\n\nexport function ensureEditSchematic(schematic: ISchematic | IEditSchematic): IEditSchematic {\n    if (isEditSchematic(schematic)) {\n        return schematic;\n    }\n    return assignImm(schematic as IEditSchematic, {\n        nextCompId: schematic.comps.reduce((max, c) => Math.max(max, parseInt(c.id)), 0) + 1,\n        nextWireId: schematic.wires.reduce((max, c) => Math.max(max, parseInt(c.id)), 0) + 1,\n    });\n}\n\nexport function isEditSchematic(schematic: ISchematic | IEditSchematic): schematic is IEditSchematic {\n    return isNotNil((schematic as IEditSchematic).nextCompId);\n}\n\n\nexport function undoAction(state: IEditorState) {\n    if (state.undoStack.length === 0) {\n        return state;\n    }\n\n    return assignImm(state, {\n        snapshot: state.undoStack[state.undoStack.length - 1],\n        undoStack: state.undoStack.slice(0, state.undoStack.length - 1),\n        redoStack: [...state.redoStack, state.snapshot],\n    });\n}\n\nexport function redoAction(state: IEditorState) {\n    if (state.redoStack.length === 0) {\n        return state;\n    }\n\n    return assignImm(state, {\n        snapshot: state.redoStack[state.redoStack.length - 1],\n        undoStack: [...state.undoStack, state.snapshot],\n        redoStack: state.redoStack.slice(0, state.redoStack.length - 1),\n    });\n}\n\nexport const EditorContext = createContext<IEditorContext | null>(null);\n\nexport interface IEditorContext {\n    editorState: IEditorState;\n    exeModel: IExeSystem;\n    setEditorState: StateSetter<IEditorState>;\n}\n\nexport function useEditorContext() {\n    const ctx = useContext(EditorContext);\n    if (!ctx) {\n        throw new Error('EditorContext not found');\n    }\n    return ctx;\n}\n\nexport interface IViewLayoutContext {\n    el: HTMLElement;\n    mtx: AffineMat2d;\n}\n\nexport const ViewLayoutContext = createContext<IViewLayoutContext>(null!);\n\nexport function useViewLayout() {\n    return useContext(ViewLayoutContext);\n}\n\nexport class MyStore<T> {\n    subs: Subscriptions = new Subscriptions();\n    constructor(public value: T) {\n    }\n    setValue(value: T) {\n        this.value = value;\n        this.subs.notify();\n    }\n}\n\nexport const MyStoreContext = createContext<MyStore<IEditorState>>(new MyStore<IEditorState>(null!));\n\ntype ObjPartial<T> = {\n    [P in keyof T]?: T[P] | ObjPartial<T[P]>;\n};\n\ntype ObjSubSplit<T> = {\n    [P in keyof T]?: ObjPartial<T[P]> | true;\n};\n\nfunction makeProxyObject<T extends Record<string, any>>(val: T, usages: ObjPartial<T>, subSplits: ObjSubSplit<T> | true): T {\n    let proxy = new Proxy(val, {\n        get: (target, prop: string) => {\n            let key = prop as keyof T;\n\n            if (subSplits !== true) {\n                let subSplit = subSplits[key];\n                if (subSplit) {\n\n                    let subUsage = usages[key];\n                    if (!subUsage) {\n                        subUsage = usages[key] = {};\n                    }\n\n                    return makeProxyObject(target[key], subSplit, subUsage as ObjPartial<any>);\n                }\n            }\n\n            let value = Reflect.get(target, key);\n            usages[key] = value;\n\n            return value;\n        }\n    });\n\n    return proxy;\n}\n\nfunction areEqual<T extends Record<string, any>>(obj: T, usages: ObjPartial<T>, subSplits: ObjSubSplit<T> | true): boolean {\n    if (subSplits !== true) {\n        for (let prop of Object.keys(usages)) {\n            let key = prop as keyof T;\n            let subSplit = subSplits[key];\n\n            if (subSplit) {\n                if (!areEqual(obj[key], usages[key]!, subSplit)) {\n                    return false;\n                }\n            } else if (obj[key] !== usages[key]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nexport function useHighPerfEditorContext() {\n    let storeCtx = useContext(MyStoreContext);\n    let visitedItemsRef = useRef<ObjPartial<IEditorState>>({});\n    let [srcValue, setSrcValue] = useState(storeCtx.value);\n\n    let subSplits = useMemo<ObjSubSplit<IEditorState>>(() => ({ }), []);\n\n    useEffect(() => {\n        function updateFn() {\n            if (!areEqual(storeCtx.value, visitedItemsRef.current, subSplits)) {\n                setSrcValue(storeCtx.value);\n            }\n        }\n        return storeCtx.subs.subscribe(updateFn);\n    }, [storeCtx, subSplits]);\n\n    visitedItemsRef.current = {};\n    return makeProxyObject(srcValue, visitedItemsRef.current, subSplits);\n}\n","import { IMemoryMap } from \"./CpuModel\";\n\nexport interface IElfHeader {\n    magic: Uint8Array;\n    class: number;\n    endian: number;\n    version: number;\n    osAbi: number;\n    abiVersion: number;\n    type: number;\n    machine: number;\n    version2: number;\n    entryPoint: number;\n    phOff: number;\n    shOff: number;\n    flags: number;\n    ehSize: number;\n    phEntSize: number;\n    phNum: number;\n    shEntSize: number;\n    shNum: number;\n    shStrNdx: number;\n}\n\nexport function readElfHeader(elfFile: Uint8Array): IElfHeader | null {\n    let magic = elfFile.subarray(0, 0x4);\n    if (magic[0] !== 0x7F || magic[1] !== 0x45 || magic[2] !== 0x4C || magic[3] !== 0x46) {\n        throw new Error(`Invalid ELF file (magic was ${magic}, but should be 0x7F 'E' 'L' 'F')`);\n    }\n\n    let class_ = elfFile[0x4];\n    let endian = elfFile[0x5];\n    let version = elfFile[0x6];\n    let osAbi = elfFile[0x7];\n    let abiVersion = elfFile[0x8];\n\n    if (class_ !== 1 || endian !== 1 || version !== 1) {\n        throw new Error(`Invalid ELF file: (class, endian, version) was (${class_}, ${endian}, ${version}), but should be (1 [32bit], 1 [little endian], 1)`);\n    }\n\n    // let osAbi = elfFile[0x7];\n    // let abiVersion = elfFile[0x8];\n\n    let type = elfFile[0x10];\n    let machine = elfFile[0x12];\n    let version2 = read32UintLe(elfFile, 0x14);\n\n    if ((type !== 2 && type !== 1) || machine !== 0xF3) {\n        throw new Error(`Invalid ELF file: (type, machine) was (${type}, 0x${machine.toString(16)}), but should be (1 [relocatable] or 2 [exe], 0xf3 [RISC-V])`);\n    }\n\n    // console.log(`ELF type: 0x${type.toString(16)} (exe), machine: 0x${machine.toString(16)} (RISC-V), entry: 0x${entryPoint.toString(16)}`);\n\n    return {\n        magic,\n        class: class_,\n        endian,\n        version,\n        osAbi,\n        abiVersion,\n        type,\n        machine,\n        version2,\n        entryPoint: read32UintLe(elfFile, 0x18),\n        phOff: read32UintLe(elfFile, 0x1C),\n        shOff: read32UintLe(elfFile, 0x20),\n        flags: read32UintLe(elfFile, 0x24),\n        ehSize: read16UintLe(elfFile, 0x28),\n        phEntSize: read16UintLe(elfFile, 0x2A),\n        phNum: read16UintLe(elfFile, 0x2C),\n        shEntSize: read16UintLe(elfFile, 0x2E),\n        shNum: read16UintLe(elfFile, 0x30),\n        shStrNdx: read16UintLe(elfFile, 0x32),\n    };\n}\n\nexport interface IElfTextSection {\n    name: string;\n    offset: number;\n    size: number;\n    arr: Uint8Array;\n}\n\nexport function listElfTextSections(elfFile: Uint8Array, header: IElfHeader): IElfTextSection[] {\n    let sections: IElfTextSection[] = [];\n\n    let shOff = header.shOff;\n    let shEntSize = header.shEntSize;\n    let shNum = header.shNum;\n\n    let shStrTabOffset = read32UintLe(elfFile, header.shOff + header.shStrNdx * header.shEntSize + 0x10);\n\n    for (let i = 0; i < shNum; i++) {\n        let base = shOff + i * shEntSize;\n        let shName = read32UintLe(elfFile, base + 0x0);\n        let shType = read32UintLe(elfFile, base + 0x4);\n        let shFlags = read32UintLe(elfFile, base + 0x8);\n        let shOffset = read32UintLe(elfFile, base + 0x10);\n        let shSize = read32UintLe(elfFile, base + 0x14);\n\n        if (shType === 1 && shFlags === 6 && shSize > 0) { // SHT_PROGBITS && SHF_ALLOC\n            let name = readString(elfFile, shStrTabOffset + shName);\n            sections.push({\n                name,\n                offset: shOffset,\n                size: shSize,\n                arr: elfFile.subarray(shOffset, shOffset + shSize),\n            });\n        }\n    }\n    return sections;\n}\n\nfunction readString(elfFile: Uint8Array, offset: number): string {\n    let str = '';\n    for (let i = offset; i < elfFile.length; i++) {\n        if (elfFile[i] === 0) {\n            break;\n        }\n        str += String.fromCharCode(elfFile[i]);\n    }\n    return str;\n}\n\n\nexport function readElfFileIntoMemory(elfFile: Uint8Array, memory: IMemoryMap) {\n\n    let magic = elfFile.subarray(0, 0x4);\n    if (magic[0] !== 0x7F || magic[1] !== 0x45 || magic[2] !== 0x4C || magic[3] !== 0x46) {\n        throw new Error(`Invalid ELF file (magic was ${magic}, but should be 0x7F 'E' 'L' 'F')`);\n    }\n\n    let class_ = elfFile[0x4];\n    let endian = elfFile[0x5];\n    let version = elfFile[0x6];\n\n    if (class_ !== 1 || endian !== 1 || version !== 1) {\n        throw new Error(`Invalid ELF file: (class, endian, version) was (${class_}, ${endian}, ${version}), but should be (1 [32bit], 1 [little endian], 1)`);\n    }\n\n    // let osAbi = elfFile[0x7];\n    // let abiVersion = elfFile[0x8];\n\n    let type = elfFile[0x10];\n    let machine = elfFile[0x12];\n\n    if (type !== 2 || machine !== 0xF3) {\n        throw new Error(`Invalid ELF file: (type, machine) was (${type}, ${machine}), but should be (2 [exe], 0xF3 [RISC-V])`);\n    }\n\n    let entryPoint = read32UintLe(elfFile, 0x18);\n\n    // console.log(`ELF type: 0x${type.toString(16)} (exe), machine: 0x${machine.toString(16)} (RISC-V), entry: 0x${entryPoint.toString(16)}`);\n\n    if (entryPoint !== 0x8000_0000) {\n        throw new Error(`Invalid ELF file: entry point was 0x${entryPoint.toString(16)}, but should be 0x8000_0000`);\n    }\n\n    let phOff = read32UintLe(elfFile, 0x1C);\n    let phEntSize = read16UintLe(elfFile, 0x2A);\n    let phNum = read16UintLe(elfFile, 0x2C);\n\n    let hasStartSegment = false;\n\n    for (let i = 0; i < Math.min(phNum, 10); i++) {\n        let base = phOff + i * phEntSize;\n        let pType = read32UintLe(elfFile, base + 0x0);\n        let pOffset = read32UintLe(elfFile, base + 0x4);\n        let pVaddr = read32UintLe(elfFile, base + 0x8); // virtual address (should be 0x8000_0000 for ones that we want to load)\n        let pPaddr = read32UintLe(elfFile, base + 0xC); // physical address (should be ??)\n        let pFilesz = read32UintLe(elfFile, base + 0x10);\n        let pMemsz = read32UintLe(elfFile, base + 0x14);\n        let pFlags = read32UintLe(elfFile, base + 0x18);\n        let pAlign = read32UintLe(elfFile, base + 0x1C);\n\n        if (pType !== 1 || pMemsz === 0) { // only look at PT_LOAD segments\n            continue;\n        }\n\n        if (pVaddr < 0x8000_0000 || pVaddr + pMemsz > 0x8000_0000 + memory.ram.length) {\n            continue;\n        }\n\n        memory.ram.set(elfFile.subarray(pOffset, pOffset + pFilesz), pVaddr - 0x8000_0000);\n\n        // console.log('Writing segment to memory: ' + pVaddr.toString(16) + ' - ' + (pVaddr + pFilesz).toString(16));\n\n        if (pVaddr === 0x8000_0000) {\n            hasStartSegment = true;\n        }\n        // loadedSegment = elfFile.subarray(pOffset, pOffset + pFilesz);\n    }\n\n    if (!hasStartSegment) {\n        throw new Error('No segment starting at 0x8000_0000 found!');\n    }\n}\n\nfunction read32UintLe(buffer: Uint8Array, offset: number): number {\n    return (buffer[offset] | (buffer[offset + 1] << 8) | (buffer[offset + 2] << 16) | (buffer[offset + 3] << 24)) >>> 0;\n}\n\nfunction read16UintLe(buffer: Uint8Array, offset: number): number {\n    return (buffer[offset] | (buffer[offset + 1] << 8)) >>> 0;\n}\n","import { isNotNil, assignImm } from \"../utils/data\";\nimport { BoundingBox3d, Vec3 } from \"../utils/vector\";\nimport { CompLibrary } from \"./comps/CompBuilder\";\nimport { IComp, IEditSnapshot, IElRef, ISchematic, IWireGraph, IWireGraphNode, RefType } from \"./CpuModel\";\nimport { checkWires } from \"./Wire\";\n\n// what's our format?\n// plain text format, with # comments\n// first line is #wire-schema <version> where version is a single number\n\n// Then we have a list of components & wires\n// Component lines start with \"C\", and wires start with \"W\"\n\n// Want to make them fairly easily copy-able, so we use deltas for the ids\n// note that ids can't contain spaces\n\n/* e.g.:\n\n#wire-schema 1\nC ram 0 p:-12,-23\nC rom 1 p:-12,-10\nC insFetch 3 p:-12,2\nC id 2 p:3,4\nC ls 8 p:26,4\nC alu 4 p:26,15\nC pc 5 p:3,11\nC reg 6 p:3,23\nW 3 ns:[13,6 p:id/rhsImm|22,6,0|22,12,1|33,12|33,12,2,3|22,28,2|33,7,3 p:ls/data|13,28,5 p:reg/outB|33,15,4 p:alu/rhs]\nW 6 ns:[-12,3 p:insFetch/addr|-17,3,0]\nW 7 ns:[-12,4 p:insFetch/data|-17,4,0]\nW 10 ns:[3,26 p:reg/in|-1,26,0|-1,31,1|31,31,2|31,21,3 p:alu/result|38,31,3|38,6,5|36,6,6 p:ls/dataOut]\nW 11 ns:[3,12 p:pc/in|-5,12,0]\nW 13 ns:[29,10|29,15,0 p:alu/lhs|29,7,0 p:ls/addrBase|20,10,0|16,10,3|20,26,3|16,12,4|16,9,4|13,26,5 p:reg/outA|13,12,6 p:pc/out|-7,9,7|-7,5,10 p:insFetch/pc]\nW 16 ns:[3,5 p:id/ins|0,5,0|0,3,1|-2,3,2 p:insFetch/ins]\n\n*/\n\nexport function exportData(layout: ISchematic) {\n\n    let str = \"#wire-schema 1\\n\";\n\n    for (let i = 0; i < layout.comps.length; i++) {\n        let comp = layout.comps[i];\n        let configStr = comp.args ? \" c:\" + JSON.stringify(comp.args) : \"\";\n        str += `C ${comp.id} ${comp.defId} p:${comp.pos.x},${comp.pos.y}${configStr}\\n`;\n    }\n    for (let i = 0; i < layout.wires.length; i++) {\n        let wire = layout.wires[i];\n        str += `W ${wire.id} ns:[`;\n        for (let j = 0; j < wire.nodes.length; j++) {\n            let node = wire.nodes[j];\n            let nodeStr = \"\";\n            if (j > 0) {\n                nodeStr += \"|\";\n            }\n            let initParts = [node.pos.x, node.pos.y].concat(node.edges.filter(x => x < j));\n            nodeStr += initParts.join(\",\");\n            if (node.ref?.type === RefType.CompNode) {\n                nodeStr += ` p:${node.ref.id}/${node.ref.compNodeId}`;\n            }\n            str += nodeStr;\n        }\n        str += \"]\\n\";\n    }\n\n    return str;\n}\n\nexport interface IImportResult {\n    issues: ILineIssue[] | null;\n    schematic?: ISchematic;\n}\n\nexport interface ILineIssue {\n    issue: string;\n    lineNo: number;\n    lineContent: string;\n    colNo?: number;\n}\n\nexport function importData(str: string): IImportResult {\n    let res: IImportResult = { issues: null };\n    let lines = str.split(\"\\n\");\n\n    function makeIssue(issue: string, lineIdx: number, colNo?: number) {\n        res.issues = res.issues || [];\n        res.issues.push({ issue, lineNo: lineIdx + 1, lineContent: lines[lineIdx], colNo });\n    }\n\n    if (lines.length === 0 || !lines[0].startsWith('#wire-schema')) {\n        makeIssue(\"Invalid file format: first line must be #wire-schema <version>\", 0);\n        return res;\n    }\n    let version = parseInt(lines[0].split(\" \")[1]);\n    if (version !== 1) {\n        makeIssue(\"Invalid file format: only version 1 is supported\", 0);\n        return res;\n    }\n\n    interface ILinePart {\n        text: string;\n        label: string;\n        value: string;\n    }\n\n    function parseLine(a: string): ILinePart[] {\n        let res: ILinePart[] = [];\n        let re = /\\s*(?:([\\w]+):)?(\\[[^\\]]+\\]|\\{.*\\}|[^\\[\\]: ]+)/g;\n        let match: RegExpExecArray | null;\n        while (!!(match = re.exec(a))) {\n            let value = match[2].trim();\n            if (value.startsWith(\"[\") && value.endsWith(\"]\")) {\n                value = value.substring(1, value.length - 1);\n            }\n            res.push({ text: match[0].trim(), label: match[1], value });\n        }\n        return res;\n    }\n\n    let comps: IComp[] = [];\n    let wires: IWireGraph[] = [];\n\n    for (let lineIdx = 0; lineIdx < lines.length; lineIdx++) {\n        let lineRaw = lines[lineIdx];\n        let line = lineRaw.trim();\n        if (!line || line.startsWith(\"#\")) {\n            continue;\n        }\n\n        let parts = parseLine(line);\n\n        if (parts[0].text === 'C') {\n            if (parts.length < 3) {\n                makeIssue(\"Invalid component line: must have at least 3 parts\", lineIdx);\n                continue;\n            }\n            let id = parts[1].text;\n            let type = parts[2].text;\n\n            let comp: IComp = {\n                id,\n                name: id,\n                pos: new Vec3(0, 0),\n                size: new Vec3(0, 0),\n                defId: type,\n                ports: [],\n                args: null,\n                resolved: false,\n                hasSubSchematic: false,\n            };\n\n            for (let j = 3; j < parts.length; j++) {\n                let part = parts[j];\n                if (part.label === 'p') {\n                    let posParts = part.value.split(\",\");\n                    if (posParts.length !== 2) {\n                        makeIssue(\"Invalid component line: p: must have 2 parts\", lineIdx);\n                        continue;\n                    }\n                    let x = parseFloat(posParts[0]);\n                    let y = parseFloat(posParts[1]);\n                    if (isNaN(x) || isNaN(y)) {\n                        makeIssue(\"Invalid component line: p: must have 2 numbers\", lineIdx);\n                        continue;\n                    }\n                    comp.pos = new Vec3(x, y);\n                } else if (part.label === 'c') {\n                    comp.args = JSON.parse(part.value);\n                } else {\n                    makeIssue(`Invalid component line: unknown part [${part.label}] [${part.value}]`, lineIdx);\n                    continue;\n                }\n            }\n\n            comps.push(comp);\n\n        } else if (parts[0].text === 'W') {\n            if (parts.length < 3) {\n                makeIssue(\"Invalid wire line: must have at least 3 space-separated parts\", lineIdx);\n                continue;\n            }\n            let id = parts[1].text;\n            let nodes: IWireGraphNode[] = [];\n            for (let part of parts) {\n                if (part.label === 'ns') {\n                    let nodesStrs = part.value.split(\"|\");\n                    for (let nodeStr of nodesStrs) {\n                        let nodeParts = parseLine(nodeStr);\n                        let posAndEdges = nodeParts[0].text.split(\",\");\n                        if (posAndEdges.length < 2) {\n                            makeIssue(\"Invalid wire node: must have at least 2 parts\", lineIdx);\n                            continue;\n                        }\n                        let x = parseFloat(posAndEdges[0]);\n                        let y = parseFloat(posAndEdges[1]);\n                        if (isNaN(x) || isNaN(y)) {\n                            makeIssue(\"Invalid wire node: must have 2 numbers\", lineIdx);\n                            continue;\n                        }\n                        let edges: number[] = [];\n                        for (let i = 2; i < posAndEdges.length; i++) {\n                            let edge = parseInt(posAndEdges[i]);\n                            if (isNaN(edge)) {\n                                makeIssue(\"Invalid wire node: edge must be a number\", lineIdx);\n                                continue;\n                            }\n                            edges.push(edge);\n                        }\n\n                        let ref: IElRef | undefined;\n\n                        for (let nodePart of nodeParts) {\n                            if (nodePart.label === 'p') {\n                                let compNodeParts = nodePart.value.split(\"/\");\n                                if (compNodeParts.length !== 2) {\n                                    makeIssue(\"Invalid wire node: c: must have 2 parts\", lineIdx);\n                                    continue;\n                                }\n                                let compId = compNodeParts[0];\n                                let compNodeId = compNodeParts[1];\n                                ref = { type: RefType.CompNode, id: compId, compNodeId };\n                            }\n                        }\n\n                        nodes.push({ id: nodes.length, pos: new Vec3(x, y), edges, ref });\n                    }\n                }\n            }\n            for (let node of nodes) {\n                for (let edge of node.edges) {\n                    if (node.id > edge) {\n                        nodes[edge].edges.push(node.id);\n                    }\n                }\n            }\n            wires.push({ id, nodes });\n        } else {\n            makeIssue(`Unexpected line start letter: '${line[0]}'`, lineIdx);\n            continue;\n        }\n\n    }\n\n    let schematic: ISchematic = { comps, wires, compBbox: new BoundingBox3d() };\n\n    let outStr = exportData(schematic);\n\n    if (outStr.replaceAll(/\\r/g, '') !== str.replaceAll(/\\r/g, '')) {\n        makeIssue(\"Exported data does not match imported data\", 0);\n        console.log('--- str:\\n', str);\n        console.log('--- outStr:\\n', outStr);\n    }\n\n    if (res.issues !== null) {\n        console.log(res.issues);\n    }\n\n    if (!res.issues) {\n        res.schematic = schematic;\n    }\n\n    return res;\n}\n\n\n\nexport interface ILSGraphWire {\n    nodes: ILSGraphWireNode[];\n}\n\nexport interface ILSComp {\n    id: string;\n    defId: string;\n    x: number;\n    y: number;\n    args?: any;\n    subSchematicId?: string;\n}\n\nexport interface ILSGraphWireNode {\n    id: number;\n    x: number;\n    y: number;\n    edges: number[];\n    ref?: IElRef;\n}\n\nexport interface ILSState {\n    parentCompDefId?: string;\n    wires: ILSGraphWire[];\n    comps: ILSComp[];\n}\n\nexport function hydrateFromLS(ls: Partial<ILSState> | undefined): ILSState {\n    return {\n        parentCompDefId: ls?.parentCompDefId,\n        wires: ls?.wires ?? [],\n        comps: ls?.comps ?? [],\n    };\n}\n\nexport function wiresFromLsState(layoutBase: IEditSnapshot, ls: ILSState, compLibrary: CompLibrary): IEditSnapshot {\n\n    let wireIdx = 0;\n    let newWires: IWireGraph[] = ls.wires.map(w => ({\n        id: '' + wireIdx++,\n        nodes: w.nodes.map(n => ({\n            id: n.id,\n            pos: new Vec3(n.x, n.y),\n            edges: n.edges,\n            ref: n.ref,\n        })),\n    }));\n\n    let maxWireId = 0;\n    for (let w of newWires) {\n        maxWireId = Math.max(maxWireId, parseInt(w.id));\n    }\n\n    checkWires(newWires, 'wiresFromLsState');\n\n    let lsCompLookup = new Map<string, ILSComp>();\n    for (let c of ls.comps) {\n        lsCompLookup.set(c.id, c);\n    }\n\n    let comps: IComp[] = ls.comps.map(c => {\n        let comp = compLibrary.create(c.defId, c.args);\n\n        comp.id = c.id;\n        comp.pos = new Vec3(c.x, c.y);\n        comp.subSchematicId = c.subSchematicId;\n\n        return comp;\n    });\n\n    let maxCompId = 0;\n    for (let c of comps) {\n        maxCompId = Math.max(maxCompId, parseInt(c.id));\n    }\n\n    return assignImm(layoutBase, {\n        mainSchematic: assignImm(layoutBase.mainSchematic, {\n            nextWireId: maxWireId + 1,\n            nextCompId: maxCompId + 1,\n            parentCompDefId: ls.parentCompDefId,\n            wires: newWires,\n            comps: comps,\n        }),\n    });\n}\n\nexport function schematicToLsState(layout: ISchematic): ILSState {\n    return {\n        wires: layout.wires\n            .filter(w => w.nodes.length > 0)\n            .map(w => ({\n                nodes: w.nodes.map(n => ({ id: n.id, x: n.pos.x, y: n.pos.y, edges: n.edges, ref: n.ref })),\n            })),\n        comps: layout.comps.map(c => ({\n            id: c.id,\n            defId: c.defId,\n            x: c.pos.x,\n            y: c.pos.y,\n            args: c.args,\n            subSchematicId: c.subSchematicId,\n        })),\n    };\n}\n\n","import { AffineMat2d } from \"../utils/AffineMat2d\";\nimport { BoundingBox3d, Vec3 } from \"../utils/vector\";\nimport { IEditSnapshot, IEditorState } from \"./CpuModel\";\nimport { compPortDefId } from \"./comps/CompPort\";\nimport { ISharedContext, createSharedContext } from \"./library/SharedContext\";\n\nexport interface IBoundingBoxOptions {\n    excludePorts?: boolean;\n}\n\nexport function computeModelBoundingBox(model: IEditSnapshot, options?: IBoundingBoxOptions): BoundingBox3d {\n    let modelBbb = new BoundingBox3d();\n\n    for (let c of model.mainSchematic.comps) {\n        if (options?.excludePorts && c.defId === compPortDefId) {\n            continue;\n        }\n\n        modelBbb.addInPlace(c.pos);\n        modelBbb.addInPlace(c.pos.add(c.size));\n    }\n    for (let w of model.mainSchematic.wires) {\n        for (let n of w.nodes) {\n            modelBbb.addInPlace(n.pos);\n        }\n    }\n    if (model.mainSchematic.compBbox && !options?.excludePorts) {\n        modelBbb.combineInPlace(model.mainSchematic.compBbox);\n    }\n\n    return modelBbb;\n}\n\nexport function computeZoomExtentMatrix(modelBb: BoundingBox3d, viewBb: BoundingBox3d, expandFraction: number): AffineMat2d {\n    let bb = new BoundingBox3d(modelBb.min, modelBb.max);\n    bb.expandInPlace(modelBb.size().mul(expandFraction).len());\n\n    let modelSize = bb.size();\n    let viewSize = viewBb.size();\n\n    let mtx = AffineMat2d.multiply(\n        AffineMat2d.translateVec(viewBb.center()),\n        AffineMat2d.scale1(Math.min(viewSize.x / modelSize.x, viewSize.y / modelSize.y)),\n        AffineMat2d.translateVec(bb.center().mul(-1)),\n    );\n\n    return mtx;\n}\n\nexport function createCpuEditorState(sharedContext: ISharedContext | null): IEditorState {\n    sharedContext ??= createSharedContext();\n    let editSnapshot = constructEditSnapshot();\n\n    return {\n        snapshot: editSnapshot, // wiresFromLsState(constructEditSnapshot(), lsState, compLibrary),\n        snapshotTemp: null,\n        mtx: AffineMat2d.multiply(AffineMat2d.scale1(10), AffineMat2d.translateVec(new Vec3(1920/2, 1080/2).round())),\n        sharedContext,\n        compLibrary: sharedContext.compLibrary,\n        schematicLibrary: sharedContext.schematicLibrary,\n        codeLibrary: sharedContext.codeLibrary,\n        desiredSchematicId: null,\n        activeSchematicId: null,\n        redoStack: [],\n        undoStack: [],\n        hovered: null,\n        maskHover: null,\n        selectRegion: null,\n        addLine: false,\n        showExeOrder: false,\n        transparentComps: false,\n        compLibraryVisible: false,\n        needsZoomExtent: true,\n    };\n}\n\n\nexport function constructEditSnapshot(): IEditSnapshot {\n    return {\n        focusedIdPrefix: \"\",\n        selected: [],\n        mainSchematic: {\n            id: \"\",\n            name: \"\",\n\n            nextWireId: 0,\n            nextCompId: 0,\n            wires: [],\n            comps: [],\n\n            compPorts: [],\n            compSize: new Vec3(0, 0),\n            compBbox: new BoundingBox3d(),\n        },\n        subSchematics: {},\n    };\n}\n","\nexport enum OpCode {\n    OPIMM  = 0b0010011,\n    OP     = 0b0110011,\n    BRANCH = 0b1100011,\n    LUI    = 0b0110111,\n    AUIPC  = 0b0010111,\n    JAL    = 0b1101111,\n    JALR   = 0b1100111,\n    SYSTEM = 0b1110011,\n    LOAD   = 0b0000011,\n    STORE  = 0b0100011,\n    FENCE  = 0b0001111,\n}\n\nexport enum Funct3Op {\n    // Immediate\n    ADDI  = 0b000, // add\n    SLTI  = 0b010, // set less than\n    SLTIU = 0b011, // set less than unsigned\n    XORI  = 0b100, // xor\n    ORI   = 0b110, // or\n    ANDI  = 0b111, // and\n\n    SLLI  = 0b001, // shift left logical\n    SRLI  = 0b101, // shift right logical\n    SRAI  = 0b101, // shift right arithmetic\n\n    SUB   = 0b000, // subtract\n    ADD   = 0b000, // add\n    SLL   = 0b001, // shift left logical\n    SLT   = 0b010, // set less than\n    SLTU  = 0b011, // set less than unsigned\n    XOR   = 0b100, // xor\n    SRL   = 0b101, // shift right logical\n    SRx   = 0b101, // shift right arithmetic\n    OR    = 0b110, // or\n    AND   = 0b111, // and\n}\n\nexport enum Funct3OpImm {\n    ADDI  = 0b000, // add\n    SLTI  = 0b010, // set less than\n    SLTIU = 0b011, // set less than unsigned\n    XORI  = 0b100, // xor\n    ORI   = 0b110, // or\n    ANDI  = 0b111, // and\n\n    SLLI  = 0b001, // shift left logical\n    SRxI  = 0b101, // shift right logical\n    // SRAI  = 0b101, // shift right arithmetic\n}\n\nexport enum Funct3Branch {\n    // Branch\n    BEQ   = 0b000, // branch equal\n    BNE   = 0b001, // branch not equal\n    BLT   = 0b100, // branch less than\n    BGE   = 0b101, // branch greater than or equal\n    BLTU  = 0b110, // branch less than unsigned\n    BGEU  = 0b111, // branch greater than or equal unsigned\n}\n\nexport enum Funct3LoadStore {\n    // Load/Store\n    LB    = 0b000, // load byte\n    LH    = 0b001, // load halfword\n    LW    = 0b010, // load word\n    LBU   = 0b100, // load byte unsigned\n    LHU   = 0b101, // load halfword unsigned\n\n    SB    = 0b000, // store byte\n    SH    = 0b001, // store halfword\n    SW    = 0b010, // store word\n}\n\nexport enum Funct3CSR {\n    // CSR\n    CSRRW = 0b001, // read/write CSR\n    CSRRS = 0b010, // read/set CSR\n    CSRRC = 0b011, // read/clear CSR\n    CSRRWI = 0b101, // read/write CSR immediate\n    CSRRSI = 0b110, // read/set CSR immediate\n    CSRRCI = 0b111, // read/clear CSR immediate\n}\n\n// CSR registers\nexport enum CSR_Reg {\n    mstatus = 0x300, // machine status register\n    misa = 0x301, // machine ISA register\n    mdeleg = 0x302, // machine exception delegation register\n    mideleg = 0x303, // machine interrupt delegation register\n    mie = 0x304, // machine interrupt-enable register\n    mtvec = 0x305, // machine trap-handler base address\n    mcounteren = 0x306, // machine counter enable\n    mstatush = 0x310, // machine status register, high word\n\n    mscratch = 0x340, // machine scratch register\n    mepc = 0x341, // machine exception program counter\n    mcause = 0x342, // machine trap cause\n    mtval = 0x343, // machine bad address or instruction\n    mip = 0x344, // machine interrupt pending\n    mtinst = 0x34a, // machine trap instruction\n    mtval2 = 0x34b, // machine bad guest physical address\n}\n","import { assert } from \"console\";\nimport { AffineMat2d } from \"../utils/AffineMat2d\";\nimport { BoundingBox3d, Vec3 } from \"../utils/vector\";\nimport { IComp, IEditContext, IEditSchematic, IEditSnapshot, IEditorState, IElRef, ISchematic } from \"./CpuModel\";\nimport { ICompDef } from \"./comps/CompBuilder\";\nimport { ISharedContext } from \"./library/SharedContext\";\nimport { assignImm } from \"../utils/data\";\n\nexport function editCtxFromRefId(ref: IElRef): IEditContext {\n    let prefixIdx = ref.id.lastIndexOf('|');\n    return { idPrefix: prefixIdx >= 0 ? ref.id.substring(0, prefixIdx + 1) : '' };\n}\n\nexport function globalRefToLocal(ref: IElRef): IElRef {\n    let prefixIdx = ref.id.lastIndexOf('|');\n    return assignImm(ref, { id: ref.id.substring(prefixIdx + 1) });\n}\n\nexport function localRefToGlobal(ref: IElRef, editCtx: IEditContext): IElRef {\n    return assignImm(ref, { id: editCtx.idPrefix + ref.id });\n}\n\nexport function getMatrixForEditContext(editCtx: IEditContext, editorState: IEditorState): AffineMat2d {\n\n    let parts = editCtx.idPrefix.split('|');\n    let snapshot = editorState.snapshotTemp ?? editorState.snapshot;\n    let schematic: ISchematic = snapshot.mainSchematic;\n    let mtx = editorState.mtx;\n\n    for (let partId = 0; partId < parts.length - 1; partId++) {\n        let part = parts[partId];\n\n        let comp = schematic.comps.find(c => c.id === part);\n\n        if (!comp) {\n            break;\n        }\n\n        let subSchematic = getCompSubSchematic(editorState, comp);\n\n        if (!subSchematic) {\n            break;\n        }\n\n        let subMtx = computeSubLayoutMatrix(comp, subSchematic);\n\n        mtx = AffineMat2d.multiply(mtx, subMtx);\n\n        schematic = subSchematic;\n    }\n\n    return mtx;\n}\n\nexport function computeSubLayoutMatrix(comp: IComp, subSchematic: ISchematic) {\n    let bb = subSchematic.compBbox?.clone() ?? new BoundingBox3d();\n    if (bb.empty) {\n        // probably shouldn't depend on this! But it's a reasonable default.\n        for (let c of subSchematic.comps) {\n            bb.addInPlace(c.pos);\n            bb.addInPlace(c.pos.add(c.size));\n        }\n        bb.expandInPlace(Math.min(bb.size().x, bb.size().y) * 0.1);\n    }\n    if (bb.empty) {\n        bb = new BoundingBox3d(new Vec3(), comp.size.mul(2.5));\n    }\n\n    let bbSize = bb.size();\n    let scale = Math.min(comp.size.x / bbSize.x, comp.size.y / bbSize.y);\n\n    let subMtx = AffineMat2d.multiply(\n        AffineMat2d.translateVec(comp.pos.mulAdd(comp.size, 0.5)),\n        AffineMat2d.scale1(scale),\n        AffineMat2d.translateVec(bb.min.mul(-1).mulAdd(bbSize, -0.5)),\n    );\n\n    return subMtx;\n}\n\nexport function getActiveSubSchematic(editorState: IEditorState): [string, IEditSchematic] {\n    let snapshot = editorState.snapshotTemp ?? editorState.snapshot;\n\n    let idPrefix = snapshot.focusedIdPrefix ?? '';\n    let schematic = getCompSubSchematicForPrefix(editorState.sharedContext, snapshot, idPrefix);\n    return schematic ? [idPrefix, schematic] : [\"\", snapshot.mainSchematic];\n}\n\n// We get the sub-schematic from the in-editor snapshot (i.e. if it has edits), if available.\n// Otherwise we get it from the comp library (or schematic library).\nexport function getCompSubSchematic(editorState: IEditorState, comp: IComp): IEditSchematic | null {\n    if (!comp.hasSubSchematic && !comp.subSchematicId) {\n        return null;\n    }\n\n    let snapshot = editorState.snapshotTemp ?? editorState.snapshot;\n\n    return getCompSubSchematicForSnapshot(editorState.sharedContext, snapshot, comp);\n}\n\nexport function getSchematicForRef(editorState: IEditorState, ref: IElRef): [IElRef, IEditSchematic] {\n    let editCtx = editCtxFromRefId(ref);\n    let localRef = globalRefToLocal(ref);\n    let schematic = getCompSubSchematicForPrefix(editorState.sharedContext, editorState.snapshot, editCtx.idPrefix);\n\n    return [localRef, schematic ?? editorState.snapshot.mainSchematic];\n}\n\nexport function getCompSubSchematicForSnapshot(sharedContext: ISharedContext, snapshot: IEditSnapshot, comp: IComp): IEditSchematic | null {\n    if (!comp.hasSubSchematic && !comp.subSchematicId) {\n        return null;\n    }\n\n    if (comp.subSchematicId) {\n        let editSchematic = snapshot.subSchematics[comp.subSchematicId];\n        if (editSchematic) {\n            return editSchematic;\n        }\n\n        let schemLibEntry = sharedContext.schematicLibrary.getSchematic(comp.subSchematicId);\n\n        return schemLibEntry?.model.mainSchematic ?? null;\n    }\n\n    let compDef = sharedContext.compLibrary.getCompDef(comp.defId);\n\n    let editSchematic = snapshot.subSchematics[comp.defId ?? ''];\n    if (editSchematic) {\n        return editSchematic;\n    }\n\n    return compDef?.subLayout?.layout as IEditSchematic ?? null;\n}\n\nexport function getCompSubSchematicForPrefix(sharedContext: ISharedContext, snapshot: IEditSnapshot, prefix: string): IEditSchematic | null {\n    let parts = prefix.split('|');\n    let schematic: IEditSchematic = snapshot.mainSchematic;\n\n    for (let partId = 0; partId < parts.length - 1; partId++) {\n        let part = parts[partId];\n        let comp = schematic.comps.find(c => c.id === part);\n        if (!comp) {\n            return null;\n        }\n        let subSchematic = getCompSubSchematicForSnapshot(sharedContext, snapshot, comp);\n\n        if (!subSchematic) {\n            return null;\n        }\n\n        schematic = subSchematic;\n    }\n\n    return schematic;\n}\n\n// Get's the parent comps of a refId. Does not include the refId target itself (it might be a wire, say).\nexport function getParentCompsFromId(editorState: IEditorState, refId: string): IComp[] {\n    let parts = refId.split('|');\n    let snapshot = editorState.snapshotTemp ?? editorState.snapshot;\n    let schematic: ISchematic = snapshot.mainSchematic;\n    let parentComps: IComp[] = [];\n\n    for (let partId = 0; partId < parts.length - 1; partId++) {\n        let part = parts[partId];\n\n        let comp = schematic.comps.find(c => c.id === part);\n\n        if (!comp) {\n            break;\n        }\n\n        parentComps.push(comp);\n\n        let subSchematic = getCompSubSchematic(editorState, comp);\n\n        if (!subSchematic) {\n            break;\n        }\n\n        schematic = subSchematic;\n    }\n\n    return parentComps;\n}\n\nexport function getCompFromRef(editorState: IEditorState, refId: string): IComp | null {\n    let parts = refId.split('|');\n    let snapshot = editorState.snapshotTemp ?? editorState.snapshot;\n    let schematic: IEditSchematic = snapshot.mainSchematic;\n\n    for (let partId = 0; partId < parts.length - 1; partId++) {\n        let part = parts[partId];\n\n        let comp = schematic.comps.find(c => c.id === part);\n\n        if (!comp) {\n            return null;\n        }\n\n        let subSchematic = getCompSubSchematic(editorState, comp);\n\n        if (!subSchematic) {\n            return null;\n        }\n\n        schematic = subSchematic;\n    }\n\n    let lastPartId = parts[parts.length - 1];\n    return schematic.comps.find(c => c.id === lastPartId) ?? null;\n}\n","import { assignImm, getOrAddToMap, isNil } from \"../utils/data\";\nimport { projectOntoVector, segmentNearestPoint, segmentNearestT, Vec3 } from \"../utils/vector\";\nimport { IWire, ISegment, IWireGraph, IWireGraphNode, IElRef, RefType, IComp, IEditSchematic } from \"./CpuModel\";\nimport { PortHandling } from \"./Editor\";\n\nexport function moveSelectedComponents(schematic: IEditSchematic, selected: IElRef[], delta: Vec3): IEditSchematic {\n    if (delta.dist(Vec3.zero) < EPSILON) {\n        return schematic;\n    }\n\n    checkWires(schematic.wires, 'moveSelectedComponents (pre)');\n\n    let wireLookup = new Map<string, IWireGraph>();\n    for (let wire of schematic.wires) {\n        wireLookup.set(wire.id, wire);\n    }\n\n    let compPorts = new Map<string, { pos: Vec3, ref: IElRef }>();\n\n    let selection = new Set(selected.map(refToString));\n    let compsToMove = new Set<string>();\n    let wiresAndNodesToMove = new Map<string, Map<number, Vec3>>();\n\n    // Create a map of all the comp ports\n    for (let comp of schematic.comps) {\n        if (!selection.has(refToString({ type: RefType.Comp, id: comp.id }))) {\n            continue;\n        }\n        for (let port of comp.ports ?? []) {\n            let pos = comp.pos.add(port.pos);\n            let ref: IElRef = { type: RefType.CompNode, id: comp.id, compNodeId: port.id };\n            compPorts.set(refToString(ref), { pos, ref });\n        }\n    }\n\n    for (let ref of selected) {\n        if (ref.type === RefType.Comp) {\n            compsToMove.add(ref.id);\n        }\n    }\n\n    // figure out what nodes to move on each wire (by direct selection, or by being attached to a selected comp's port)\n    for (let wire of schematic.wires) {\n        let nodeIdsToMove = new Map<number, Vec3>();\n\n        for (let node of wire.nodes) {\n            let nodeRefStr = refToString({ type: RefType.WireNode, id: wire.id, wireNode0Id: node.id });\n            if (selection.has(nodeRefStr)) {\n                nodeIdsToMove.set(node.id, delta);\n                continue;\n            }\n\n            if (node.ref) {\n                let refStr = refToString(node.ref);\n                if (compPorts.has(refStr)) {\n                    nodeIdsToMove.set(node.id, delta);\n                }\n            }\n        }\n\n        for (let ref of selected) {\n            if (ref.type === RefType.WireSeg && ref.id === wire.id) {\n                let node0 = wire.nodes[ref.wireNode0Id!];\n                let node1 = wire.nodes[ref.wireNode1Id!];\n                let segDir = node1.pos.sub(node0.pos).normalize();\n                let segDirPerp = new Vec3(-segDir.y, segDir.x, 0);\n                let perpDelta = projectOntoVector(delta, segDirPerp);\n                if (!nodeIdsToMove.has(node0.id)) {\n                    nodeIdsToMove.set(node0.id, perpDelta);\n                }\n                if (!nodeIdsToMove.has(node1.id)) {\n                    nodeIdsToMove.set(node1.id, perpDelta);\n                }\n            }\n        }\n\n        wiresAndNodesToMove.set(wire.id, nodeIdsToMove);\n    }\n\n    return assignImm(schematic, {\n        comps: schematic.comps.map(comp => {\n            if (compsToMove.has(comp.id)) {\n                return assignImm(comp, { pos: snapToGrid(comp.pos.add(delta)) });\n            }\n            return comp;\n        }),\n        wires: schematic.wires.map(wire => {\n            let nodeIdsToMove = wiresAndNodesToMove.get(wire.id);\n            if (nodeIdsToMove) {\n                wire = dragNodes(wire, nodeIdsToMove);\n            }\n            return wire;\n        }),\n    });\n}\n\nexport function updateWiresForComp<T extends IEditSchematic>(layout: T, comp: IComp<any>, portHandling: PortHandling): T {\n\n    if (portHandling === PortHandling.Move) {\n\n        // plan: for each port, find all wires that are touching it\n        // figure out the port's delta, based on the previous position of the wire node (and delta from wire node to new comp port)\n        // run the dragNodes logic\n\n        return assignImm<IEditSchematic>(layout, {\n\n            wires: layout.wires.map(wire => {\n                let nodeIdsToMove = new Map<number, Vec3>();\n                let nodeIdsToClean = new Set<number>();\n\n                for (let node of wire.nodes) {\n                    if (!node.ref || node.ref.type !== RefType.CompNode || node.ref.id !== comp.id) {\n                        continue;\n                    }\n                    let port = comp.ports.find(p => p.id === node.ref!.compNodeId);\n                    if (!port) {\n                        nodeIdsToClean.add(node.id);\n                        continue;\n                    }\n                    let delta = comp.pos.add(port.pos).sub(node.pos);\n\n                    nodeIdsToMove.set(node.id, delta);\n                }\n\n                if (nodeIdsToClean.size > 0) {\n                    wire = copyWireGraph(wire);\n                    for (let id of nodeIdsToClean) {\n                        wire.nodes[id].ref = undefined;\n                    }\n                }\n\n                if (nodeIdsToMove.size > 0) {\n                    wire = dragNodes(wire, nodeIdsToMove);\n                }\n                return wire;\n            })\n        }) as T;\n    }\n\n    return layout;\n\n}\n\nexport function refToString(ref: IElRef): string {\n    switch (ref.type) {\n        case RefType.Comp:\n            return `C|${ref.id}`;\n        case RefType.CompNode:\n            return `CP|${ref.id}|${ref.compNodeId}`;\n        case RefType.WireNode:\n            return `WN|${ref.id}|${ref.wireNode0Id!}`;\n        case RefType.WireSeg:\n            return `W|${ref.id}|${ref.wireNode0Id!}|${ref.wireNode1Id!}`;\n    }\n}\n\nexport function parseRefStr(str: string): IElRef {\n    let parts = str.split('|');\n    switch (parts[0]) {\n        case 'C':\n            return { type: RefType.Comp, id: parts[1] };\n        case 'CP':\n            return { type: RefType.CompNode, id: parts[1], compNodeId: parts[2] };\n        case 'WN':\n            return { type: RefType.WireNode, id: parts[1], wireNode0Id: parseInt(parts[2]) };\n        case 'W':\n            return { type: RefType.WireSeg, id: parts[1], wireNode0Id: parseInt(parts[2]), wireNode1Id: parseInt(parts[3]) };\n        default:\n            throw new Error(`Unable to parse ref string '${str}'`);\n    }\n}\n\nexport function dragNodes(wire: IWireGraph, nodesToMove: Map<number, Vec3>) {\n    // kinda complicated, but assume we're dragging a component (or 3) with wires attached to their nodes\n\n    // we do something similar to segment dragging, where we try to extend down co-linear segments\n    // but if we hit a node that's on an anchored node, we walk back and only move the first co-linear segment,\n    // creating extra segments as needed\n\n    // if we have segments where there's no breakpoint, we'll need to introduce a dog-leg\n    // if we're moving right, we start from the leftmost seg, and vice versa\n    // we need to pick a dog-leg height, so choose the smallest one\n    // then increase that height for subsequent segments\n    wire = copyWireGraph(wire);\n\n    let initialNodes = new Set(nodesToMove.keys());\n\n    function isPinnedNode(nodeIdx: number) {\n        let node = wire.nodes[nodeIdx];\n        return node.ref?.type === RefType.CompNode && !initialNodes.has(nodeIdx);\n    }\n\n    for (let [node0Idx, delta] of nodesToMove) {\n        if (delta.len() < EPSILON) {\n            continue;\n        }\n        let node0 = wire.nodes[node0Idx];\n        for (let node1Idx of [...node0.edges]) {\n            // looking at each offshoot (node1) of a moving node (node0)\n            let node1 = wire.nodes[node1Idx];\n            let dir = node1.pos.sub(node0.pos).normalize();\n            let dirPerp = new Vec3(-dir.y, dir.x, 0);\n            if (dirPerp.len() < EPSILON) {\n                continue;\n            }\n            let perpDelta = projectOntoVector(delta, dirPerp);\n            let maybeMoves = new Map<number, Vec3>();\n\n            // find all nodes colinear with this segment\n            let anyPinnedNodes = false;\n            iterColinearNodes(wire, node1Idx, dir, node => {\n                let moveAmt = nodesToMove.get(node.id);\n\n                if (isPinnedNode(node.id)) {\n                    anyPinnedNodes = true;\n                }\n\n                if (!moveAmt) {\n                    maybeMoves.set(node.id, perpDelta);\n                } else if (Math.abs(moveAmt.dot(perpDelta)) < EPSILON) {\n                    // probably should subtract the dot-prod component from colinearDelta prior to adding, but this is good enough\n                    maybeMoves.set(node.id, moveAmt.add(perpDelta));\n                }\n            });\n\n            if (!anyPinnedNodes) {\n                // we can move all of these nodes\n                for (let move of maybeMoves) {\n                    nodesToMove.set(move[0], move[1]);\n                }\n            } else {\n                // need to disjoint the first node\n                if (!isPinnedNode(node1Idx)) {\n                    let newNode: IWireGraphNode = { id: wire.nodes.length, pos: snapToGrid(node1.pos.add(perpDelta)), edges: [] };\n                    wireUnlinkNodes(node0, node1);\n                    wireLinkNodes(node0, newNode);\n                    wireLinkNodes(newNode, node1);\n                    wire.nodes.push(newNode);\n                }\n            }\n        }\n    }\n\n    for (let [nodeIdx, d] of nodesToMove) {\n        wire.nodes[nodeIdx] = assignImm(wire.nodes[nodeIdx], {\n            pos: snapToGrid(wire.nodes[nodeIdx].pos.add(d)),\n         });\n    }\n\n    return wire;\n}\n\nexport function iterColinearNodes(wire: IWireGraph, nodeIdx: number, dir: Vec3, cb: (node: IWireGraphNode) => void) {\n    let seenIds = new Set<number>();\n    let nodeStack = [nodeIdx];\n\n    while (nodeStack.length > 0) {\n        let nodeIdx = nodeStack.pop()!;\n        let node0 = wire.nodes[nodeIdx];\n        if (seenIds.has(node0.id)) {\n            continue;\n        }\n        seenIds.add(node0.id);\n        cb(node0);\n\n        for (let node1Idx of node0.edges) {\n            let node1 = wire.nodes[node1Idx];\n            let edgeDir = node1.pos.sub(node0.pos).normalize();\n            let dotProd = edgeDir.dot(dir);\n            if (Math.abs(dotProd) > 1 - EPSILON) {\n                nodeStack.push(node1Idx);\n            }\n        }\n    }\n}\n\nexport function dragSegment(wire: IWireGraph, node0Idx: number, node1Idx: number, delta: Vec3) {\n\n    // let seg = wire.segments[segId];\n    let node0 = wire.nodes[node0Idx];\n    let node1 = wire.nodes[node1Idx];\n\n    // we're gonna move both of these nodes\n    // but also iterate through all nodes colinear with this segment, and move them by the same amount\n    // Since we're not dealing with angled lines, don't have to re-evaluate the intersection point\n    let segDir = node1.pos.sub(node0.pos).normalize();\n\n    let nodesToMove = new Set<number>();\n    let nodeStack = [node0Idx, node1Idx];\n    let seenIds = new Set<number>();\n\n    let newNodes = [...wire.nodes];\n\n    while (nodeStack.length > 0) {\n        let nodeIdx0 = nodeStack.pop()!;\n        let node0 = wire.nodes[nodeIdx0];\n        if (seenIds.has(node0.id)) {\n            continue;\n        }\n        seenIds.add(node0.id);\n        nodesToMove.add(nodeIdx0);\n        for (let nodeIdx1 of node0.edges) {\n            let node1 = wire.nodes[nodeIdx1];\n            let dir = node1.pos.sub(node0.pos).normalize();\n            let dotProd = dir.dot(segDir);\n            if (Math.abs(dotProd) > 1 - EPSILON) {\n                nodeStack.push(nodeIdx1);\n            }\n        }\n    }\n\n    for (let nodeIdx of nodesToMove) {\n        newNodes[nodeIdx] = assignImm(newNodes[nodeIdx], {\n            pos: snapToGrid(newNodes[nodeIdx].pos.add(delta)),\n         });\n    }\n\n    return assignImm(wire, { nodes: newNodes });\n}\n\nexport function applyWires(layout: IEditSchematic, wires: IWireGraph[], editIdx: number): IEditSchematic {\n\n    let [editedWires, newWires] = fixWires(layout, wires, editIdx);\n    let nextWireId = layout.nextWireId;\n    for (let wire of newWires) {\n        wire.id = '' + nextWireId++;\n    }\n\n    let allWires = [...editedWires, ...newWires];\n\n    checkWires(editedWires, 'applyWires (post-fixWires edited)');\n    checkWires(newWires, 'applyWires (post-fixWires new)');\n\n    return assignImm(layout, {\n        nextWireId,\n        wires: allWires,\n    })\n}\n\nexport function checkWires(wires: IWireGraph[], name: string) {\n    for (let wire of wires) {\n        if (wire.nodes.some(n => n.edges.some(e => isNil(e) || isNil(wire.nodes[e])))) {\n            console.log('wire:', wire);\n            throw new Error(`CHECK [${name}]: Wire ${wire.id} has dangling edges`);\n        }\n\n        for (let node0 of wire.nodes) {\n            for (let node1Idx of node0.edges) {\n                let node1 = wire.nodes[node1Idx];\n                if (node1.edges.includes(node0.id)) {\n                    continue;\n                }\n                node1.edges.push(node0.id);\n                console.log(`CHECK [${name}]: Wire ${wire.id} has unidirectional edge ${node0.id} -> ${node1.id}`);\n            }\n        }\n    }\n}\n\nexport function copyWireGraph(wire: IWireGraph): IWireGraph {\n    let nodes = wire.nodes.map(n => ({ ...n, edges: n.edges.slice() }));\n    return { ...wire, nodes };\n}\n\nfunction createNodePosMap(layout: IEditSchematic) {\n    let nodePosMap = new Map<string, { pos: Vec3, ref: IElRef }>();\n    for (let comp of layout.comps) {\n        for (let node of comp.ports) {\n            let nodePos = comp.pos.add(node.pos);\n            let ref: IElRef = {\n                type: RefType.CompNode,\n                id: comp.id,\n                compNodeId: node.id,\n            };\n            let posStr = `${nodePos.x},${nodePos.y}`;\n            nodePosMap.set(posStr, { pos: nodePos, ref });\n        }\n    }\n\n    return nodePosMap;\n}\n\nexport function iterWireGraphSegments(graph: IWireGraph, cb: (node0: IWireGraphNode, node1: IWireGraphNode) => boolean | void) {\n    for (let node0 of graph.nodes) {\n        for (let nodeId of node0.edges) {\n            let node1 = graph.nodes[nodeId];\n            if (!node1) {\n                throw new Error(`Couldn't find node ${nodeId}`);\n            }\n            if (node1.id > node0.id) {\n                let res = cb(node0, node1);\n                if (res === false) {\n                    return;\n                }\n            }\n        }\n    }\n}\n\n/** Two main things to fix:\n    1. wires that are touching each other get merged\n    2. wires that have islands get split\n*/\nexport function fixWires(layout: IEditSchematic, wires: IWireGraph[], editIdx: number): [editedWires: IWireGraph[], newWires: IWireGraph[]] {\n    wires = [...wires];\n    let editWire = wires[editIdx];\n\n    // find all wires that are touching the edit wire\n    let wireIdxsToMerge = new Set<number>();\n\n    checkWires(wires, 'fixWires (pre-merge)');\n\n    for (let i = 0; i < wires.length; i++) {\n        if (i === editIdx) {\n            continue;\n        }\n\n        let wire = wires[i];\n\n        let merged = false;\n        // find any segments that are touching the edit wire\n        iterWireGraphSegments(wire, (node0, node1) => {\n            let seg1 = { p0: node0.pos, p1: node1.pos };\n\n            iterWireGraphSegments(editWire, (editNode0, editNode1) => {\n                let seg2 = { p0: editNode0.pos, p1: editNode1.pos };\n\n                if (segsTouching(seg1, seg2)) {\n                    merged = true;\n                    wireIdxsToMerge.add(i);\n                    return false;\n                }\n            });\n\n            return !merged;\n        });\n    }\n\n    if (wireIdxsToMerge.size > 0) {\n        let newWire = graphToWire(editWire);\n\n        for (let idx of wireIdxsToMerge) {\n            let wire = graphToWire(wires[idx]);\n            for (let seg of wire.segments) {\n                newWire.segments.push(seg);\n            }\n        }\n\n        wires[editIdx] = wireToGraph(newWire);\n\n        let idxsBelowNewIdx = Array.from(wireIdxsToMerge).filter(i => i < editIdx).length;\n        wires = wires.filter((_, i) => !wireIdxsToMerge.has(i));\n        editIdx -= idxsBelowNewIdx;\n    }\n\n    checkWires(wires, 'fixWires (pre-fixWire)');\n    wires[editIdx] = fixWire(wires[editIdx]);\n\n    let editWireGraph = wires[editIdx];\n\n    let nodePosMap = createNodePosMap(layout);\n    for (let node of editWireGraph.nodes) {\n        let posStr = `${node.pos.x},${node.pos.y}`;\n        let nodePos = nodePosMap.get(posStr);\n        if (nodePos) {\n            node.ref = nodePos.ref;\n        }\n    }\n\n    checkWires(wires, 'fixWires (pre-splitIntoIslands)');\n\n    let islands = splitIntoIslands(editWireGraph);\n\n    wires.splice(editIdx, 1, islands[0]);\n    wires = wires.filter(a => !!a);\n    let newWires = islands.slice(1);\n\n    // if (newWires.length > 0) {\n    //     console.log('islands:', islands);\n    // }\n\n    checkWires(wires, 'fixWires (post-splitIntoIslands)');\n    checkWires(newWires, 'fixWires (post-splitIntoIslands new)');\n\n    return [wires, newWires];\n}\n\nexport function splitIntoIslands(wire: IWireGraph): IWireGraph[] {\n\n    let islands: IWireGraphNode[][] = [];\n    let seenIds = new Set<number>();\n\n    for (let i = 0; i < wire.nodes.length; i++) {\n        let startNode = wire.nodes[i];\n\n        if (!seenIds.has(startNode.id)) {\n            let stack = [startNode];\n            let island: IWireGraphNode[] = [];\n\n            while (stack.length > 0) {\n                let node = stack.pop()!;\n\n                if (!seenIds.has(node.id)) {\n                    island.push(node);\n                    seenIds.add(node.id);\n\n                    for (let edgeId of node.edges) {\n                        stack.push(wire.nodes[edgeId]);\n                    }\n                }\n            }\n            if (island.length > 1) {\n                islands.push(island);\n            }\n        }\n    }\n\n    if (islands.length === 1) {\n        return [wire];\n    }\n\n    return islands.map(island => repackGraphIds(assignImm(wire, { nodes: island })));\n}\n\nexport function repackGraphIds(wire: IWireGraph): IWireGraph {\n\n    let idCntr = 0;\n    let idMap = new Map<number, number>();\n    let newNodes: IWireGraphNode[] = [];\n    for (let node of wire.nodes) {\n        if (node.edges.length === 0) {\n            continue;\n        }\n\n        let newId = idCntr++;\n        idMap.set(node.id, newId);\n        newNodes.push(assignImm(node, { id: newId }));\n    }\n    for (let node of newNodes) {\n        node.edges = node.edges.map(id => idMap.get(id)!);\n    }\n    return assignImm(wire, { nodes: newNodes });\n}\n\nexport function wireToGraph(wire: IWire): IWireGraph {\n    let isects = new Map<string, IWireGraphNode>();\n\n    function getNode(pos: Vec3, ref?: IElRef) {\n        let key = `${pos.x.toFixed(5)},${pos.y.toFixed(5)}`;\n        let node = getOrAddToMap(isects, key, () => ({ id: isects.size, pos, edges: [] }));\n        node.ref = node.ref || ref;\n        return node;\n    }\n\n    for (let seg0 of wire.segments) {\n        let node0 = getNode(seg0.p0, seg0.comp0Ref);\n        let node1 = getNode(seg0.p1, seg0.comp1Ref);\n\n        let nodesOnLine: { t: number, node: IWireGraphNode }[] = [\n            { t: 0, node: node0 },\n            { t: 1, node: node1 },\n        ];\n\n        for (let seg1 of wire.segments) {\n            if (seg0 === seg1) {\n                continue;\n            }\n\n            for (let pt of [seg1.p0, seg1.p1]) {\n                if (segAttachedToInner(seg0, pt)) {\n                    nodesOnLine.push({\n                        t: segmentNearestT(seg0.p0, seg0.p1, pt),\n                        node: getNode(pt),\n                    });\n                }\n            }\n        }\n\n        nodesOnLine.sort((a, b) => a.t - b.t);\n\n        for (let i = 0; i < nodesOnLine.length - 1; i++) {\n            let nodeA = nodesOnLine[i];\n            let nodeB = nodesOnLine[i + 1];\n            if (nodeA.node !== nodeB.node) {\n                nodeA.node.edges.push(nodeB.node.id);\n                nodeB.node.edges.push(nodeA.node.id);\n            }\n        }\n    }\n\n    return {\n        id: wire.id,\n        nodes: Array.from(isects.values()),\n    };\n}\n\nexport function graphToWire(graph: IWireGraph): IWire {\n\n    let segments: ISegment[] = [];\n\n    for (let node0 of graph.nodes) {\n        for (let nodeId of node0.edges) {\n            let node1 = graph.nodes[nodeId];\n            if (node1.id > node0.id) {\n                segments.push({ p0: node0.pos, p1: node1.pos, comp0Ref: node0.ref, comp1Ref: node1.ref });\n            }\n        }\n    }\n\n    return {\n        id: graph.id,\n        segments,\n    };\n}\n\nexport const EPSILON = 0.001;\n\nexport function fixWire(wireGraph: IWireGraph) {\n\n    checkWires([wireGraph], 'fixWire (pre-segment split)');\n\n    let wire = graphToWire(wireGraph);\n    let segs = wire.segments.map(a => ({ ...a }));\n\n    let segIdsToRemove = new Set<number>();\n\n    for (let seg0Idx = 0; seg0Idx < wire.segments.length; seg0Idx++) {\n        let seg0 = segs[seg0Idx];\n\n        for (let seg1Idx = 0; seg1Idx < wire.segments.length; seg1Idx++) {\n            let seg1 = segs[seg1Idx];\n\n            if (seg0 === seg1) {\n                continue;\n            }\n\n            if ((seg0.p0.dist(seg1.p0) < EPSILON && seg0.p1.dist(seg1.p1) < EPSILON) ||\n                (seg0.p0.dist(seg1.p1) < EPSILON && seg0.p1.dist(seg1.p0) < EPSILON)) {\n                // seg0 and seg1 are the same => remove seg1\n                if (seg1Idx > seg0Idx) {\n                    segIdsToRemove.add(seg1Idx);\n                }\n                continue;\n            } else if (segAttachedTo(seg0, seg1.p0)) {\n                if (segAttachedTo(seg0, seg1.p1)) {\n                    // seg1 is inside seg0 => remove seg1\n                    segIdsToRemove.add(seg1Idx);\n                } else if (segAttachedTo(seg1, seg0.p0)) {\n                    // seg1 is to the left of seg0 => truncate seg1 to seg0.p0\n                    seg1.p0 = seg0.p0;\n                } else if (segAttachedTo(seg1, seg0.p1)) {\n                    // seg1 is to the right of seg0 => truncate seg1 to seg0.p1\n                    seg1.p0 = seg0.p1;\n                }\n            }\n        }\n    }\n\n    let newSegs = segs\n        .filter((_, i) => !segIdsToRemove.has(i))\n        .filter(s => s.p0.distSq(s.p1) > EPSILON * EPSILON);\n    wire = assignImm(wire, { segments: newSegs });\n\n    let graph = wireToGraph(wire);\n\n    iterWireGraphSegments(graph, (segNode0, segNode1) => {\n        for (let node of graph.nodes) {\n            if (node === segNode0 || node === segNode1) {\n                continue;\n            }\n\n            if (segAttachedTo({ p0: segNode0.pos, p1: segNode1.pos }, node.pos)) {\n                // node is on the segment => segment needs to be split\n                // i.e. edge between segNode0 and segNode1 needs to be removed, and new edges added\n                wireUnlinkNodes(segNode0, segNode1);\n                wireLinkNodes(segNode0, node);\n                wireLinkNodes(node, segNode1);\n            }\n        }\n    });\n\n    let nodesRemoved = false;\n    for (let node of graph.nodes) {\n        // check directions out of each node\n        // if two edges are colinear, merge them\n        if (node.edges.length !== 2) {\n            continue;\n        }\n        let node0 = graph.nodes[node.edges[0]];\n        let node1 = graph.nodes[node.edges[1]];\n        let dir0 = node0.pos.sub(node.pos).normalize();\n        let dir1 = node1.pos.sub(node.pos).normalize();\n        if (dir0.dot(dir1) < -1 + EPSILON) {\n            // colinear\n            wireUnlinkNodes(node0, node);\n            wireUnlinkNodes(node1, node);\n            wireLinkNodes(node0, node1);\n            nodesRemoved = true;\n        }\n    }\n\n    if (nodesRemoved) {\n        graph = repackGraphIds(graph);\n    }\n\n    return graph;\n}\n\nexport function wireLinkNodes(node0: IWireGraphNode, node1: IWireGraphNode) {\n    if (!node0.edges.includes(node1.id)) {\n        node0.edges.push(node1.id);\n    }\n    if (!node1.edges.includes(node0.id)) {\n        node1.edges.push(node0.id);\n    }\n}\n\nexport function wireUnlinkNodes(node0: IWireGraphNode, node1: IWireGraphNode) {\n    node0.edges = node0.edges.filter(e => e !== node1.id);\n    node1.edges = node1.edges.filter(e => e !== node0.id);\n}\n\nexport function filterImm<T>(arr: T[], pred: (t: T) => boolean) {\n    let newArr = arr.filter(pred);\n    return newArr.length === arr.length ? arr : newArr;\n}\n\nexport function segAttachedTo(seg: ISegment, pt: Vec3) {\n    let nearest = segmentNearestPoint(seg.p0, seg.p1, pt);\n    return nearest.distSq(pt) < EPSILON * EPSILON;\n}\n\nexport function segAttachedToInner(seg: ISegment, pt: Vec3) {\n    if (!segAttachedTo(seg, pt)) {\n        return false;\n    }\n    let t = segmentNearestT(seg.p0, seg.p1, pt);\n    return t > EPSILON && t < 1.0 - EPSILON;\n}\n\nexport function segsTouching(seg1: ISegment, seg2: ISegment) {\n    return segAttachedTo(seg1, seg2.p0) || segAttachedTo(seg1, seg2.p1) || segAttachedTo(seg2, seg1.p0) || segAttachedTo(seg2, seg1.p1);\n}\n\n\nfunction snapToGrid(v: Vec3) {\n    return v.round();\n}\n\n","import { isNil, hasFlag, assignImm } from \"@/src/utils/data\";\nimport { BoundingBox3d, Vec3 } from \"@/src/utils/vector\";\nimport { PortType, IComp, ICompPort, ICompRenderArgs, IExeComp, IExePhase, IExePort, IExeRunArgs, IoDir, IEditSnapshot, ILibraryItem, ISchematic } from \"../CpuModel\";\n\nexport interface ICompBuilderArgs {\n\n}\n\nexport interface IResetOptions {\n    hardReset: boolean; // reset everything including ROMs (that would usually be expected to be persistent over device restarts)\n}\n\n// this isn't that great!\n// need to be able to adjust size, name, ports based on config, where the config is per-instance\n// Also, our IComp object should probably just contain the IExeComp stuff\n\n/*\nWant to think about about what an ICompDef/IComp looks like for a sub-component\n\n * A component may have its own exe model, as well as a sub-component tree, where we execute the\n   efficient one.\n* Also have a way to compare the two execution models.\n* But not important!\n* Have a couple of modes:\n  - when building the model, place ports into the _internal_ object\n    - and these will be placed on the external object\n  - or the other way around: add a port externally, and it will be added internally\n  - but there's some set, a mapping between them, and ports have names/ids\n* Either way, shape/position of nodes is all adjustable by the config (& user)\n\n* I think we have some standard config args (size, rotation, port list) that we apply to a component\n  - So our current plan is probably OK\n\n* What about the comp library? Does an ICompDef map to a particular user-defined type of a component,\n  or is there one ICompDef for all user-defined comps?\n\n  - So it has a common set of functions, but we want a unique defId, name, size, ports etc\n  - Also I guess the args will contain the inner/sub-comps\n\n* What about import/export\n  - Want each layout & sub-layout to be defined in a list of layouts, with refs by defId\n\n* Have a typical issue of managing the library: if we import something with a sub-layout that doesn't\n  match one in the library, what do we do? Kind of want a versioning system here, so we add an additional\n  version of the component to our library, and can optionally modify the \"active\" version (or move it to\n  another library item)\n*/\n\n/*\nSteps: let's create & manage a library of user-defined components.\nStore them somehow, and make them editable in a UI. Probably still local-storage, but should\nadd some weightier load/store system\nEditing is either: editing directly, or within the scope of a tree of components\n\n*/\n\nexport interface ICompDef<T, A = any> {\n    defId: string;\n    altDefIds?: string[]; // so we can safely rename things\n    name: string;\n    size: Vec3;\n    type?: CompDefType; // defaults to BuiltIn\n    ports: ICompPort[] | ((args: A, compDef: ICompDef<T, A>) => ICompPort[]);\n    subLayout?: ISubLayoutArgs;\n\n    initConfig?: (args: ICompBuilderArgs) => A;\n\n    // modify the comp {size, ports} based on the component args\n    applyConfig?: (comp: IComp, args: A) => void;\n\n    // create the exe model for this component. Copy across any relevant data from the comp into the exeComp\n    build?: (builder: ExeCompBuilder<T, A>) => IExeComp<T>;\n\n    // render to the canvas based on the {comp, exeComp} pair (+ other data)\n    render?: (args: ICompRenderArgs<T, A>) => void;\n\n    // render to the DOM based on the {comp, exeComp} pair (+ other data). Suitable for user-interactive components\n    renderDom?: (args: ICompRenderArgs<T, A>) => React.ReactNode;\n\n    // Let render() handle all rendering; don't render a box/name\n    renderAll?: boolean;\n\n    // copy things like memory & registers (not ports) between IExeComp data's (during a regen of the exe model)\n    copyStatefulData?: (src: T, dest: T) => void;\n\n    // action to reset stateful components, typically to 0x00. Option for hard or soft reset. Soft reset is typically\n    // equivalent to a power-down/restart (leaving ROM untouched), while a hard reset includes things like ROMs.\n    reset?: (exeComp: IExeComp<T>, resetOpts: IResetOptions) => void;\n}\n\nexport enum CompDefType {\n    Builtin,\n    UserDefined,\n}\n\nexport interface ISubLayoutArgs {\n    // how do we reference the ports in the sub layout?\n    // maybe have some I/O components that are ports, and have the appropriate id in args\n    // we'll just have to add logic to keep them in sync, but otherwise, the inner port has pos, rot etc,\n    // and the outer port has its own pos\n\n    // how do we create a nice looking sub-layout if we construct from a group of components?\n    // give the inner layout a rectangle that matches the parent group, and put the internal ports just\n    // outside that region\n    // That way, the wires extend naturally, and when it's only partially zoomed in, everything remains the same &\n    // can be easily un-done\n    bb: BoundingBox3d;\n    layout: ISchematic;\n    ports: ISubLayoutPort[];\n}\n\nexport interface ISubLayoutPort {\n    id: string;\n    name: string\n    type: PortType;\n    pos: Vec3;\n    width?: number;\n}\n\nexport class CompLibrary {\n    libraryLookup = new Map<string, ILibraryItem>();\n    constructor() {}\n\n    public addComp(comp: ICompDef<any>) {\n        let item = createLibraryItemFromComp(comp);\n        this.addLibraryItem(item);\n    }\n\n    public addLibraryItem(item: ILibraryItem) {\n        this.libraryLookup.set(item.id, item);\n        for (let altId of item.altIds ?? []) {\n            this.libraryLookup.set(altId, item);\n        }\n    }\n\n    getCompDef(defId: string): ICompDef<any> | null {\n        let item = this.libraryLookup.get(defId);\n        if (!item || !item.compDef) {\n            return null;\n        }\n        return item.compDef;\n    }\n\n    create<A = undefined>(defId: string, cfg?: A | undefined): IComp<A> {\n        let compDef = this.getCompDef(defId);\n        if (!compDef) {\n            return {\n                id: '',\n                defId,\n                name: '<unknown>',\n                args: cfg!,\n                ports: [],\n                pos: new Vec3(0, 0),\n                size: new Vec3(4, 4),\n                resolved: false,\n                hasSubSchematic: false,\n            };\n        }\n\n        let args = compDef.initConfig ? compDef.initConfig({}) : null;\n\n        if (args && cfg) {\n            args = assignImm(args, cfg);\n        }\n\n        let comp: IComp = {\n            id: '',\n            defId: compDef.defId,\n            name: compDef.name,\n            ports: compDef.ports instanceof Function ? compDef.ports(args, compDef) : compDef.ports,\n            pos: new Vec3(0, 0),\n            size: compDef.size,\n            args,\n            resolved: true,\n            hasSubSchematic: !!compDef.subLayout,\n        };\n        compDef.applyConfig?.(comp, comp.args);\n\n        return comp;\n    }\n\n    updateCompFromDef(comp: IComp) {\n        let compDef = this.getCompDef(comp.defId);\n        if (!compDef) {\n            return;\n        }\n        comp.name ??= compDef.name;\n        comp.ports = compDef.ports instanceof Function ? compDef.ports(comp.args, compDef) : compDef.ports;\n        comp.size = compDef.size;\n        comp.hasSubSchematic = !!compDef.subLayout;\n        compDef.applyConfig?.(comp, comp.args);\n    }\n\n    updateAllCompsFromDefs(comps: IComp[]) {\n        for (let comp of comps) {\n            this.updateCompFromDef(comp);\n        }\n        return comps;\n    }\n\n    build(comp: IComp): IExeComp<any> {\n        let compDef = this.getCompDef(comp.defId);\n        if (compDef?.build) {\n            let builder = new ExeCompBuilder<any>(comp);\n            return compDef.build(builder);\n        }\n        return buildDefault(comp);\n    }\n}\n\nexport function createLibraryItemFromComp(compDef: ICompDef<any>): ILibraryItem {\n    return {\n        id: compDef.defId,\n        altIds: compDef.altDefIds,\n        name: compDef.name,\n        compDef: compDef,\n    };\n}\n\nexport class ExeCompBuilder<T, A=any> {\n    ports: IExePort[] = [];\n    portNameToIdx = new Map<string, number>();\n    phases: IExePhase[] = [];\n    seenLatch = false;\n    valid = true;\n    data: T | null = null;\n\n    constructor(\n        public comp: IComp<A>,\n    ) {\n        this.ports = comp.ports.map<IExePort>((node, i) => {\n            return {\n                portIdx: i,\n                netIdx: -1,\n                ioEnabled: true,\n                ioDir: IoDir.None,\n                dataUsed: true,\n                type: node.type ?? PortType.In,\n                value: 0,\n                width: node.width ?? 1,\n            };\n        });\n\n        for (let i = 0; i < comp.ports.length; i++) {\n            this.portNameToIdx.set(comp.ports[i].id, i);\n        }\n    }\n\n    public getPort(id: string): IExePort {\n        let portIdx = this.portNameToIdx.get(id);\n        if (isNil(portIdx)) {\n            let validPortsMsg = 'Valid ports are [' + Array.from(this.portNameToIdx.keys()).join(', ') + ']';\n            throw new Error(`Port ${id} not found on component ${this.comp.name} (${this.comp.id}). ` + validPortsMsg);\n        }\n        return this.ports[portIdx];\n    }\n\n    public createExternalPort(id: string, type: PortType, width: number): IExePort {\n        let portIdx = this.ports.length;\n        this.portNameToIdx.set(id, portIdx);\n        let newPort: IExePort = {\n            portIdx,\n            netIdx: -1,\n            dataUsed: true,\n            ioEnabled: true,\n            ioDir: IoDir.None,\n            type: type,\n            value: 0,\n            width: width,\n        };\n        this.ports.push(newPort);\n        return newPort;\n    }\n\n    public addData(data: T): T {\n        this.data = data;\n        return data;\n    }\n\n    public addLatchedPhase(func: (comp: IExeComp<T>, args: IExeRunArgs) => void, inPorts: IExePort[], outPorts: IExePort[]): ExeCompBuilder<T> {\n        return this.addPhase(func, inPorts, outPorts, true);\n    }\n\n    public addPhase(func: (comp: IExeComp<T>, args: IExeRunArgs) => void, inPorts: IExePort[], outPorts: IExePort[], isLatch: boolean = false): ExeCompBuilder<T> {\n        if (this.seenLatch) {\n            throw new Error(`Cannot add phase after latch phase`);\n        }\n        if (isLatch) {\n            this.seenLatch = true;\n        }\n        this.phases.push({\n            readPortIdxs: inPorts.map(a => a.portIdx),\n            writePortIdxs: outPorts.map(a => a.portIdx),\n            func,\n            isLatch,\n        });\n        return this;\n    }\n\n    public build(data?: T): IExeComp<T> {\n        return {\n            comp: this.comp,\n            data: this.data ?? data!,\n            phases: this.phases,\n            ports: this.ports,\n            compFullId: this.comp.id,\n            idx: -1,\n        };\n    }\n}\n\n\nexport function buildDefault(comp: IComp): IExeComp<{}> {\n    let builder = new ExeCompBuilder<{}>(comp);\n    builder.valid = false;\n    let data = {};\n    let inPorts = builder.ports.filter(p => hasFlag(p.type, PortType.In));\n    let outPorts = builder.ports.filter(p => hasFlag(p.type, PortType.Out));\n    for (let port of [...inPorts, ...outPorts]) {\n        port.ioEnabled = false;\n    }\n    builder.addPhase(defaultPhase0, inPorts, outPorts);\n    return builder.build(data);\n}\n\nfunction defaultPhase0(comp: IExeComp<{}>) {\n    // do nothing\n}\n","import React, { memo } from \"react\";\nimport { StateSetter, assignImm, hasFlag } from \"@/src/utils/data\";\nimport { Vec3 } from \"@/src/utils/vector\";\nimport { IComp, IEditContext, IEditorState, IExeComp, IExePort, PortType } from \"../CpuModel\";\nimport { ICompBuilderArgs, ICompDef } from \"./CompBuilder\";\nimport { CheckboxMenuTitle, CompRectBase, ConfigMenu, MenuRow } from \"./RenderHelpers\";\nimport { editComp, editCompConfig, useEditorContext, useViewLayout } from \"../Editor\";\nimport { HexValueEditor, HexValueInputType, clampToSignedWidth } from \"../displayTools/HexValueEditor\";\nimport { KeyboardOrder, isKeyWithModifiers, useGlobalKeyboard } from \"@/src/utils/keyboard\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEllipsis, faEllipsisVertical } from \"@fortawesome/free-solid-svg-icons\";\nimport clsx from \"clsx\";\nimport { IPointerEvent, useCombinedMouseTouchDrag } from \"@/src/utils/pointer\";\nimport { StringEditor } from \"../displayTools/StringEditor\";\nimport { palette } from \"../palette\";\nimport { CursorDragOverlay } from \"@/src/utils/CursorDragOverlay\";\nimport { makeCanvasFont } from \"../CanvasRenderHelpers\";\n\nexport enum PortPlacement {\n    Right,\n    Bottom,\n    Left,\n    Top,\n}\n\n\nexport interface ICompPortConfig {\n    portId: string;\n    name: string;\n    w: number;\n    h: number;\n    portPos: PortPlacement;\n    type: PortType;\n    bitWidth: number;\n    signed: boolean;\n    inputOverride: boolean;\n    inputValueOverride: number;\n    valueMode: HexValueInputType;\n}\n\nexport interface ICompPortData {\n    port: IExePort;\n    externalPort: IExePort;\n    externalPortBound: boolean;\n    value: number;\n}\n\nexport function portPlacementToPos(portPos: PortPlacement, w: number, h: number) {\n    let midXSnapped = Math.floor(w / 2);\n    let midYSnapped = Math.floor(h / 2);\n\n    switch (portPos) {\n        case PortPlacement.Right: return new Vec3(w, midYSnapped);\n        case PortPlacement.Bottom: return new Vec3(midXSnapped, h);\n        case PortPlacement.Left: return new Vec3(0, midYSnapped);\n        case PortPlacement.Top: return new Vec3(midXSnapped, 0);\n        default: return new Vec3(w, midYSnapped);\n    }\n}\n\nexport const compPortDefId = 'core/comp/port';\n\nexport function createCompIoComps(args: ICompBuilderArgs) {\n\n    let w = 6;\n    let h = 6;\n    let compPort: ICompDef<ICompPortData, ICompPortConfig> = {\n        defId: 'comp/port',\n        name: \"Port\",\n        size: new Vec3(w, h),\n        ports: (args, compDef) => {\n\n            let internalPortDir = switchPortDir(args.type);\n            let pos = portPlacementToPos(args.portPos, args.w, args.h);\n\n            return [\n                { id: 'a', name: '', pos, type: internalPortDir, width: args.bitWidth },\n            ];\n        },\n        initConfig: () => ({\n            portId: '',\n            name: '',\n            w: 6,\n            h: 6,\n            type: PortType.Out,\n            portPos: PortPlacement.Right,\n            bitWidth: 1,\n            signed: false,\n            valueMode: HexValueInputType.Dec,\n            inputOverride: false,\n            inputValueOverride: 0,\n        }),\n        applyConfig(comp, args) {\n            comp.size = new Vec3(args.w, args.h);\n        },\n        build: (builder) => {\n            let args = builder.comp.args;\n            let isInput = hasFlag(args.type, PortType.In);\n\n            let data = builder.addData({\n                port: builder.getPort('a'),\n                externalPort: builder.createExternalPort('_b', args.type, args.bitWidth),\n                externalPortBound: false,\n                value: isInput && args.inputOverride ? args.inputValueOverride : 0,\n            });\n\n            if (isInput) {\n                builder.addPhase(({ data }) => {\n                    if (data.externalPortBound) {\n                        data.value = data.externalPort.value;\n                    }\n                    data.port.value = data.value;\n                    data.port.ioEnabled = true;\n                }, [data.externalPort], [data.port]);\n\n            } else {\n                builder.addPhase(({ data }) => {\n                    data.value = data.port.value;\n                    if (data.externalPortBound) {\n                        data.externalPort.value = data.value;\n                    }\n                    data.port.ioEnabled = true;\n                }, [data.port], [data.externalPort]);\n            }\n\n            return builder.build();\n        },\n        renderAll: true,\n        render: ({ comp, ctx, cvs, exeComp }) => {\n            ctx.save();\n\n            let isInput = hasFlag(comp.args.type, PortType.In);\n            ctx.fillStyle = isInput ? palette.portInputBg : palette.portOutputBg;\n            ctx.beginPath();\n            let p = comp.pos;\n            let s = comp.size;\n            ctx.roundRect(p.x, p.y, s.x, s.y, s.y / 2);\n\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n\n            let scale = Math.min(cvs.scale, 1/15);\n\n            ctx.fillStyle = 'black';\n            ctx.font = makeCanvasFont(scale * 14);\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'top';\n            ctx.fillText(comp.args.name, p.x + s.x / 2, p.y + s.y + 0.3);\n\n            ctx.restore();\n        },\n        renderDom: ({ comp, exeComp, ctx, styles, isActive, editCtx }) => {\n            return <PortEditor editCtx={editCtx} comp={comp} exeComp={exeComp} isActive={isActive} />;\n        },\n    };\n\n    return [compPort];\n}\n\nexport function switchPortDir(dir: PortType) {\n    let newDir = dir & ~(PortType.In | PortType.Out);\n\n    if (hasFlag(dir, PortType.In)) {\n        newDir |= PortType.Out;\n    }\n    if (hasFlag(dir, PortType.Out)) {\n        newDir |= PortType.In;\n    }\n\n    return newDir;\n}\n\nfunction makeEditFunction<T, A>(setEditorState: StateSetter<IEditorState>, editCtx: IEditContext, comp: IComp<T>, updateFn: (value: A, prev: T) => Partial<T>) {\n    return (end: boolean, value: A) => {\n        setEditorState(editCompConfig(editCtx, end, comp, a => assignImm(a, updateFn(value, a))));\n    };\n}\n\nconst PortEditor: React.FC<{\n    editCtx: IEditContext,\n    comp: IComp<ICompPortConfig>,\n    exeComp: IExeComp<ICompPortData>,\n    isActive: boolean,\n}> = memo(function PortEditor({ editCtx, comp, exeComp, isActive }) {\n    let { setEditorState } = useEditorContext();\n\n    let editIsOverriden = makeEditFunction(setEditorState, editCtx, comp, (value: boolean) => ({ inputOverride: value }));\n    let editBitWidth = makeEditFunction(setEditorState, editCtx, comp, (value: number) => ({ bitWidth: value, inputValueOverride: clampToSignedWidth(comp.args.inputValueOverride ?? 0, value, comp.args.signed) }));\n    let editSigned = makeEditFunction(setEditorState, editCtx, comp, (value: boolean) => ({ signed: value, inputValueOverride: clampToSignedWidth(comp.args.inputValueOverride ?? 0, comp.args.bitWidth, value) }));\n    let editPortType = makeEditFunction(setEditorState, editCtx, comp, (isInputPort: boolean, prev) => {\n            let type = prev.type;\n            if (isInputPort) {\n                type |= PortType.In;\n                type &= ~PortType.Out;\n            } else {\n                type |= PortType.Out;\n                type &= ~PortType.In;\n            }\n            return { type };\n    });\n\n    function editValueOverride(end: boolean, value: number, valueMode: HexValueInputType) {\n        setEditorState(editCompConfig(editCtx, end, comp, a => assignImm(a, { inputValueOverride: clampToSignedWidth(value, a.bitWidth, a.signed), valueMode })));\n    }\n\n    let isInput = hasFlag(comp.args.type, PortType.In);\n    let isInputOverride = comp.args.inputOverride;\n    let isBound = exeComp?.data.externalPortBound ?? false;\n\n    return <>\n        <CompRectBase comp={comp} className={\"\"} hideHover={true}>\n            {isInput && <HexValueEditor\n                className=\"absolute inset-0 px-2\"\n                inputType={comp.args.valueMode}\n                value={isBound ? exeComp.data.value : comp.args.inputValueOverride}\n                update={editValueOverride}\n                minimalBackground\n                readonly={isBound}\n                inputClassName=\"text-center\"\n                maxBits={comp.args.bitWidth}\n                padBits={comp.args.bitWidth}\n                signed={comp.args.signed}\n                hidePrefix\n            />}\n            {!isInput && <HexValueEditor\n                className=\"absolute inset-0 px-2\"\n                value={exeComp?.data.value ?? 0}\n                minimalBackground\n                inputClassName=\"text-center\"\n                update={(end, _val, inputType) => editValueOverride(end, comp.args.inputValueOverride, inputType)}\n                inputType={comp.args.valueMode}\n                padBits={comp.args.bitWidth}\n                signed={comp.args.signed}\n                readonly\n                hidePrefix\n            />}\n            <ConfigMenu className={\"absolute top-[12px] right-[12px]\"}>\n                <MenuRow title={\"Label\"}>\n                    <StringEditor\n                        value={comp.args.name}\n                        update={makeEditFunction(setEditorState, editCtx, comp, (value: string) => ({ name: value }))}\n                    />\n                </MenuRow>\n                <MenuRow title={\"Id\"}>\n                    <StringEditor\n                        className=\"font-mono\"\n                        value={comp.args.portId}\n                        update={makeEditFunction(setEditorState, editCtx, comp, (value: string) => ({ portId: value }))}\n                    />\n                </MenuRow>\n                <MenuRow title={<CheckboxMenuTitle title=\"Input\" value={isInput} update={editPortType} />} />\n                <MenuRow title={<CheckboxMenuTitle title=\"Override Value\" value={isInputOverride} update={editIsOverriden} />} disabled={!isInput}>\n                    <HexValueEditor\n                        inputType={comp.args.valueMode}\n                        value={comp.args.inputValueOverride}\n                        update={editValueOverride}\n                        maxBits={comp.args.bitWidth}\n                        padBits={comp.args.bitWidth}\n                        signed={comp.args.signed}\n                    />\n                </MenuRow>\n                <MenuRow title={\"Bit Width\"}>\n                    <HexValueEditor inputType={HexValueInputType.Dec} hidePrefix value={comp.args.bitWidth} update={editBitWidth} />\n                </MenuRow>\n                <MenuRow title={<CheckboxMenuTitle title=\"Signed\" value={comp.args.signed} update={editSigned} />} />\n            </ConfigMenu>\n        </CompRectBase>\n        {isActive && <PortResizer editCtx={editCtx} comp={comp} />}\n    </>;\n});\n\nexport const PortResizer: React.FC<{\n    editCtx: IEditContext,\n    comp: IComp<{ w: number, h: number, portPos: PortPlacement }>,\n}> = memo(function PortResizer({ editCtx, comp }) {\n\n    let { editorState, setEditorState } = useEditorContext();\n\n    useGlobalKeyboard(KeyboardOrder.Element, ev => {\n        if (isKeyWithModifiers(ev, 'r')) {\n            setEditorState(editCompConfig(editCtx, true, comp, a => assignImm(a, { portPos: (a.portPos + 1) % 4 })));\n            ev.preventDefault();\n            ev.stopPropagation();\n        }\n    });\n\n    let scale = editorState.mtx.a;\n\n    function handleResize(end: boolean, pos: Vec3, size: Vec3) {\n        setEditorState(editComp(editCtx, end, comp, a => assignImm(a, {\n            pos,\n            args: assignImm(a.args, { w: size.x, h: size.y }),\n            size,\n        })));\n    }\n\n    return <div className=\"absolute origin-top-left\" style={{ transform: `translate(${comp.pos.x}px, ${comp.pos.y}px) scale(${1/scale})`, width: comp.size.x * scale, height: comp.size.y * scale }}>\n        {[...new Array(4)].map((_, idx) => {\n            return <Gripper key={idx} gripPos={idx} size={comp.size} pos={comp.pos} onResize={handleResize} centerY />;\n        })}\n    </div>;\n});\n\nexport const Gripper: React.FC<{\n    gripPos: PortPlacement,\n    pos: Vec3,\n    size: Vec3,\n    centerY?: boolean,\n    onResize: (end: boolean, pos: Vec3, size: Vec3) => void,\n}> = ({ gripPos, pos, size, onResize, centerY }) => {\n    let { mtx } = useViewLayout();\n    let [el, setEl] = React.useState<HTMLElement | null>(null);\n\n    function evToModel(ev: IPointerEvent) {\n        return mtx.mulVec3Inv(new Vec3(ev.clientX, ev.clientY));\n    }\n\n    let [dragStart, setDragStart] = useCombinedMouseTouchDrag(el, _ev => ({ size, pos }), (ev, ds, end) => {\n        let oldPos = ds.data.pos;\n        let oldSize = ds.data.size;\n        let delta = evToModel(ev).sub(evToModel(ds)).round();\n        let isHoriz = gripPos === PortPlacement.Left || gripPos === PortPlacement.Right;\n\n        if (isHoriz) {\n            delta.y = 0;\n        } else {\n            delta.x = 0;\n        }\n\n        if (gripPos === PortPlacement.Left) {\n            onResize(end, oldPos.add(delta), oldSize.sub(delta));\n        } else if (gripPos === PortPlacement.Right) {\n            onResize(end, oldPos, oldSize.add(delta));\n        } else if (gripPos === PortPlacement.Top) {\n            onResize(end, oldPos.add(delta), oldSize.mulAdd(delta, centerY ? -2 : -1));\n        } else {\n            onResize(end, oldPos.mulAdd(delta, centerY ? -1 : 0), oldSize.mulAdd(delta, centerY ? 2 : 1));\n        }\n        ev.stopPropagation();\n        ev.preventDefault();\n    });\n\n    function handleMouseDown(ev: React.MouseEvent) {\n        setDragStart(ev);\n        ev.preventDefault();\n        ev.stopPropagation();\n    }\n\n    let isVertical = gripPos === PortPlacement.Left || gripPos === PortPlacement.Right;\n    let classNameHit = clsx(\n        \"group absolute pointer-events-auto flex items-center justify-center\",\n        isVertical ? \"cursor-ew-resize my-auto top-0 bottom-0 h-12 w-6\" : \"cursor-ns-resize mx-auto left-0 right-0 h-6 w-12\",\n        gripPos === PortPlacement.Left && \"left-0 -translate-x-1/2\",\n        gripPos === PortPlacement.Right && \"right-0 translate-x-1/2\",\n        gripPos === PortPlacement.Top && \"top-0 -translate-y-1/2\",\n        gripPos === PortPlacement.Bottom && \"bottom-0 translate-y-1/2\",\n    );\n\n    let className = clsx(\n        \"bg-blue-200 hover:bg-blue-300 rounded-xs flex items-center justify-center\",\n        isVertical ? \"h-6 w-2\" : \"h-2 w-6\",\n    );\n\n    return <div className={classNameHit} ref={setEl} onMouseDown={handleMouseDown}>\n        <div className={className}>\n            <FontAwesomeIcon icon={isVertical ? faEllipsisVertical : faEllipsis} className=\"text-md text-white group-hover:text-gray-100\" />\n        </div>\n        {dragStart && <CursorDragOverlay className={isVertical ? \"cursor-ew-resize\" : \"cursor-ns-resize\"} /> }\n    </div>;\n}\n","import { Vec3 } from \"@/src/utils/vector\";\nimport { PortType, IExeComp, IExePort, ICompRenderArgs } from \"../CpuModel\";\nimport { ICompBuilderArgs, ICompDef } from \"./CompBuilder\"\nimport { registerOpts, regValToStr } from \"./RenderHelpers\";\nimport { FontType, makeCanvasFont } from \"../CanvasRenderHelpers\";\n\nexport interface ICompDataRegFile {\n    inCtrlPort: IExePort;\n    outAPort: IExePort;\n    outBPort: IExePort;\n    inDataPort: IExePort;\n\n    file: Uint32Array;\n\n    writeEnabled: boolean;\n    writeReg: number;\n    writeData: number;\n\n    readAReg: number; // -1 means no read\n    readBReg: number;\n}\n\nexport interface ICompDataSingleReg {\n    outPort: IExePort;\n    inPort: IExePort;\n    value: number;\n}\n\nexport function createRegisterComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let w = 40;\n    let reg32: ICompDef<ICompDataRegFile> = {\n        defId: 'riscv/reg32',\n        altDefIds: ['reg32Riscv'],\n        name: \"RISCV Registers\",\n        size: new Vec3(w, 66),\n        ports: [\n            { id: 'ctrl', name: 'Ctrl', pos: new Vec3(4, 0), type: PortType.In | PortType.Ctrl, width: 3 * 6 },\n            { id: 'in', name: 'In', pos: new Vec3(0, 3), type: PortType.In, width: 32 },\n            { id: 'outA', name: 'A', pos: new Vec3(w, 3), type: PortType.Out, width: 32 },\n            { id: 'outB', name: 'B', pos: new Vec3(w, 6), type: PortType.Out, width: 32 },\n        ],\n        build: (builder) => {\n            let data = builder.addData({\n                inCtrlPort: builder.getPort('ctrl'),\n                inDataPort: builder.getPort('in'),\n                outAPort: builder.getPort('outA'),\n                outBPort: builder.getPort('outB'),\n\n                file: new Uint32Array(32),\n\n                writeEnabled: false,\n                writeReg: 0,\n                writeData: 0,\n                readAReg: -1,\n                readBReg: -1,\n            });\n            builder.addPhase(regFilePhase0, [data.inCtrlPort], [data.outAPort, data.outBPort]);\n            builder.addPhase(regFilePhase1, [data.inCtrlPort, data.inDataPort], []);\n            builder.addLatchedPhase(regFilePhase2Latch, [], []);\n            return builder.build(data);\n        },\n        render: renderRegisterFile,\n        copyStatefulData: (src, dest) => {\n            dest.file.set(src.file);\n        },\n        reset: (comp) => {\n            comp.data.file.fill(0);\n        },\n    };\n\n    let regSingle: ICompDef<ICompDataSingleReg> = {\n        defId: 'flipflop/reg1',\n        altDefIds: ['reg1'],\n        name: \"Register\",\n        size: new Vec3(40, 6),\n        ports: [\n            { id: 'in', name: 'I', pos: new Vec3(0, 3), type: PortType.In, width: 32 },\n            { id: 'out', name: 'O', pos: new Vec3(w, 3), type: PortType.Out, width: 32 },\n        ],\n        build: (builder) => {\n            let data = builder.addData({\n                inPort: builder.getPort('in'),\n                outPort: builder.getPort('out'),\n                value: 0,\n            });\n            builder.addPhase(({ data }) => {\n                let outPort = data.outPort;\n                outPort.value = data.value;\n            }, [], [data.outPort]);\n\n            builder.addLatchedPhase(({ data }) => {\n                data.value = data.inPort.value;\n            }, [data.inPort], []);\n            return builder.build(data);\n        },\n        copyStatefulData: (src, dest) => {\n            dest.value = src.value;\n        },\n        reset: (comp) => {\n            comp.data.value = 0;\n        },\n        render: renderPc,\n    };\n\n    return [reg32, regSingle];\n}\n\n// inCtrl bits ((1 + 5) * 3 = 18 bits)\n\n// phase0 reads\nfunction regFilePhase0({ data }: IExeComp<ICompDataRegFile>) {\n    let { inCtrlPort, outAPort, outBPort, file } = data;\n    let ctrl = inCtrlPort.value;\n    let outBitsA = (ctrl >> (1 + 0)) & 0x1f;\n    let outBitsB = (ctrl >> (1 + 6)) & 0x1f;\n\n    let outAEnabled = ctrl & 0b1;\n    let outBEnabled = (ctrl >> 6) & 0b1;\n\n    outAPort.ioEnabled = !!outAEnabled;\n    outBPort.ioEnabled = !!outBEnabled;\n    outAPort.value = outAEnabled ? file[outBitsA] : 0;\n    outBPort.value = outBEnabled ? file[outBitsB] : 0;\n\n    data.readAReg = outAEnabled ? outBitsA : -1;\n    data.readBReg = outBEnabled ? outBitsB : -1;\n}\n\n// phase1 writes\nfunction regFilePhase1({ data }: IExeComp<ICompDataRegFile>) {\n    let ctrl = data.inCtrlPort.value;\n    let inData = data.inDataPort.value;\n\n    let inBits = (ctrl >> (1 + 12)) & 0x1f;\n    let inEnabled = (ctrl >> 12) & 0b1;\n\n    data.writeEnabled = !!inEnabled;\n    data.writeReg = inBits;\n    data.writeData = inData;\n    data.inDataPort.ioEnabled = !!inEnabled && inBits !== 0;\n}\n\n// phase2 latches\nfunction regFilePhase2Latch({ data }: IExeComp<ICompDataRegFile>) {\n    if (data.writeEnabled && data.writeReg !== 0) {\n        data.file[data.writeReg] = data.writeData;\n    }\n}\n\nexport const riscvRegNames = [\n    'zero', 'ra', 'sp', 'gp', 'tp',\n    't0', 't1', 't2',\n    's0', 's1',\n    'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7',\n    's2', 's3', 's4', 's5', 's6', 's7', 's8', 's9', 's10', 's11',\n    't3', 't4', 't5', 't6'\n];\n\nexport const riscvInColor = '#ee39';\nexport const riscvOutAColor = '#3f39';\nexport const riscvOutBColor = '#33f9';\n\n// 32bit pc\nfunction renderPc({ ctx, comp, exeComp, styles }: ICompRenderArgs<ICompDataSingleReg>) {\n    let padX = 1.2;\n    let padY = 0.8;\n    let pcValue = exeComp?.data.value ?? 0;\n\n    let boxSize =  new Vec3(comp.size.x - 2 * padX, styles.lineHeight);\n    let boxOffset = new Vec3(padX, comp.size.y / 2 - boxSize.y / 2);\n    ctx.beginPath();\n    ctx.rect(comp.pos.x + boxOffset.x, comp.pos.y + boxOffset.y, boxSize.x, boxSize.y);\n    ctx.fillStyle = \"#fff\";\n    ctx.strokeStyle = \"#0004\";\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.font = makeCanvasFont(styles.fontSize, FontType.Mono);\n    ctx.textAlign = 'end';\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = \"#000\";\n    let xRight = comp.pos.x + boxOffset.x + boxSize.x - registerOpts.innerPadX;\n    let yMid = comp.pos.y + boxOffset.y + boxSize.y / 2;\n    let currText = regValToStr(pcValue);\n    ctx.fillText(currText, xRight, yMid);\n\n    ctx.textAlign = 'start';\n    ctx.fillText('pc', comp.pos.x + padX + registerOpts.innerPadX, yMid);\n\n    let xNewRight = xRight - ctx.measureText(currText).width - padX * 3;\n\n    ctx.textAlign = 'end';\n    let newValStr = regValToStr(exeComp?.data.inPort.value ?? 0);\n    ctx.fillStyle = \"#44c9\";\n    ctx.fillText(newValStr, xNewRight, yMid);\n}\n\n\n\n// x0-x31 32bit registers, each with names\nfunction renderRegisterFile({ ctx, comp, exeComp, styles }: ICompRenderArgs<ICompDataRegFile, {}>) {\n    let padX = 1.2;\n    let padY = 1.0;\n    let lineHeight = styles.lineHeight; // (comp.size.y - padY * 2) / 32;\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(comp.pos.x, comp.pos.y, comp.size.x, comp.size.y);\n    ctx.clip();\n\n    for (let i = 0; i < 32; i++) {\n        let regValue = exeComp?.data.file[i] ?? 0;\n\n        let boxSize = new Vec3(comp.size.x, lineHeight).sub(new Vec3(padX * 2));\n        let boxOffset = new Vec3(padX, padY + lineHeight * i);\n\n        ctx.beginPath();\n        ctx.rect(comp.pos.x + boxOffset.x, comp.pos.y + boxOffset.y, boxSize.x, boxSize.y);\n        ctx.fillStyle = i === 0 ? \"#ddd\" : \"#fff\";\n        ctx.strokeStyle = \"#0004\";\n        ctx.fill();\n        ctx.stroke();\n\n        // draw transparent circle on upper right (or lower right for B)\n        let drawReadCircle = (xStart: number, xEnd: number, color: string) => {\n            let r = 4 / 10;\n            ctx.beginPath();\n            (ctx as any).roundRect(xStart, comp.pos.y + boxOffset.y + 0.2, xEnd - xStart, boxSize.y - 0.4, r);\n            ctx.fillStyle = color;\n            ctx.fill();\n        };\n\n        ctx.font = makeCanvasFont(styles.fontSize, FontType.Mono);\n        ctx.textAlign = 'end';\n        ctx.textBaseline = \"middle\";\n\n        let yMid = comp.pos.y + padY + lineHeight * (i + 0.5);\n\n        let regCurrStr = regValToStr(regValue);\n\n        let textWidth = ctx.measureText(regCurrStr).width;\n        let xRight = comp.pos.x + boxOffset.x + boxSize.x - registerOpts.innerPadX;\n        let xLeft = xRight - textWidth;\n\n        let isARead = exeComp?.data.readAReg === i;\n        let isBRead = exeComp?.data.readBReg === i;\n        let xMid = (xLeft + xRight) / 2;\n\n        if (isARead) {\n            drawReadCircle(xLeft, isBRead ? xMid : xRight, riscvOutAColor);\n        }\n        if (isBRead) {\n            drawReadCircle(isARead ? xMid : xLeft, xRight, riscvOutBColor);\n        }\n\n        ctx.fillStyle = (i > 0 && regValue === 0) ? '#0007' : \"#000\";\n        ctx.fillText(regCurrStr, xRight, yMid + 0.1);\n\n        if (i > 0 && exeComp?.data.writeEnabled && i === exeComp.data.writeReg) {\n\n            let writeStr = regValToStr(exeComp.data.writeData);\n            let writeTextWidth = ctx.measureText(writeStr).width;\n            let xNewRight = xRight - textWidth - padX * 3;\n\n            drawReadCircle(xNewRight - writeTextWidth - 0.2, xNewRight + 0.2, riscvInColor);\n\n            ctx.textAlign = 'end';\n            ctx.fillStyle = \"#883f\";\n            ctx.fillText(writeStr, xNewRight, yMid);\n        }\n\n        ctx.fillStyle = \"#000\";\n        let text = riscvRegNames[i];\n        ctx.textAlign = 'start';\n        ctx.fillText(text, comp.pos.x + boxOffset.x + registerOpts.innerPadX, yMid);\n    }\n\n    ctx.restore();\n}\n","import React, { CSSProperties, memo, useState } from \"react\";\nimport { IComp, IEditContext, IEditorState } from \"../CpuModel\";\nimport { ensureSigned32Bit, ensureUnsigned32Bit } from \"./RiscvInsDecode\";\nimport s from './CompStyles.module.scss';\nimport clsx from \"clsx\";\nimport { editCompConfig, useEditorContext, useViewLayout } from \"../Editor\";\nimport { StateSetter, assignImm } from \"@/src/utils/data\";\nimport { Popup, PopupPos } from \"@/src/utils/Portal\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport function regValToStr(val: number) {\n    let valU32 = ensureUnsigned32Bit(val);\n    let valS32 = ensureSigned32Bit(val);\n    let pcHexStr = '0x' + valU32.toString(16).toUpperCase().padStart(8, \"0\");\n    let pcValStr = valS32.toString().padStart(2, \"0\");\n    return pcValStr + '  ' + pcHexStr;\n}\n\nexport const registerOpts = {\n    innerPadX: 0.4,\n}\n\nconst scalePerCell = 15;\n\n/* This div have the size of 15 x comp-rect-size, i.e. if a comp is of size (10, 20), this div will have size (150, 300) */\nexport const CompRectBase: React.FC<{\n    comp: IComp,\n    hideHover?: boolean,\n    className?: string,\n    children?: React.ReactNode,\n}> = memo(function CompRectBase({ comp, className, children, hideHover }) {\n    let { setEditorState } = useEditorContext();\n\n    function handleHover(isHover: boolean) {\n        if (!hideHover) {\n            return;\n        }\n        setEditorState(a => {\n            return assignImm(a, {\n                maskHover: isHover ? comp.id : (a.maskHover === comp.id ? null : a.maskHover),\n            });\n        });\n    }\n\n    return <div\n        className={clsx(s.baseComp, className)} style={createCanvasDivStyle(comp)}\n        onMouseEnter={() => handleHover(true)}\n        onMouseLeave={() => handleHover(false)}\n        onMouseDown={ev => ev.stopPropagation()}\n        onContextMenu={ev => ev.stopPropagation()}\n    >\n\n        {children}\n    </div>;\n});\n\nexport function createCanvasDivStyle(comp: IComp): CSSProperties {\n\n    let scale = scalePerCell;\n\n    return {\n        width: comp.size.x * scale,\n        height: comp.size.y * scale,\n        transform: `translate(${comp.pos.x}px, ${comp.pos.y}px) scale(${1/scale})`,\n    };\n}\n\n/* This div will take the size of the pixels on the screen that covers the comp rect */\nexport const CompRectUnscaled: React.FC<{\n    comp: IComp,\n    hideHover?: boolean,\n    children?: React.ReactNode,\n}> = memo(function CompRectUnscaled({ comp, hideHover, children }) {\n    let viewLayout = useViewLayout();\n\n    let { setEditorState } = useEditorContext();\n\n    function handleHover(isHover: boolean) {\n        if (!hideHover) {\n            return;\n        }\n        setEditorState(a => {\n            return assignImm(a, {\n                maskHover: isHover ? comp.id : (a.maskHover === comp.id ? null : a.maskHover),\n            });\n        });\n    }\n\n    let scale = Math.max(viewLayout.mtx.a, 15);\n\n    return <div\n        className=\"absolute origin-top-left\"\n        onMouseEnter={() => handleHover(true)}\n        onMouseLeave={() => handleHover(false)}\n        style={{\n            transform: `translate(${comp.pos.x}px, ${comp.pos.y}px) scale(${1/scale})`,\n            width: comp.size.x * scale,\n            height: comp.size.y * scale,\n        }}\n    >\n        {children}\n    </div>;\n});\n\nexport function makeEditFunction<T, A>(setEditorState: StateSetter<IEditorState>, editCtx: IEditContext, comp: IComp<T>, updateFn: (value: A, prev: T) => Partial<T>) {\n    return (end: boolean, value: A) => {\n        setEditorState(editCompConfig(editCtx, end, comp, a => assignImm(a, updateFn(value, a))));\n    };\n}\n\nexport const MenuRow: React.FC<{\n    title: React.ReactNode,\n    children?: React.ReactNode,\n    disabled?: boolean,\n}> = ({ title, children, disabled }) => {\n\n    return <div className={clsx(\"flex flex-col mx-4 my-2\", disabled && \"opacity-50\")}>\n        <div className={\"text-sm\"}>{title}</div>\n        <div className={\"\"}>{children}</div>\n    </div>\n};\n\nexport const CheckboxMenuTitle: React.FC<{\n    title: React.ReactNode,\n    value: boolean,\n    update: (end: boolean, value: boolean) => void,\n}> = ({ title, value, update }) => {\n\n    return <label className=\"text-sm flex items-center group cursor-pointer\">\n        <input type=\"checkbox\" className=\"mr-2 relative group-hover:drop-shadow\" checked={value} onChange={e => update(true, e.target.checked)} />\n        {title}\n    </label>;\n};\n\nexport const ConfigMenu: React.FC<{\n    className?: string,\n    children?: React.ReactNode,\n}> = ({ className, children }) => {\n\n    let [btnRef, setBtnRef] = useState<HTMLElement | null>(null);\n\n    let [visible, setVisible] = useState(false);\n\n    return <>\n        <button className={clsx(s.configMenuBtn, className)} ref={setBtnRef} onClick={() => setVisible(true)}>\n            <FontAwesomeIcon icon={faCog} />\n        </button>\n        {visible && <Popup\n            targetEl={btnRef}\n            placement={PopupPos.BottomLeft}\n            className={\"tex-lg shadow-lg border-gray-700 bg-gray-400 rounded\"}\n            onClose={() => setVisible(false)}\n            closeBackdrop={true}>\n\n            {children}\n        </Popup>}\n    </>;\n};\n","import { Vec3 } from \"@/src/utils/vector\";\nimport { IExePort, IExeComp, PortType, ICompRenderArgs, IExeRunArgs } from \"../CpuModel\";\nimport { OpCode, Funct3Op, Funct3OpImm, Funct3Branch, Funct3LoadStore } from \"../RiscvIsa\";\nimport { ICompBuilderArgs, ICompDef } from \"./CompBuilder\";\nimport * as d3Color from 'd3-color';\nimport { riscvRegNames } from \"./Registers\";\nimport { isNotNil } from \"@/src/utils/data\";\nimport { FontType, makeCanvasFont } from \"../CanvasRenderHelpers\";\n\nexport function createRiscvInsDecodeComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let w = 40;\n    let h = 20;\n    let alu: ICompDef<ICompDataInsDecoder> = {\n        defId: 'riscv/insDecode0',\n        altDefIds: ['insDecodeRiscv32_0'],\n        name: \"Instruction Decoder\",\n        size: new Vec3(w, h),\n        ports: [\n            { id: 'ins', name: 'Ins', pos: new Vec3(0, 1), type: PortType.In | PortType.Data, width: 32 },\n\n            { id: 'loadStoreCtrl', name: 'LS', pos: new Vec3(w, 1), type: PortType.Out | PortType.Ctrl, width: 5 },\n            { id: 'addrOffset', name: 'Addr Offset', pos: new Vec3(w, 2), type: PortType.Out | PortType.Addr, width: 32 },\n            { id: 'rhsImm', name: 'RHS Imm', pos: new Vec3(w, 6), type: PortType.Out | PortType.Data, width: 32 },\n            { id: 'rhsSel', name: 'RHS Sel', pos: new Vec3(w, 8), type: PortType.Out | PortType.Ctrl, width: 1 },\n\n            { id: 'pcRegMuxCtrl', name: 'Mux', pos: new Vec3(1, h), type: PortType.Out | PortType.Ctrl, width: 1 },\n            { id: 'regCtrl', name: 'Reg', pos: new Vec3(4, h), type: PortType.Out | PortType.Ctrl, width: 3 * 6 },\n            { id: 'pcAddImm', name: 'PC+Imm', pos: new Vec3(7, h), type: PortType.Out | PortType.Addr, width: 32 },\n            // { id: 'pcOutTristateCtrl', name: 'PC LHS', pos: new Vec3(5, h), type: PortDir.Out | PortDir.Ctrl, width: 1 },\n\n            { id: 'pcBranchCtrl', name: 'PC Branch', pos: new Vec3(11, h), type: PortType.Out | PortType.Ctrl, width: 1 },\n            { id: 'lhsSel', name: 'LHS Sel', pos: new Vec3(15, h), type: PortType.Out | PortType.Ctrl, width: 1 },\n            { id: 'aluCtrl', name: 'ALU', pos: new Vec3(18, h), type: PortType.Out | PortType.Ctrl, width: 5 },\n        ],\n        build: (builder) => {\n            let data = builder.addData({\n                ins: builder.getPort('ins'),\n\n                addrOffset: builder.getPort('addrOffset'),\n                rhsImm: builder.getPort('rhsImm'),\n                regCtrl: builder.getPort('regCtrl'),\n                loadStoreCtrl: builder.getPort('loadStoreCtrl'),\n                aluCtrl: builder.getPort('aluCtrl'),\n                // pcOutTristateCtrl: builder.getPort('pcOutTristateCtrl'),\n                pcRegMuxCtrl: builder.getPort('pcRegMuxCtrl'),\n\n                pcAddImm: builder.getPort('pcAddImm'),\n                lhsSel: builder.getPort('lhsSel'),\n                rhsSel: builder.getPort('rhsSel'),\n\n                pcBranchCtrl: builder.getPort('pcBranchCtrl'),\n            });\n\n            builder.addPhase(insDecoderPhase0, [data.ins], [data.addrOffset, data.rhsImm, data.regCtrl, data.loadStoreCtrl, data.aluCtrl, data.pcRegMuxCtrl, data.lhsSel, data.rhsSel, data.pcAddImm]);\n\n            return builder.build(data);\n        },\n        render: renderInsDecoder,\n    };\n\n    return [alu];\n}\n\nexport interface ICompDataInsDecoder {\n    ins: IExePort;\n\n    addrOffset: IExePort; // will get added to load/store address\n    rhsImm: IExePort; // set's the RHS with an immediate value\n    regCtrl: IExePort; // 3x 6-bit values: [0: outA, 1: outB, 2: inA]\n    loadStoreCtrl: IExePort; // controls load/store\n    aluCtrl: IExePort; // controls ALU, 5-bit value: [0: enable, 1: isBranch, 2: funct3, 3: isSpecial]\n    // pcOutTristateCtrl: IExePort; // 1-bit value, enables PC -> LHS\n    pcRegMuxCtrl: IExePort; // 1-bit value, controls writes to (PC, REG), from (ALU out, PC + x), or swaps them\n\n    pcAddImm: IExePort; // gets added to PC, overrides +4 for jumps\n    lhsSel: IExePort; // 1-bit value, selects between PC & Reg A for LHS\n    rhsSel: IExePort; // 1-bit value, selects between Reg B & Imm for RHS\n    pcBranchCtrl: IExePort; // 1-bit value, selects between PC + 4 and PC + imm\n}\n\nfunction insDecoderPhase0({ data }: IExeComp<ICompDataInsDecoder>, runArgs: IExeRunArgs) {\n    let ins = data.ins.value >>> 0;\n\n    const opCode = ins & 0b1111111;\n    const funct3 = (ins >>> 12) & 0b111;\n    const rd = (ins >>> 7) & 0b11111;\n    const rs1 = (ins >>> 15) & 0b11111;\n    const rs2 = (ins >>> 20) & 0b11111;\n\n    data.regCtrl.value = 0;\n    // 1: ALU out => REG, PC + x => PC\n    // 0: ALU out => PC,  PC + x => REG\n    data.pcRegMuxCtrl.value = 1;\n    data.pcAddImm.value = 0;\n    data.rhsImm.value = 0;\n    data.lhsSel.value = 1; // inverted\n    data.pcBranchCtrl.value = 0;\n    data.aluCtrl.value = 0;\n    data.loadStoreCtrl.value = 0;\n    data.rhsSel.value = 1;\n\n    if (ins === 0) {\n        // console.log('ILLEGAL INSTRUCTION: 0x0');\n        // runArgs.halt = true;\n        // data.willHalt = true;\n        // NOP\n        return;\n    }\n\n    // 0: read LHS, 1: read RHS, 2: write\n    function setRegCtrl(enable: boolean, addr: number, offset: number) {\n        let a = (enable ? 1 : 0) | (addr & 0b11111) << 1;\n        let val = data.regCtrl.value;\n        val = (val & ~(0b111111 << (offset * 6))) | (a << (offset * 6));\n        data.regCtrl.value = val;\n    }\n\n    function setAluCtrl(enable: boolean, isBranch: boolean, funct3: number, isSpecial: boolean) {\n        let val = (enable ? 1 : 0) << 5 |\n                  (isBranch ? 1 : 0) << 4 |\n                  funct3 << 1 |\n                  (isSpecial ? 1 : 0) << 0;\n        data.aluCtrl.value = val;\n    }\n\n    function setLoadStoreCtrl(enable: boolean, isLoad: boolean, funct3: number) {\n        let val = (enable ? 1 : 0) << 0 |\n                  (isLoad ? 1 : 0) << 1 |\n                  funct3 << 2;\n        data.loadStoreCtrl.value = val;\n    }\n\n    // console.log('opcode: ' + opCode.toString(16), ins.toString(2).padStart(32, '0'), OpCode[opCode], Funct3Op[funct3]);\n\n    if (opCode === OpCode.OPIMM || opCode === OpCode.OP) {\n        // console.log('OPIMM/OP', ins.toString(2).padStart(32, '0'));\n        let isArithShiftOrSub = false;\n\n        if (opCode === OpCode.OP) {\n            setRegCtrl(true, rs2, 1); // reg[rs2] => RHS\n            isArithShiftOrSub = ((ins >>> 30) & 0b1) === 0b1;\n        } else if (funct3 === Funct3Op.SLLI || funct3 === Funct3Op.SRLI || funct3 === Funct3Op.SRAI) {\n            data.rhsImm.value = rs2;\n            data.rhsSel.value = 0; // RHS Imm\n        } else {\n            data.rhsImm.value = signExtend12Bit(ins >>> 20);\n            data.rhsSel.value = 0; // RHS Imm\n        }\n\n        setRegCtrl(true, rs1, 0); // reg[rs1] => LHS\n        setAluCtrl(true, false, funct3, isArithShiftOrSub);\n        setRegCtrl(true, rd, 2); // ALU out => reg[rd]\n\n    } else if (opCode === OpCode.LUI) {\n        data.rhsImm.value = signExtend20Bit(ins >>> 12) << 12;\n        data.rhsSel.value = 0; // RHS Imm\n        setRegCtrl(true, 0x0, 0); // 0 => LHS\n        setAluCtrl(true, false, Funct3Op.ADD, false);\n        setRegCtrl(true, rd, 2); // ALU out => reg[rd]\n\n    } else if (opCode === OpCode.AUIPC) {\n        data.rhsImm.value = signExtend20Bit(ins >>> 12) << 12;\n        data.rhsSel.value = 0; // RHS Imm\n        data.lhsSel.value = 0; // PC -> LHS enabled\n        setAluCtrl(true, false, Funct3Op.ADD, false);\n        setRegCtrl(true, rd, 2); // ALU out => reg[rd]\n\n    } else if (opCode === OpCode.JAL) {\n        let offsetRaw = (((ins >>> 21) & 0x3FF) << 0) | // 10 bytes\n                        (((ins >>> 20) & 0x01) << 10) | // 1 byte\n                        (((ins >>> 12) & 0xFF) << 11) | // 8 bytes\n                        (((ins >>> 31) & 0x01) << 19);  // 1 byte\n\n        data.lhsSel.value = 0; // PC -> LHS enabled\n        data.rhsImm.value = signExtend20Bit(offsetRaw) << 1;\n        data.rhsSel.value = 0; // RHS Imm\n        data.pcRegMuxCtrl.value = 0; // ALU out => PC; PC + 4 => REG\n        setRegCtrl(true, rd, 2); // PC + 4 => reg[rd]\n        setAluCtrl(true, false, Funct3Op.ADD, false);\n\n    } else if (opCode === OpCode.JALR) {\n        let offset = signExtend12Bit(ins >>> 20);\n        setRegCtrl(true, rs1, 0); // reg[rs1] => LHS\n        data.rhsImm.value = offset;\n        data.rhsSel.value = 0; // RHS Imm\n        data.pcRegMuxCtrl.value = 0; // ALU out => PC; PC + 4 => REG\n        setRegCtrl(true, rd, 2); // PC + 4 => reg[rd]\n        setAluCtrl(true, false, Funct3Op.ADD, false);\n\n    } else if (opCode === OpCode.BRANCH) {\n\n        setRegCtrl(true, rs1, 0); // reg[rs1] => LHS\n        setRegCtrl(true, rs2, 1); // reg[rs2] => RHS\n\n        setAluCtrl(true, true, funct3, false);\n\n        let offsetRaw = (((ins >>>  8) & 0x0F) << 0 ) | // 4 bits\n                        (((ins >>> 25) & 0x3F) << 4 ) | // 6 bits\n                        (((ins >>>  7) & 0x01) << 10) | // 1 bits\n                        (((ins >>> 31) & 0x01) << 11);  // 1 bits\n\n        data.pcAddImm.value = signExtend12Bit(offsetRaw) << 1;\n        // console.log('branch offset: ' + data.pcAddImm.value.toString(16), data.pcAddImm.value);\n        data.lhsSel.value = 1; // PC + offset => PC @TODO: not sure about this one, als a function of branch output\n        data.pcBranchCtrl.value = 0; // PC + offset => PC\n\n    } else if (opCode === OpCode.LOAD) {\n        let offset = signExtend12Bit(ins >>> 20);\n        // let base = cpu.x[rs1] >>> 0;\n        // let addr = base + offset;\n        // let value = 0;\n        // switch (funct3) {\n        //     case Funct3LoadStore.LB: value = signExtend8Bit(mem.readByte(addr)); break;\n        //     case Funct3LoadStore.LH: value = signExtend16Bit(mem.readHalfWord(addr)); break;\n        //     case Funct3LoadStore.LW: value = signExtend32Bit(mem.readWord(addr)); break;\n        //     case Funct3LoadStore.LBU: value = mem.readByte(addr); break;\n        //     case Funct3LoadStore.LHU: value = mem.readHalfWord(addr); break;\n        //     default: break;\n        // }\n\n        // @TODO: implement LOAD signals\n        setLoadStoreCtrl(true, true, funct3);\n        data.addrOffset.value = offset;\n        setRegCtrl(true, rs1, 0);\n        setRegCtrl(true, 0, 1);\n        setRegCtrl(true, rd, 2);\n        setAluCtrl(false, false, Funct3Op.ADD, false);\n\n    } else if (opCode === OpCode.STORE) {\n        let offsetRaw = (((ins >>>  7) & 0x1F)     ) | // 5 bytes\n                        (((ins >>> 25) & 0x7F) << 5);  // 7 bytes\n\n        let offset = signExtend12Bit(offsetRaw);\n\n        // switch (funct3) {\n        //     case Funct3LoadStore.SB: mem.writeByte(addr, value); break;\n        //     case Funct3LoadStore.SH: mem.writeHalfWord(addr, value); break;\n        //     case Funct3LoadStore.SW: mem.writeWord(addr, value); break;\n        //     default: break;\n        // }\n\n        setLoadStoreCtrl(true, false, funct3 & 0b11);\n        data.addrOffset.value = offset;\n        setRegCtrl(true, rs1, 0);\n        setRegCtrl(true, rs2, 1);\n        setRegCtrl(true, 0, 2);\n        setAluCtrl(false, false, Funct3Op.ADD, false);\n\n    } else if (opCode === OpCode.SYSTEM) {\n        runArgs.halt = true;\n        // data.willHalt = true;\n        /*\n        let csr = (ins >>> 20);\n        if (funct3 !== 0x0) {\n            let srcVal = (funct3 & 0b100 ? rs1 : cpu.x[rs1]) >>> 0;\n            let funct3Local = funct3 | 0b100;\n            cpu.x[rd] = cpu.csr[csr];\n            switch (funct3Local) {\n                case Funct3CSR.CSRRWI: cpu.csr[csr] = srcVal; break;\n                case Funct3CSR.CSRRSI: cpu.csr[csr] |= srcVal; break;\n                case Funct3CSR.CSRRCI: cpu.csr[csr] &= ~srcVal; break;\n            }\n            // console.log(`CSR op ${Funct3CSR[funct3]} @ 0x${csr.toString(16)} (${CSR_Reg[csr]}): ${cpu.x[rd]} -> ${srcVal}`);\n            if (csr < 0 || csr > 0xFFF) {\n                console.log('ins: ' + ins.toString(2).padStart(32, '0'));\n                console.log('Unknown CSR op: ' + csr.toString(16));\n                cpu.halt = true;\n            }\n            // console.log('Unknown SYSTEM op (probably a CSR one): ' + funct3);\n        } else {\n            if (csr === 0x000) { // ecall\n                let isTestResult = cpu.x[17] === 93;\n                if (isTestResult) {\n                    let testNum = cpu.x[10];\n                    if (testNum === 0) {\n                        console.log('ECALL: All tests passed!');\n                    } else {\n                        console.log(`ECALL: Test failed on test ${testNum >> 1}`);\n                    }\n                    cpu.halt = true;\n                } else {\n                    console.log('ECALL (unknown)');\n                }\n            } else if (csr === 0x001) { // ebreak\n                console.log('EBREAK');\n            } else if (csr === 0x102) { // sret\n                console.log('SRET');\n            } else if (csr === 0x302) { // mret\n                pcOffset = (cpu.csr[CSR_Reg.mepc] >>> 0) - cpu.pc;\n            } else {\n                console.log('Unknown SYSTEM op: ' + csr);\n            }\n        }\n        */\n    } else if (ins === 0) {\n        // NOP\n    } else {\n        runArgs.halt = true;\n        /*\n        console.log('Unknown op: ' + opCode, ins.toString(2).padStart(32, '0'), cpu.pc.toString(16));\n        // dumpCpu(cpu);\n        cpu.halt = true;\n        cpu.haltReason = 'Unknown op: ' + opCode;\n        */\n    }\n\n    if (data.lhsSel.value) {\n        // data.regCtrl.value |= 0b1;\n        // setRegCtrl(true, 0, 0); // 0 => LHS (to ensure we don't leave a floating value on the bus)\n    }\n    // if (data.rhsImm.ioEnabled) {\n    //     data.rhsImm.ioDir = IoDir.Out;\n    // }\n    // cpu.pc += pcOffset; // jump to location, or just move on to next instruction\n    // cpu.x[0] = 0; // ensure x0 is always 0\n}\n\n\n\nexport function signExtend8Bit(x: number) {\n    return ((x & 0x80) !== 0) ? x - 0x100 : x;\n}\n\nexport function signExtend12Bit(x: number) {\n    return ((x & 0x800) !== 0) ? x - 0x1000 : x;\n}\n\nexport function signExtend16Bit(x: number) {\n    return ((x & 0x8000) !== 0) ? x - 0x10000 : x;\n}\n\nexport function signExtend20Bit(x: number) {\n    return (x & (1 << 19)) ? x - (1 << 20) : x;\n}\n\nexport function signExtend32Bit(x: number) {\n    return ((x & 0x80000000) !== 0) ? x - 0x100000000 : x;\n}\n\nlet u32Arr = new Uint32Array(1);\nlet s32Arr = new Int32Array(1);\n\nexport function ensureSigned32Bit(x: number) {\n    s32Arr[0] = x;\n    return s32Arr[0];\n}\n\nexport function ensureUnsigned32Bit(x: number) {\n    u32Arr[0] = x;\n    return u32Arr[0];\n}\n\nfunction renderInsDecoder({ ctx, comp, exeComp, cvs, styles }: ICompRenderArgs<ICompDataInsDecoder>) {\n\n    return;\n\n    if (!exeComp) {\n        return;\n    }\n\n    let data = exeComp.data;\n    let ins = data.ins.value;\n\n    ctx.font = makeCanvasFont(styles.fontSize, FontType.Mono);\n    let originalBitStr = ins.toString(2).padStart(32, '0');\n    let width = ctx.measureText(originalBitStr).width;\n\n    let leftX = comp.pos.x + comp.size.x/2 - width/2;\n    let lineY = (a: number) => comp.pos.y + 1.0 + styles.lineHeight * (a + 2.0);\n\n    ctx.font = makeCanvasFont(styles.fontSize, FontType.Default | FontType.Italic);\n    ctx.fillStyle = '#000';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    ctx.fillText('RISCV 32-bit Instruction Decode', leftX + width/2, lineY(-1.5));\n\n    ctx.font = makeCanvasFont(styles.fontSize, FontType.Mono);\n    ctx.fillStyle = '#000';\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'top';\n\n    let hexText = ins.toString(16).padStart(8, '0');\n\n    let alignedHexText = '';\n    for (let i = 0; i < 4; i++) {\n        alignedHexText += '   ' + hexText.substring(i * 2, i * 2 + 2) + '   ';\n    }\n\n\n    ctx.fillText(alignedHexText, leftX, lineY(0));\n    // ctx.fillText(ins.toString(2).padStart(32, '0'), leftX, comp.pos.y + 0.5 + styles.lineHeight);\n\n\n    // vertical lines separating the hex digits\n    for (let i = 0; i < 3; i++) {\n        let x = leftX + width / 4 * (i + 1);\n        ctx.beginPath();\n        ctx.moveTo(x, lineY(0));\n        ctx.lineTo(x, lineY(2) - 0.2 * styles.lineHeight);\n        ctx.setLineDash([0.4, 0.3]);\n        ctx.strokeStyle = '#0005';\n        ctx.stroke();\n        ctx.setLineDash([]);\n    }\n\n    let strRemain = originalBitStr;\n\n    let drawBitRange = (rightBit: number, count: number, color: string) => {\n        let totalBits = originalBitStr.length;\n        let rightIdx = totalBits - rightBit - 1;\n        let leftIdx = rightIdx - count + 1;\n        let str = originalBitStr.substring(leftIdx, rightIdx + 1);\n        let strWrapped = ' '.repeat(leftIdx) + str + ' '.repeat(totalBits - rightIdx - 1);\n        ctx.textAlign = 'left';\n        ctx.fillStyle = color;\n        ctx.fillText(strWrapped, leftX, lineY(1));\n        strRemain = strRemain.substring(0, leftIdx) + ' '.repeat(count) + strRemain.substring(rightIdx + 1);\n    };\n    let bitRangeCenter = (rightBit: number, count: number) => {\n        let bitWidth = width / originalBitStr.length;\n        let targetIdx = originalBitStr.length - rightBit - count / 2;\n        return leftX + bitWidth * targetIdx;\n    };\n\n    let opColor = '#e33';\n\n    let rs1Color = '#3e3';\n    let rs2Color = '#33e';\n    let rdColor = '#ee3';\n    let immColor = '#a3a';\n    let func3Color = '#333';\n    let infoColor = '#555';\n\n    drawBitRange(0, 7, opColor);\n\n    let opCode = ins & 0b1111111;\n    const rd = (ins >>> 7) & 0b11111;\n    const rs1 = (ins >>> 15) & 0b11111;\n    const rs2 = (ins >>> 20) & 0b11111;\n\n    let funct3 = (ins >>> 12) & 0b111;\n\n    let drawBitsAndText = (rightBit: number, count: number, color: string, text: string, label: string) => {\n        drawBitRange(rightBit, count, color);\n        let center = bitRangeCenter(rightBit, count);\n        ctx.textAlign = 'center';\n        ctx.fillStyle = color;\n        ctx.fillText(text, center, lineY(2));\n    }\n\n    let infoFont1 = makeCanvasFont(styles.fontSize * 0.8, FontType.Mono);\n    let infoFont2 = makeCanvasFont(styles.fontSize * 0.6, FontType.Default | FontType.Italic);\n    let line2Height = 3.5;\n    let line3Height = 4.5;\n    let line4Height = 5.5;\n\n    interface IMessagePart {\n        color: string;\n        text: string;\n        italic?: boolean;\n    }\n\n    let drawMessage = (parts: IMessagePart[], height: number, noBullet?: boolean) => {\n        ctx.save();\n        ctx.textAlign = 'left';\n        let offset = leftX;\n        if (!noBullet) {\n            parts = [{ text: '• ', color: infoColor }, ...parts];\n        }\n        for (let part of parts) {\n            ctx.font = part.italic ? infoFont2 : infoFont1;\n            ctx.fillStyle = part.color;\n            ctx.fillText(part.text, offset, lineY(height) + (part.italic ? 0.1 : 0));\n            offset += ctx.measureText(part.text).width;\n        }\n        ctx.restore();\n    };\n\n    let drawOpAndMessage = (opCodeStr: string, funct3Str: string, message: string) => {\n        let parts: IMessagePart[] = [{ color: opColor, text: opCodeStr }];\n        if (funct3Str) {\n            parts.push({ color: infoColor, text: ', ' }, { color: func3Color, text: funct3Str });\n        }\n        parts.push({ color: infoColor, text: '  —  ' + message, italic: true });\n        drawMessage(parts, line2Height, true);\n    };\n\n    let drawMultiBits = (bitPattern: number[], bitColorOffsets: number[], color: string, label: string) => {\n        for (let i = 0; i < bitColorOffsets.length; i += 1) {\n            drawBitsAndText(bitPattern[i * 2], bitPattern[i * 2 + 1], d3Color.rgb(color).darker(bitColorOffsets[i]).toString(), '.', label + i);\n        }\n    };\n\n    let buildBitsMessage = (bitPattern: number[], bitColorOffsets: number[], color: string) => {\n        let parts: IMessagePart[] = [];\n        for (let i = bitColorOffsets.length - 1; i >= 0; i -= 1) {\n            let rightBit = bitPattern[i * 2];\n            let count = bitPattern[i * 2 + 1];\n            let totalBits = originalBitStr.length;\n            let rightIdx = totalBits - rightBit - 1;\n            let leftIdx = rightIdx - count + 1;\n            let str = originalBitStr.substring(leftIdx, rightIdx + 1);\n            parts.push({ color: d3Color.rgb(color).darker(bitColorOffsets[i]).toString(), text: str });\n        }\n        return parts;\n    };\n    // let drawFunc3AndMessage = (funct3Str: string, message: string) => {\n    //     drawInfoAndMessage(funct3Str, func3Color, message, 4.5);\n    // }\n\n    drawBitsAndText(0, 7, opColor, OpCode[opCode] || '<invalid>', 'op');\n\n    if (opCode === OpCode.OP || opCode === OpCode.OPIMM) {\n        drawBitsAndText(15, 5, rs1Color, rs1.toString(), 'rs1');\n\n        let funct3Str: string = '';\n\n        if (opCode === OpCode.OP) {\n            drawBitsAndText(20, 5, rs2Color, rs2.toString(), 'rs2');\n            funct3Str = Funct3Op[funct3];\n            let checkExtraBit = funct3 === Funct3Op.SLL || funct3 === Funct3Op.SRL || funct3 === Funct3Op.ADD;\n            let isArithShiftOrSub = ((ins >>> 30) & 0b1) === 0b1;\n            let isSub = funct3 === Funct3Op.ADD && isArithShiftOrSub;\n            if (checkExtraBit) {\n                drawBitsAndText(30, 1, func3Color, isArithShiftOrSub ? ('sub') : '0', 'extra');\n            }\n            drawOpAndMessage('OP', Funct3Op[funct3], `binary op between 2 registers`);\n            // set [rd] <= [rs1] + [rs2]\n            drawMessage([\n                { color: infoColor, text: 'set ' },\n                { color: rdColor, text: regFormatted(rd) },\n                { color: infoColor, text: ' to: ' },\n                { color: rs1Color, text: regFormatted(rs1) },\n                { color: func3Color, text: ' ' + (isSub ? '-' : funct3OpIcon[funct3]) + ' ' },\n                { color: rs2Color, text: regFormatted(rs2) },\n            ], line3Height);\n\n        } else if (opCode === OpCode.OPIMM) {\n            drawBitsAndText(20, 12, immColor, data.rhsImm.value.toString(), 'imm');\n            if (funct3 === Funct3OpImm.ADDI && rs1 === 0) {\n                drawOpAndMessage('LI', '', `load immediate into register (via OPIMM ADDI & zero reg)`);\n                drawMessage([\n                    { color: infoColor, text: 'load immediate' },\n                    { color: immColor, text: ` ${ensureSigned32Bit(data.rhsImm.value)} ` },\n                    { color: infoColor, text: 'into ' },\n                    { color: rdColor, text: regFormatted(rd) },\n                ], line3Height);\n            } else {\n                drawOpAndMessage('OPIMM', Funct3OpImm[funct3], `binary op between register & immediate`);\n                // set [rd] <= [rs1] + [imm]\n                drawMessage([\n                    { color: infoColor, text: 'set ' },\n                    { color: rdColor, text: regFormatted(rd) },\n                    { color: infoColor, text: ' to: ' },\n                    { color: rs1Color, text: regFormatted(rs1) },\n                    { color: func3Color, text: ' ' + funct3OpIcon[funct3] + ' ' },\n                    { color: immColor, text: `${ensureSigned32Bit(data.rhsImm.value)}` },\n                ], line3Height);\n            }\n            funct3Str = Funct3OpImm[funct3];\n        }\n\n        drawBitsAndText(12, 3, func3Color, funct3Str, 'funct3');\n        drawBitsAndText(7, 5, rdColor, rd.toString(), 'rd');\n\n    } else if (opCode === OpCode.BRANCH) {\n        drawBitsAndText(15, 5, rs1Color, rs1.toString(), 'rs1');\n        drawBitsAndText(20, 5, rs2Color, rs2.toString(), 'rs2');\n        drawBitsAndText(12, 3, func3Color, Funct3Branch[funct3], 'funct3');\n\n        let bitPattern = [8, 4,  25, 6,  7, 1,  31, 1];\n        let bitColorOffsets = [-0.5, 0, 1, 2];\n\n        drawMultiBits(bitPattern, bitColorOffsets, immColor, 'i');\n\n        drawOpAndMessage('BRANCH', Funct3Branch[funct3], `jump if the condition is met (${funct3BranchNames[funct3]})`);\n\n        let isUnsigned = funct3 === Funct3Branch.BLTU || funct3 === Funct3Branch.BGEU;\n        drawMessage([\n            { color: infoColor, text: 'branch if ' },\n            { color: rs1Color, text: regFormatted(rs1) },\n            { color: func3Color, text: ' ' + funct3BranchIcon[funct3] + ' ' },\n            { color: rs2Color, text: regFormatted(rs2) },\n            isUnsigned ? { color: infoColor, text: ' (unsigned)' } : null,\n        ].filter(isNotNil), line3Height);\n\n        drawMessage([\n            { color: infoColor, text: 'to ' },\n            { color: '#000', text: 'PC + ' },\n            ...buildBitsMessage(bitPattern, bitColorOffsets, immColor),\n            { color: '#000', text: '0' },\n            { color: immColor, text: ` (${ensureSigned32Bit(data.pcAddImm.value)})` },\n        ], line4Height);\n\n    } else if (opCode === OpCode.JAL) {\n        let bitPattern = [21, 10,  20, 1,  12, 8,  31, 1];\n        let bitColorOffsets = [-0.5, 0, 1, 2];\n\n        drawBitsAndText(7, 5, rdColor, rd.toString(), 'rd');\n        drawMultiBits(bitPattern, bitColorOffsets, immColor, 'i');\n\n        drawOpAndMessage('JAL', '', `jump to address (& store PC + 4 in register)`);\n        drawMessage([\n            { color: infoColor, text: 'set ' },\n            { color: rdColor, text: regFormatted(rd) },\n            { color: infoColor, text: ' to ' },\n            { color: '#000', text: 'PC + 4' },\n        ], line3Height);\n        // jump to PC + <imm>\n        drawMessage([\n            { color: infoColor, text: 'jump to ' },\n            { color: '#000', text: 'PC + ' },\n            ...buildBitsMessage(bitPattern, bitColorOffsets, immColor),\n            { color: immColor, text: ` (${ensureSigned32Bit(data.rhsImm.value)})` },\n        ], line4Height);\n\n    } else if (opCode === OpCode.JALR) {\n        drawBitsAndText(15, 5, rs1Color, rs1.toString(), 'rs1');\n        drawBitsAndText(7, 5, rdColor, rd.toString(), 'rd');\n        drawBitsAndText(20, 12, immColor, data.rhsImm.value.toString(), 'imm');\n\n        drawOpAndMessage('JALR', '', `jump to reg + imm (& store PC + 4 in register)`);\n        drawMessage([\n            { color: infoColor, text: 'set ' },\n            { color: rdColor, text: regFormatted(rd) },\n            { color: infoColor, text: ' to ' },\n            { color: '#000', text: 'PC + 4' },\n        ], line3Height);\n        drawMessage([\n            { color: infoColor, text: 'jump to ' },\n            { color: rs1Color, text: regFormatted(rs1) },\n            { color: infoColor, text: ' + ' },\n            ...buildBitsMessage([20, 12], [0], immColor),\n        ], line4Height);\n\n    } else if (opCode === OpCode.LOAD) {\n        drawBitsAndText(15, 5, rs1Color, rs1.toString(), 'rs1');\n        drawBitsAndText(7, 5, rdColor, rd.toString(), 'rd');\n        let funct3Str = Funct3LoadStore[funct3].replace('S', 'L');\n        drawBitsAndText(12, 3, func3Color, funct3Str, 'funct3');\n        drawBitsAndText(20, 12, immColor, data.addrOffset.value.toString(), 'imm');\n\n        drawOpAndMessage('LOAD', funct3Str, `load from memory (reg + offset)`);\n\n        drawMessage([\n            { color: infoColor, text: 'load from ' },\n            { color: rs1Color, text: regFormatted(rs1) },\n            { color: infoColor, text: ' + ' },\n            ...buildBitsMessage([20, 12], [0], immColor),\n            { color: immColor, text: ` (${ensureSigned32Bit(data.addrOffset.value)})` },\n        ], line3Height);\n\n        drawMessage([\n            { color: infoColor, text: 'into ' },\n            { color: rdColor, text: regFormatted(rd) },\n        ], line4Height);\n\n    } else if (opCode === OpCode.STORE) {\n        let bitPattern = [7, 5,  25, 7];\n        let bitColorOffsets = [0, 1];\n\n        drawBitsAndText(15, 5, rs1Color, rs1.toString(), 'rs1');\n        drawBitsAndText(20, 5, rs2Color, rs2.toString(), 'rs2');\n        drawBitsAndText(12, 3, func3Color, Funct3LoadStore[funct3], 'funct3')\n        drawMultiBits(bitPattern, bitColorOffsets, immColor, 'i');\n\n        drawOpAndMessage('STORE', Funct3LoadStore[funct3], `store to memory (reg + offset)`);\n\n        drawMessage([\n            { color: infoColor, text: 'store ' },\n            { color: rs2Color, text: regFormatted(rs2) },\n        ], line3Height);\n\n        drawMessage([\n            { color: infoColor, text: 'at address ' },\n            { color: rs1Color, text: regFormatted(rs1) },\n            { color: infoColor, text: ' + ' },\n            ...buildBitsMessage(bitPattern, bitColorOffsets, immColor),\n            { color: immColor, text: ` (${ensureSigned32Bit(data.addrOffset.value)})` },\n        ], line4Height);\n\n    } else if (opCode === OpCode.LUI) {\n        let val = data.rhsImm.value;\n        drawBitsAndText(12, 20, immColor, data.rhsImm.value.toString(), 'imm');\n        drawOpAndMessage('LUI', '', `load immediate as upper 20 bits into register`);\n        drawMessage([\n            { color: infoColor, text: 'load ' },\n            { color: '#000', text: '0x' },\n            { color: immColor, text: val.toString(16).padStart(8, '0').substring(0, 5) },\n            { color: '#000', text: '0'.repeat(3) },\n            { color: immColor, text: ` (${val.toString()})` },\n        ], line3Height);\n\n        drawMessage([\n            { color: infoColor, text: 'into ' },\n            { color: rdColor, text: regFormatted(rd) },\n        ], line4Height);\n\n    } else if (opCode === OpCode.SYSTEM) {\n\n        drawOpAndMessage('SYSTEM', '', `system call (halt)`);\n    }\n\n    ctx.fillStyle = '#777';\n    ctx.textAlign = 'left';\n    ctx.fillText(strRemain, leftX, lineY(1));\n}\n\nfunction regFormatted(reg: number) {\n    return `x${reg}(${riscvRegNames[reg]})`;\n}\n\nlet funct3BranchNames: Record<number, string> = {\n    [Funct3Branch.BEQ]: 'equal',\n    [Funct3Branch.BNE]: 'not equal',\n    [Funct3Branch.BLT]: 'less than',\n    [Funct3Branch.BGE]: 'greater or equal',\n    [Funct3Branch.BLTU]: 'less than (unsigned)',\n    [Funct3Branch.BGEU]: 'greater or equal (unsigned)',\n};\n\nexport const funct3BranchIcon: Record<number, string> = {\n    [Funct3Branch.BEQ]: '==',\n    [Funct3Branch.BNE]: '!=',\n    [Funct3Branch.BLT]: '<',\n    [Funct3Branch.BGE]: '>=',\n    [Funct3Branch.BLTU]: '<',\n    [Funct3Branch.BGEU]: '>=',\n};\n\nexport const funct3OpIcon: Record<number, string> = {\n    [Funct3Op.ADD]: '+',\n    [Funct3Op.SLL]: '<<',\n    [Funct3Op.SLT]: '<',\n    [Funct3Op.SLTU]: '<',\n    [Funct3Op.XOR]: '^',\n    [Funct3Op.SRL]: '>>',\n    [Funct3Op.OR]: '|',\n    [Funct3Op.AND]: '&',\n};\n","import { BoundingBox3d, Vec3 } from \"@/src/utils/vector\";\nimport { IComp, IExeComp, ILibraryItem, ISchematic } from \"../CpuModel\";\nimport { ICompDef } from \"./CompBuilder\";\nimport { ISchematicCompArgs } from \"../schematics/SchematicLibrary\";\nimport * as d3Color from 'd3-color';\nimport { clamp } from \"@/src/utils/data\";\nimport React, { memo } from \"react\";\nimport { CompRectBase, CompRectUnscaled } from \"./RenderHelpers\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCodeBranch, faPencil, faFloppyDisk, faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\n\nexport interface ISchematicCompData {\n    // nothing\n}\n\nexport function createSchematicCompDef(id: string, name: string, schematic: ISchematic, compArgs: ISchematicCompArgs): ILibraryItem {\n\n    let compDef: ICompDef<ISchematicCompData, {}> = {\n        defId: id,\n        name: name,\n        ports: (args) => {\n            return compArgs.ports;\n        },\n        size: compArgs.size,\n        applyConfig: (comp, args) => {\n            comp.size = compArgs.size;\n        },\n        build: (builder) => {\n            builder.addData({});\n            return builder.build();\n        },\n\n        renderAll: true,\n        render: ({ comp, exeComp, ctx, cvs }) => {\n\n            let fillStyle = ctx.fillStyle;\n\n            ctx.fillStyle = 'white';\n            ctx.beginPath();\n            ctx.rect(comp.pos.x, comp.pos.y, comp.size.x, comp.size.y);\n            ctx.fill();\n            ctx.stroke();\n\n            ctx.save();\n\n            let bb = new BoundingBox3d(comp.pos, comp.pos.add(comp.size));\n            createInsetGradient(ctx, bb, cvs.scale * 20, '#06b6d4');\n\n            ctx.lineWidth = cvs.scale * 1;\n            ctx.beginPath();\n            ctx.rect(comp.pos.x, comp.pos.y, comp.size.x, comp.size.y);\n            ctx.strokeStyle = 'black';\n            ctx.stroke();\n\n            ctx.restore();\n        },\n        renderDom: ({ comp, exeComp, isActive }) => {\n            return <SchematicComp comp={comp} exeComp={exeComp} isActive={isActive} compDef={compDef} />;\n        },\n\n        subLayout: {\n            layout: schematic,\n            ports: compArgs.ports,\n            bb: new BoundingBox3d(),\n        },\n    };\n\n    let libItem: ILibraryItem = {\n        compDef,\n        id,\n        name,\n        schematic,\n    };\n\n    return libItem;\n}\n\nexport enum RectSide {\n    Top,\n    Right,\n    Bottom,\n    Left,\n}\n\nexport enum RectCorner {\n    TopLeft = 1,\n    TopRight = 2,\n    BottomRight = 4,\n    BottomLeft = 8,\n\n    IsLeft = TopLeft | BottomLeft,\n    IsTop = TopLeft | TopRight,\n}\n\nfunction createInsetGradient(ctx: CanvasRenderingContext2D, bb: BoundingBox3d, inset: number, colorOuter: string) {\n    let w = bb.max.x - bb.min.x;\n    let h = bb.max.y - bb.min.y;\n\n    for (let i = 0; i < 4; i++) {\n        let isTB = i % 2 === 0;\n        let isBR = i === 1 || i === 2;\n        let base = isBR ? bb.max : bb.min;\n        let insetX = isTB ? 0 : (isBR ? -inset : inset);\n        let insetY = isTB ? (isBR ? -inset : inset) : 0;\n        let oppDir = (isTB ? new Vec3(w, 0) : new Vec3(0, h)).mul(isBR ? -1 : 1);\n\n        let grad = ctx.createLinearGradient(base.x, base.y, base.x + insetX, base.y + insetY);\n        function hexWithOpacity(hex: string, stop: number) {\n            let opacity = Math.pow(1.0 - stop, 2.0);\n\n            let color = d3Color.color(hex)!;\n            return color.formatHex() + clamp((opacity * 255) >> 0, 0, 255).toString(16).padStart(2, '0');\n        }\n        grad.addColorStop(0, hexWithOpacity(colorOuter, 0));\n        grad.addColorStop(0.25, hexWithOpacity(colorOuter, 0.25));\n        grad.addColorStop(0.5, hexWithOpacity(colorOuter, 0.5));\n        grad.addColorStop(0.75, hexWithOpacity(colorOuter, 0.75));\n        grad.addColorStop(1, hexWithOpacity(colorOuter, 1));\n\n        ctx.fillStyle = grad;\n        // now have to create a trapazoid path\n        let mulFactor = 0.95; // 0.95; // 1.0; // 0.95;\n\n        ctx.beginPath();\n        if (isTB) {\n            ctx.moveTo(base.x, base.y);\n            ctx.lineTo(base.x + oppDir.x, base.y + oppDir.y);\n            ctx.lineTo(base.x + oppDir.x - insetY * mulFactor, base.y + insetY);\n            ctx.lineTo(base.x + insetY * mulFactor, base.y + insetY);\n        } else {\n            ctx.moveTo(base.x, base.y);\n            ctx.lineTo(base.x + oppDir.x, base.y + oppDir.y);\n            ctx.lineTo(base.x + oppDir.x + insetX, base.y + oppDir.y - insetX * mulFactor);\n            ctx.lineTo(base.x + insetX, base.y + insetX * mulFactor);\n        }\n        ctx.closePath();\n        ctx.fill();\n    }\n}\n\nconst SchematicComp: React.FC<{\n    comp: IComp<ISchematicCompData>,\n    exeComp: IExeComp<{}>,\n    compDef: ICompDef<ISchematicCompData, {}>,\n    isActive: boolean,\n}> = memo(function SchematicComp({ comp, exeComp, isActive, compDef }) {\n\n    let unsavedChanges = true;\n\n    return <>\n        <CompRectBase comp={comp}>\n        </CompRectBase>\n        <CompRectUnscaled hideHover comp={comp}>\n            <div className=\"absolute top-0 right-0 m-2 bg-white rounded shadow pointer-events-auto flex h-10 overflow-hidden shadow-[rgba(0,0,0,0.2)] opacity-10 hover:opacity-100 transition-opacity\">\n                <div className=\"relative flex items-center px-2\">\n                    {compDef.name}\n                </div>\n                <button className=\"relative px-2 hover:bg-blue-300 min-w-[2.5rem] text-slate-700\">\n                    <FontAwesomeIcon icon={faFloppyDisk} />\n                    {unsavedChanges && <div className=\"absolute -top-1 -right-0 text-red-500 text-2xl\">*</div>}\n                </button>\n                <button className=\"px-2 hover:bg-blue-300 min-w-[2.5rem] text-slate-700\" title=\"Branch this instance\">\n                    <FontAwesomeIcon icon={faCodeBranch} />\n                </button>\n                <button className=\"px-2 hover:bg-blue-300 min-w-[2.5rem] text-slate-700\">\n                    <FontAwesomeIcon icon={faMagnifyingGlass} />\n                </button>\n            </div>\n        </CompRectUnscaled>\n    </>;\n});\n","import { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport clsx from 'clsx';\nimport React, { useLayoutEffect, useState } from 'react';\nimport s from './HexValueEditor.module.scss';\nimport { isArrowKeyWithModifiers } from '@/src/utils/keyboard';\n\nexport enum HexValueInputType {\n    Hex,\n    Dec,\n    Bin,\n}\n\nexport const HexValueEditor: React.FC<{\n    className?: string,\n    value: number,\n    inputType: HexValueInputType,\n    fixedInputType?: boolean,\n    readonly?: boolean,\n    hidePrefix?: boolean,\n    minimalBackground?: boolean,\n    padBits?: number,\n    maxBits?: number,\n    signed?: boolean,\n    inputClassName?: string,\n    update: (end: boolean, val: number, inputType: HexValueInputType) => void,\n}> = ({ className, value, inputType, hidePrefix, fixedInputType, readonly, minimalBackground, padBits, update, maxBits, signed, inputClassName }) => {\n\n    let [inputEl, setInputEl] = useState<HTMLInputElement | null>(null);\n    let [text, setText] = useState(formatValue(value, inputType, padBits));\n    let textPrefix = inputType === HexValueInputType.Hex ? '0x' : inputType === HexValueInputType.Bin ? '0b' : '';\n\n    useLayoutEffect(() => {\n        let cursorPos = inputEl?.selectionStart ?? 0;\n        setText(formatValue(value, inputType, padBits));\n        inputEl?.setSelectionRange(cursorPos, cursorPos);\n    }, [value, inputType, padBits, inputEl]);\n\n    function isValid(t: string) {\n        return !isNaN(parseValue(t));\n    }\n\n    function parseValue(t: string) {\n        if (inputType === HexValueInputType.Hex) {\n            return parseInt(t, 16);\n        } else if (inputType === HexValueInputType.Bin) {\n            return parseInt(t, 2);\n        } else {\n            return parseInt(t, 10);\n        }\n    }\n\n    function clampValue(val: number) {\n        return maxBits ? clampToSignedWidth(val, maxBits, signed ?? false) : val;\n    }\n\n    function updateTruncated(end: boolean, val: number, inputType: HexValueInputType) {\n        update(end, clampValue(val), inputType);\n    }\n\n    function editValue(ev: React.ChangeEvent<HTMLInputElement>, end: boolean) {\n        let t = ev.target.value;\n        if (t.startsWith(textPrefix)) {\n            t = t.substring(textPrefix.length);\n        }\n\n        let valid = isValid(t);\n\n        if (valid) {\n            let parsed = parseValue(t);\n\n            if (parsed !== clampValue(parsed)) {\n                t = formatValue(clampValue(parsed), inputType, padBits);\n            }\n\n            updateTruncated(end, parsed, inputType);\n        }\n\n        if (end && !valid) {\n            // revert to previous value\n            t = formatValue(value, inputType, padBits);\n        }\n\n        setText(t);\n\n    }\n\n    function handleKeyDown(ev: React.KeyboardEvent<HTMLInputElement>) {\n        ev.stopPropagation();\n\n        if (isArrowKeyWithModifiers(ev, 'up') && textValid) {\n            updateTruncated(true, value + 1, inputType);\n            ev.preventDefault();\n        }\n\n        if (isArrowKeyWithModifiers(ev, 'down') && textValid) {\n            updateTruncated(true, value - 1, inputType);\n            ev.preventDefault();\n        }\n\n    }\n\n    function handleInputModeChange() {\n        let newInputType = (inputType + 1) % 3;\n        update(true, value, newInputType);\n    }\n\n    let textValid = isValid(text);\n\n    return <div className={clsx(s.hexValueEditor, className)}>\n        {!hidePrefix && <button className={s.prefix} onClick={handleInputModeChange}>\n            {!fixedInputType && <FontAwesomeIcon icon={faAngleUp} />}\n            {textPrefix || '\\u00A0'}\n            {!fixedInputType && <FontAwesomeIcon icon={faAngleDown} />}\n        </button>}\n        <input\n            ref={setInputEl}\n            className={clsx(s.input, !textValid && s.invalid, minimalBackground && s.minimal, readonly && s.readonly, inputClassName)} type=\"text\" value={text}\n            readOnly={readonly}\n            onChange={ev => editValue(ev, false)}\n            onBlur={ev => editValue(ev, true)}\n            onKeyDown={handleKeyDown}\n            onKeyUp={ev => ev.stopPropagation()}\n        />\n    </div>;\n}\n\nfunction formatValue(v: number, inputType: HexValueInputType, padBits: number | undefined) {\n    if (inputType === HexValueInputType.Hex) {\n        return v.toString(16).padStart(padBits ? Math.ceil(padBits / 4) : 1, '0');\n    } else if (inputType === HexValueInputType.Bin) {\n        return v.toString(2).padStart(padBits || 1, '0');\n    } else {\n        return v.toString(10);\n    }\n}\n\nexport function clampToSignedWidth(val: number, width: number, signed: boolean) {\n    let maxVal = Math.pow(2, width);\n    if (signed) {\n        maxVal = Math.floor(maxVal / 2);\n    }\n    if (val > maxVal - 1) {\n        val = maxVal - 1;\n    }\n    if (signed && val < -maxVal) {\n        val = -maxVal;\n    }\n    if (!signed && val < 0) {\n        val = 0;\n    }\n\n    return val;\n}\n","import clsx from 'clsx';\nimport React from 'react';\n\nexport const StringEditor: React.FC<{\n    className?: string,\n    value: string,\n    update: (end: boolean, value: string) => void,\n}> = ({ className, value, update }) => {\n\n    function onChange(ev: React.ChangeEvent<HTMLInputElement>) {\n        update(false, ev.target.value);\n    }\n\n    function onBlur(ev: React.FocusEvent<HTMLInputElement>) {\n        update(true, ev.target.value);\n    }\n\n    return <label className={clsx(\"flex flex-row\", className)}>\n        <input\n            type=\"text\"\n            className={clsx(\"hover:outline-none focus:outline-none px-1 rounded h-8 text-lg w-full bg-inherit\")}\n            value={value}\n            onChange={onChange}\n            onBlur={onBlur}\n            onKeyDown={ev => ev.stopPropagation()}\n            onKeyUp={ev => ev.stopPropagation()}\n        />\n    </label>;\n}\n","import { Subscriptions, useSubscriptions } from \"@/src/utils/hooks\";\nimport { IElfTextSection, listElfTextSections, readElfHeader } from \"../ElfParser\";\n\nexport interface ICodeSuite {\n    title: string;\n    fileName: string;\n    entries: ICodeEntry[];\n    loadPromise?: Promise<void>;\n    loaded: boolean;\n    loadError?: string;\n}\n\nexport interface ICodeEntry {\n    name: string;\n    elfSection: IElfTextSection;\n    expectFail: boolean;\n}\n\nexport class CodeSuiteManager {\n    public subs = new Subscriptions();\n    public suites = new Map<string, ICodeSuite>();\n\n    constructor() {\n        this.registerSuite('add_tests.elf', 'Test Suite');\n        this.registerSuite('blinky.elf', 'Blinky');\n        this.registerSuite('blinky2.elf', 'Blinky 2');\n    }\n\n    public registerSuite(fileName: string, title: string) {\n        this.suites.set(fileName, { title, fileName, entries: [], loaded: false });\n    }\n\n    public getSuite(fileName: string) {\n        this.ensureSuiteLoaded(fileName);\n        return this.suites.get(fileName);\n    }\n\n    private ensureSuiteLoaded(fileName: string): Promise<void> {\n        let suite = this.suites.get(fileName);\n        if (!suite || suite.loaded) {\n            return suite?.loadPromise!;\n        }\n\n        suite.loadPromise ??= this.loadSuite(suite);\n        return suite.loadPromise;\n    }\n\n    private async loadSuite(suite: ICodeSuite) {\n        let elfFile: Uint8Array;\n\n        if (typeof window === 'undefined') {\n            // Server-side rendering\n            const fs = require('fs');\n            const path = require('path');\n            let filePath = path.join(process.cwd(), 'public', 'riscv', 'examples', suite.fileName);\n            elfFile = new Uint8Array(fs.readFileSync(filePath));\n        } else {\n            // Client-side rendering\n            let basePath = (process.env.BASE_URL ?? '') + '/riscv/examples/';\n            let resp = await fetch(basePath + suite.fileName);\n\n            if (!resp.ok) {\n                let respBody = await resp.text();\n                suite.loadError = `Load failed: ${resp.status} ${resp.statusText} body:'${respBody.slice(0, 200)}'`;\n                this.subs.notify();\n                return;\n            }\n            elfFile = new Uint8Array(await resp.arrayBuffer());\n        }\n\n        let header = readElfHeader(elfFile)!;\n        let sections = listElfTextSections(elfFile, header);\n\n        let examples = sections.map(section => {\n            // name is '.text_add0', and we want 'add0'\n            let name = section.name.slice(6) || section.name;\n            return {\n                name,\n                elfSection: section,\n                expectFail: name.startsWith('must_fail'),\n            };\n        });\n\n        suite.entries = examples;\n        suite.loaded = true;\n        this.suites.set(suite.fileName, { ...suite });\n        this.subs.notify();\n    }\n}\n\nexport function useGetCodeSuite(manager: CodeSuiteManager, fileName: string) {\n    useSubscriptions(manager.subs);\n    return manager.getSuite(fileName);\n}\n","import React from \"react\";\nimport { Vec3 } from \"@/src/utils/vector\";\nimport { PortType, IExeComp, IExePort } from \"../CpuModel\";\nimport { ICompBuilderArgs, ICompDef } from \"./CompBuilder\";\nimport { ensureSigned32Bit, ensureUnsigned32Bit, funct3BranchIcon, funct3OpIcon } from \"./RiscvInsDecode\";\nimport s from './CompStyles.module.scss';\nimport clsx from \"clsx\";\nimport { Funct3Op } from \"../RiscvIsa\";\nimport { createCanvasDivStyle } from \"./RenderHelpers\";\n\ninterface ICompDataAlu {\n    inCtrlPort: IExePort;\n    inAPort: IExePort;\n    inBPort: IExePort;\n    outPort: IExePort;\n    branchPort: IExePort;\n}\n\nexport function createAluComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let alu: ICompDef<ICompDataAlu> = {\n        defId: 'riscv/alu0',\n        altDefIds: ['aluRiscv32_0'],\n        name: \"ALU\",\n        size: new Vec3(16, 12),\n        ports: [\n            { id: 'ctrl', name: 'Ctrl', pos: new Vec3(0, 3), type: PortType.In, width: 6 },\n            { id: 'lhs', name: 'LHS', pos: new Vec3(3, 0), type: PortType.In, width: 32 },\n            { id: 'rhs', name: 'RHS', pos: new Vec3(13, 0), type: PortType.In, width: 32 },\n\n            { id: 'branch', name: 'Branch', pos: new Vec3(4, 12), type: PortType.Out, width: 1 },\n            { id: 'result', name: 'Result', pos: new Vec3(8, 12), type: PortType.OutTri, width: 32 },\n        ],\n        build: (builder) => {\n            let data = builder.addData({\n                inCtrlPort: builder.getPort('ctrl'),\n                inAPort: builder.getPort('lhs'),\n                inBPort: builder.getPort('rhs'),\n                outPort: builder.getPort('result'),\n                branchPort: builder.getPort('branch'),\n            });\n            builder.addPhase(aluPhase0, [data.inCtrlPort, data.inAPort, data.inBPort], [data.outPort, data.branchPort]);\n            return builder.build();\n        },\n        renderDom: ({ comp, exeComp }) => {\n            if (!exeComp) {\n                return <div className={clsx(s.baseComp, s.rectComp)} style={{ ...createCanvasDivStyle(comp) }}>\n                    <div>ALU <span style={{ fontFamily: 'monospace' }}>{(0).toString(2).padStart(5, '0')}</span></div>\n                </div>;\n            }\n\n            let { inCtrlPort, inAPort, inBPort } = exeComp.data;\n\n            let ctrl = inCtrlPort.value;\n            let lhs = ensureSigned32Bit(inAPort.value);\n            let rhs = ensureSigned32Bit(inBPort.value);\n\n            let isEnabled = (ctrl & 0b100000) !== 0;\n            let isBranch =  (ctrl & 0b010000) !== 0;\n\n            let funct3 = (ctrl >> 1) & 0b111;\n            let isInverted = funct3 & 0b1;\n            let isArithShiftOrSub = (ctrl & 0b1) !== 0;\n\n            // want to show the integer values of the inputs and outputs (unless doing unsigned op)\n            let opStr = '';\n            if (isBranch) {\n                opStr = funct3BranchIcon[funct3];\n            } else {\n                if (isArithShiftOrSub && funct3 === Funct3Op.ADD) {\n                    opStr = '-';\n                } else {\n                    opStr = funct3OpIcon[funct3];\n                }\n            }\n            let res = exeComp.data.outPort.value;\n            let takeBranch = exeComp.data.branchPort.value;\n\n            // also show the OP (branch or otherwise), and show the result, as well as the branch result\n            return <div className={clsx(s.baseComp, s.rectComp)} style={{ ...createCanvasDivStyle(comp), display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                <div>ALU <span style={{ fontFamily: 'monospace' }}>{exeComp?.data.inCtrlPort.value.toString(2).padStart(5, '0')}</span></div>\n                {!isEnabled && <div>{'[disabled]'}</div>}\n                {isEnabled && <>\n                    {!isBranch && <>\n                        <div>\n                            {lhs} {opStr} {rhs}\n                        </div>\n                        <div>v</div>\n                        <div>{ensureSigned32Bit(res).toString()}</div>\n                    </>}\n                    {isBranch && <>\n                        <div>\n                            {lhs} {opStr} {rhs}\n                        </div>\n                        <div>v</div>\n                        <div>{takeBranch ? 'BRANCH' : '(no branch)'}</div>\n                    </>}\n                </>}\n            </div>;\n        },\n    };\n\n    return [alu];\n}\n\n\n/*\nRISC-V ALU ops from funct3 (& funct7):\n\nSUB   = 0b000, // sub                    (extra bit flag)\nADD   = 0b000, // add\nSLL   = 0b001, // shift left logical\nSLT   = 0b010, // set less than\nSLTU  = 0b011, // set less than unsigned\nXOR   = 0b100, // xor\nSRA   = 0b101, // shift right arithmetic\nSRL   = 0b101, // shift right logical     (extra bit flag)\nOR    = 0b110, // or\nAND   = 0b111, // and\n\n-- branches (note last bit just flips the branch condition)\n-- so have equals, LT, LT unsigned\n\nBEQ   = 0b000, // branch equal\nBNE   = 0b001, // branch not equal\nBLT   = 0b100, // branch less than\nBGE   = 0b101, // branch greater than or equal\nBLTU  = 0b110, // branch less than unsigned\nBGEU  = 0b111, // branch greater than or equal unsigned\n\n-- ctrl bit pattern becomes (5 bits):\n-- bit      5: ALU enabled\n-- bit      4: 0 = arith, 1 = branch\n-- bits [3:1]: = funct3\n-- bit      0: sub/shift logical\n*/\n\nfunction aluPhase0({ data: { inCtrlPort, inAPort, inBPort, outPort, branchPort } }: IExeComp<ICompDataAlu>) {\n    let ctrl = inCtrlPort.value;\n    let lhs = ensureSigned32Bit(inAPort.value);\n    let rhs = ensureSigned32Bit(inBPort.value);\n\n    let isEnabled = (ctrl & 0b100000) !== 0;\n    let isBranch =  (ctrl & 0b010000) !== 0;\n\n    // console.log(`alu: ctrl=${ctrl.toString(2)} lhs=${lhs} rhs=${rhs} isEnabled=${isEnabled} isBranch=${isBranch}`, rhs);\n\n    inAPort.ioEnabled = isEnabled;\n    inBPort.ioEnabled = isEnabled;\n    outPort.ioEnabled = isEnabled && !isBranch;\n    branchPort.ioEnabled = false;\n    branchPort.value = 0;\n\n    if (!isEnabled) {\n        return;\n    }\n\n    if (isBranch) {\n        let funct3 = (ctrl >> 1) & 0b111;\n        let isInverted = funct3 & 0b1;\n        let opts = funct3 & 0b110;\n        let res = false;\n        switch (opts) {\n            case 0b000: res = lhs === rhs; break;\n            case 0b100: res = lhs < rhs; break;\n            case 0b110: res = (lhs >>> 0) < (rhs >>> 0); break;\n        }\n        // branch may need its own output port?\n        outPort.value = 0;\n        branchPort.value = (res ? 1 : 0) ^ isInverted;\n        branchPort.ioEnabled = true;\n        // console.log('alu: branch res=' + res + ' isInverted=' + isInverted + ' branchPort=' + branchPort.value);\n    } else {\n        let funct3 = (ctrl >> 1) & 0b111;\n        let isArithShiftOrSub = (ctrl & 0b1) !== 0;\n        let res = 0;\n        switch (funct3) {\n            case 0b000: res = isArithShiftOrSub ? lhs - rhs : lhs + rhs; break; // add/sub\n            case 0b001: res = lhs << rhs; break; // shift left logical\n            case 0b010: res = ensureSigned32Bit(lhs) < ensureSigned32Bit(rhs) ? 1 : 0; break; // set less than\n            case 0b011: res = ensureUnsigned32Bit(lhs) < ensureUnsigned32Bit(rhs) ? 1 : 0; break; // set less than unsigned\n            case 0b100: res = lhs ^ rhs; break; // xor\n            case 0b101: res = isArithShiftOrSub ? lhs >> rhs : lhs >>> rhs ; break; // shift right arithmetic/logical\n            case 0b110: res = lhs | rhs; break; // or\n            case 0b111: res = lhs & rhs; break; // and\n        }\n        outPort.value = ensureSigned32Bit(res);\n    }\n\n    // console.log('alu: res=' + outPort.value);\n}\n","import { Vec3 } from \"@/src/utils/vector\";\nimport { IExePort, IoDir, PortType } from \"../CpuModel\";\nimport { Funct3LoadStore } from \"../RiscvIsa\";\nimport { ICompBuilderArgs, ICompDef } from \"./CompBuilder\";\nimport { signExtend16Bit, signExtend8Bit } from \"./RiscvInsDecode\";\nimport { FontType, makeCanvasFont } from \"../CanvasRenderHelpers\";\n\nexport interface ICompDataLoadStore {\n    ctrl: IExePort;\n    addrOffset: IExePort;\n    addrBase: IExePort;\n    dataIn: IExePort;\n    dataOut: IExePort;\n\n    busCtrl: IExePort;\n    busAddr: IExePort;\n    busData: IExePort;\n}\n\nexport interface ICompDataInsFetch {\n    pc: IExePort;\n    ins: IExePort;\n    addr: IExePort;\n    data: IExePort;\n}\n\nexport function createRiscvExtraComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let lsW = 24;\n    let lsH = 12;\n    let defLs: ICompDef<ICompDataLoadStore> = {\n        defId: 'riscv/loadStore0',\n        altDefIds: ['riscvLoadStore'],\n        name: \"Load/Store\",\n        size: new Vec3(lsW, lsH),\n        ports: [\n            { id: 'ctrl', name: 'Ctrl', pos: new Vec3(0, 1), type: PortType.In, width: 5 },\n            { id: 'addrOffset', name: 'Addr Offset', pos: new Vec3(0, 2), type: PortType.In, width: 12 },\n            { id: 'addrBase', name: 'Addr Base', pos: new Vec3(5, lsH), type: PortType.In, width: 32 },\n            { id: 'dataIn', name: 'Data In', pos: new Vec3(12, lsH), type: PortType.In, width: 32 },\n            { id: 'dataOut', name: 'Data Out', pos: new Vec3(lsW, 6), type: PortType.OutTri, width: 32 },\n\n            { id: 'busCtrl', name: 'Bus Ctrl', pos: new Vec3(4, 0), type: PortType.Out | PortType.Ctrl, width: 4 },\n            { id: 'busAddr', name: 'Bus Addr', pos: new Vec3(8, 0), type: PortType.Out | PortType.Addr, width: 32 },\n            { id: 'busData', name: 'Bus Data', pos: new Vec3(12, 0), type: PortType.In | PortType.Out | PortType.Tristate, width: 32 },\n        ],\n        build: (builder) => {\n            let data = builder.addData({\n                ctrl: builder.getPort('ctrl'),\n                addrOffset: builder.getPort('addrOffset'),\n                addrBase: builder.getPort('addrBase'),\n                dataIn: builder.getPort('dataIn'),\n                dataOut: builder.getPort('dataOut'),\n                busCtrl: builder.getPort('busCtrl'),\n                busAddr: builder.getPort('busAddr'),\n                busData: builder.getPort('busData'),\n            });\n\n            builder.addPhase(({ data: { ctrl, addrOffset, addrBase, dataIn, busCtrl, busAddr, busData } }) => {\n                // when working with a bus, we always:\n                // a) have everything write to the bus that it needs to\n                // b) have everything read from the bus that it needs to\n\n                let ctrlVal = ctrl.value;\n                let enabled  = (ctrlVal & 0b00001) !== 0;\n                let loadFlag = (ctrlVal & 0b00010) !== 0;\n                let funct3   = (ctrlVal & 0b11100) >> 2;\n\n                let isLoad = loadFlag && enabled;\n                let isStore = !loadFlag && enabled;\n\n                busData.ioEnabled = false;\n                busData.ioDir = isLoad ? 0 : 1;\n                busData.value = 0;\n                dataIn.ioEnabled = false;\n                addrBase.ioEnabled = enabled;\n                addrOffset.ioEnabled = enabled;\n                busAddr.ioEnabled = enabled;\n                busCtrl.ioEnabled = enabled;\n\n                if (enabled) {\n                    let addr = addrBase.value + addrOffset.value;\n                    busAddr.value = addr;\n                    busCtrl.value = funct3 << 2 | (isLoad ? 0b11 : 0b01);\n                    if (isStore) {\n                        // handle unsigned store\n                        let mask = funct3 === Funct3LoadStore.SB ? 0xff : funct3 === Funct3LoadStore.SH ? 0xffff : 0xffffffff;\n                        // console.log('[L/S] writing value', dataIn.value, 'to addr', addr.toString(16), 'on busData');\n                        busData.value = dataIn.value & mask;\n                        busData.ioEnabled = true;\n                        busData.ioDir = IoDir.Out;\n                        dataIn.ioEnabled = true;\n                        dataIn.ioDir = IoDir.In;\n                        // console.log(`writing value ${dataIn.value} to addr ${addr.toString(16)} on busData`);\n                    } else {\n                        busData.ioDir = IoDir.In;\n                    }\n                } else {\n                    busCtrl.value = 0;\n                    busData.ioEnabled = false;\n                }\n\n            }, [data.ctrl, data.addrOffset, data.addrBase, data.dataIn], [data.busCtrl, data.busAddr, data.busData]);\n\n            builder.addPhase(({ data: { ctrl, busData, dataOut } }) => {\n                let ctrlVal = ctrl.value;\n                let enabled  = (ctrlVal & 0b00001) !== 0;\n                let loadFlag = (ctrlVal & 0b00010) !== 0;\n                let funct3   = (ctrlVal & 0b11100) >> 2;\n\n                let isLoad = loadFlag && enabled;\n\n                dataOut.ioEnabled = isLoad;\n\n                if (isLoad) {\n                    if (funct3 === Funct3LoadStore.LB) {\n                        dataOut.value = signExtend8Bit(busData.value);\n                    } else if (funct3 === Funct3LoadStore.LH) {\n                        dataOut.value = signExtend16Bit(busData.value);\n                    } else {\n                        dataOut.value = busData.value;\n                    }\n                    busData.ioEnabled = true;\n                }\n\n            }, [data.ctrl, data.busData], [data.dataOut]);\n\n            return builder.build();\n        },\n    };\n\n    let defIf: ICompDef<ICompDataInsFetch> = {\n        defId: 'riscv/insFetch0',\n        altDefIds: ['riscvInsFetch'],\n        name: \"Instruction Fetch\",\n        size: new Vec3(20, 12),\n        ports: [\n            { id: 'pc', name: 'PC', pos: new Vec3(5, 3), type: PortType.In, width: 32 },\n            { id: 'ins', name: 'Ins', pos: new Vec3(10, 1), type: PortType.Out, width: 32 },\n            { id: 'addr', name: 'Addr', pos: new Vec3(0, 1), type: PortType.Out, width: 32 },\n            { id: 'data', name: 'Data', pos: new Vec3(0, 2), type: PortType.In, width: 32 },\n        ],\n        build: (builder) => {\n            let data = builder.addData({\n                pc: builder.getPort('pc'),\n                ins: builder.getPort('ins'),\n                addr: builder.getPort('addr'),\n                data: builder.getPort('data'),\n            });\n\n            builder.addPhase(({ data: { pc, addr }}) => {\n                addr.value = pc.value;\n            }, [data.pc], [data.addr]);\n\n            builder.addPhase(({ data: { data, ins } }) => {\n                ins.value = data.value;\n            }, [data.data], [data.ins]);\n\n            return builder.build();\n        },\n        render: ({ comp, ctx, cvs, exeComp }) => {\n            if (exeComp) {\n                let lineHeight = 0.5;\n                let textHeight = lineHeight * 0.8;\n                let x = comp.pos.x + 0.3;\n                let y = comp.pos.y + 0.3;\n                let word = exeComp.data.data.value;\n                ctx.fillStyle = 'black';\n                ctx.font = makeCanvasFont(textHeight, FontType.Mono);\n                ctx.textAlign = 'left';\n                ctx.textBaseline = 'top';\n\n                ctx.fillText('0x' + word.toString(16).padStart(8, '0'), x, y);\n            }\n        },\n    }\n\n    return [defLs, defIf];\n}\n","import { Vec3 } from \"@/src/utils/vector\";\nimport { PortType, IExePort } from \"../CpuModel\";\nimport { ICompBuilderArgs, ICompDef } from \"./CompBuilder\";\n\ninterface ICompDataMux {\n    inSelPort: IExePort;\n    inAPort: IExePort;\n    inBPort: IExePort;\n    outPort: IExePort;\n}\n\ninterface ICompDataAdder {\n    inAPort: IExePort;\n    inBPort: IExePort;\n    outPort: IExePort;\n}\n\n\nexport function createMuxComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let w = 2;\n    let h = 6;\n    let mux2: ICompDef<ICompDataMux> = {\n        defId: 'flow/mux2',\n        altDefIds: ['mux2'],\n        name: \"Mux\",\n        size: new Vec3(w, h),\n        ports: [\n            { id: 'sel', name: 'S', pos: new Vec3(1, 1), type: PortType.In, width: 1 },\n\n            { id: 'a', name: '0', pos: new Vec3(0, 2), type: PortType.In, width: 32 },\n            { id: 'b', name: '1', pos: new Vec3(0, 4), type: PortType.In, width: 32 },\n\n            { id: 'out', name: 'Z', pos: new Vec3(w, 3), type: PortType.Out, width: 32 },\n        ],\n        build: (builder) => {\n            let data = builder.addData({\n                inSelPort: builder.getPort('sel'),\n                inAPort: builder.getPort('a'),\n                inBPort: builder.getPort('b'),\n                outPort: builder.getPort('out'),\n            });\n\n            builder.addPhase(({ data: { inSelPort, inAPort, inBPort, outPort } }) => {\n                let isAPort = inSelPort.value === 0;\n                outPort.value = isAPort ? inAPort.value : inBPort.value;\n                inAPort.ioEnabled = isAPort;\n                inBPort.ioEnabled = !isAPort;\n            }, [data.inSelPort, data.inAPort, data.inBPort], [data.outPort]);\n\n            return builder.build();\n        },\n        renderAll: true,\n        render: ({ comp, ctx, cvs, exeComp }) => {\n            ctx.beginPath();\n            // basic structure is a trapezoid, narrower on the right\n            // slope passes through (1, 1) i.e. the select button, but doesn't need to be 45deg\n            let slope = 0.9;\n            let x = comp.pos.x;\n            let y = comp.pos.y;\n            let w = comp.size.x;\n            let h = comp.size.y;\n\n            let yTl = y + 1 - slope * comp.size.x / 2;\n            let yTr = y + 1 + slope * comp.size.x / 2;\n\n            let yBl = y + h - 1 + slope * comp.size.x / 2;\n            let yBr = y + h - 1 - slope * comp.size.x / 2;\n\n            ctx.moveTo(x, yTl);\n            ctx.lineTo(x + w, yTr);\n            ctx.lineTo(x + w, yBr);\n            ctx.lineTo(x, yBl);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n\n\n            let srcPos = comp.ports[exeComp?.data.inSelPort.value ? 2 : 1].pos;\n            let destPos = comp.ports[3].pos;\n            let xMid = comp.size.x / 2;\n\n            let dashScale = Math.min(cvs.scale, 0.03);\n            ctx.beginPath();\n            ctx.moveTo(x + srcPos.x, y + srcPos.y);\n            ctx.lineTo(x + xMid, y + srcPos.y);\n            ctx.lineTo(x + xMid, y + destPos.y);\n            ctx.lineTo(x + destPos.x, y + destPos.y);\n            // ctx.setLineDash([10 * dashScale, 10 * dashScale]);\n            ctx.strokeStyle = 'red';\n            ctx.lineWidth = 2 * cvs.scale;\n            ctx.stroke();\n            ctx.setLineDash([]);\n\n        },\n    };\n\n    let aH = 4;\n    let adder: ICompDef<ICompDataAdder> = {\n        defId: 'math/adder',\n        altDefIds: ['adder'],\n        name: \"+\",\n        size: new Vec3(w, aH),\n        ports: [\n            { id: 'a', name: 'A', pos: new Vec3(0, 1), type: PortType.In, width: 32 },\n            { id: 'b', name: 'B', pos: new Vec3(0, 3), type: PortType.In, width: 32 },\n\n            { id: 'out', name: 'O', pos: new Vec3(w, 3), type: PortType.Out, width: 32 },\n        ],\n        build: (builder) => {\n            let data = builder.addData({\n                inAPort: builder.getPort('a'),\n                inBPort: builder.getPort('b'),\n                outPort: builder.getPort('out'),\n            });\n\n            builder.addPhase(({ data: { inAPort, inBPort, outPort } }) => {\n                outPort.value = inAPort.value + inBPort.value;\n            }, [data.inAPort, data.inBPort], [data.outPort]);\n\n            return builder.build();\n        },\n    };\n\n\n    return [mux2, adder];\n}\n","import React, { memo } from 'react';\nimport { Vec3 } from \"@/src/utils/vector\";\nimport { IExePort, PortType, IComp, IoDir } from \"../CpuModel\";\nimport { ICompBuilderArgs, ICompDef } from \"./CompBuilder\";\nimport { CompRectBase } from \"./RenderHelpers\";\nimport s from './CompStyles.module.scss';\nimport clsx from 'clsx';\nimport { isNotNil } from '@/src/utils/data';\nimport { FontType, makeCanvasFont } from '../CanvasRenderHelpers';\n\nexport interface IRomExeData {\n    addr: IExePort;\n    data: IExePort;\n\n    // please write to these rather than replace the array\n    rom: Uint8Array;\n    rom32View: Uint32Array;\n    updateCntr: number;\n}\n\nexport interface IRomConfig {\n    octView: boolean;\n}\n\nexport interface IRamConfig {\n    sizeBytes: number\n}\n\nexport interface IRamExeData {\n    ctrl: IExePort;\n    addr: IExePort;\n    data: IExePort;\n    ram: Uint8Array;\n    ram32View: Uint32Array;\n    updateCntr: number;\n}\n\nexport enum BusMemCtrlType {\n    Byte = 0b00,\n    Half = 0b01,\n    Word = 0b10,\n}\n\nexport function createSimpleMemoryComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let romW = 35;\n    let romH = 30;\n    let rom: ICompDef<IRomExeData, IRomConfig> = {\n        defId: 'mem/rom0',\n        altDefIds: ['rom0'],\n        name: \"ROM\",\n        size: new Vec3(romW, romH),\n        ports: [\n            { id: 'addr', name: 'Addr', pos: new Vec3(romW, 2), type: PortType.In, width: 32 },\n            { id: 'data', name: 'Data', pos: new Vec3(romW, 1), type: PortType.Out, width: 32 },\n        ],\n        build: (builder) => {\n            let rom = new Uint8Array(1024);\n            let data = builder.addData({\n                addr: builder.getPort('addr'),\n                data: builder.getPort('data'),\n                rom,\n                rom32View: new Uint32Array(rom.buffer),\n                updateCntr: 0,\n            });\n\n            builder.addPhase(({ data: { addr, data, rom32View } }, args) => {\n                // need to read as a uint32\n                let loc = addr.value >>> 2;\n\n                if (loc < 0 || loc >= rom32View.length) {\n                    data.value = 0;\n                    args.halt = true;\n                } else {\n                    data.value = rom32View[addr.value >>> 2];\n                }\n            }, [data.addr], [data.data]);\n\n            return builder.build();\n        },\n        render: ({ comp, ctx, cvs, exeComp, styles }) => {\n            if (!exeComp) {\n                return;\n            }\n            let fontScale = 0.8;\n            ctx.save();\n            ctx.beginPath();\n            ctx.rect(comp.pos.x, comp.pos.y, comp.size.x, comp.size.y);\n            ctx.clip();\n\n            ctx.font = makeCanvasFont(styles.fontSize * fontScale, FontType.Mono);\n            let widthPerChar = ctx.measureText('0').width;\n            let widthPerWord = widthPerChar * 3 * 4\n            let padLeft = 0.5;\n            let space = comp.size.x - padLeft * 2;\n            let xOffset = comp.pos.x + padLeft;\n            let yOffset = comp.pos.y + 0.5;\n            let rowHeight = styles.lineHeight * fontScale;\n\n            let numWordsPerRow = Math.floor(space / widthPerWord);\n            let numBytesPerRow = numWordsPerRow * 4;\n\n            let targetAddr = exeComp.data.addr.value & ~0b11;\n\n            let targetAddrRow = (targetAddr / numBytesPerRow) >>> 0;\n            let targetAddrCol = targetAddr % numBytesPerRow;\n            let targetAddrY = yOffset + targetAddrRow * rowHeight;\n            let targetAddrX = xOffset + targetAddrCol * widthPerChar * 3;\n\n            ctx.fillStyle = '#0005';\n            ctx.beginPath();\n            ctx.roundRect(targetAddrX - 0.3, targetAddrY - 0.2, widthPerChar * 11 + 0.6, rowHeight, 0.5);\n            ctx.fill();\n\n            for (let i = 0; i < 32; i++) {\n                let x = xOffset;\n                let y = yOffset + i * rowHeight;\n\n                let wordStr = '';\n                for (let j = 0; j < numBytesPerRow; j++) {\n                    let byte = exeComp.data.rom[i * numBytesPerRow + j];\n                    let parts = byte.toString(16).padStart(2, '0');\n                    wordStr += `${parts[0]}${parts[1]} `;\n                }\n\n                ctx.fillStyle = wordStr === '' ? '#0005' : '#000';\n                ctx.textAlign = 'left';\n                ctx.textBaseline = 'top';\n\n                ctx.fillText(wordStr, x, y);\n            }\n\n            // let isActive = exeComp.data.addr.value >>> 2 === i;\n            // if (isActive) {\n                // ctx.fillRect(x - 0.2, y - 0.2, width + 0.4, styles.lineHeight);\n            // }\n\n            ctx.restore();\n        },\n        renderDom: ({ comp, exeComp, styles }) => {\n            let args = comp.args;\n\n            // rows of 8 bytes, each byte represented by 2 hex digits\n            // left to right, top to bottom (ala hex editor)\n            let addrRounded = exeComp ? exeComp.data.addr.value & ~0b11 : 0;\n\n            // return exeComp ? renderData(comp, exeComp.data.rom, exeComp.data.updateCntr, { addr: addrRounded, numBytes: 4, value: 0 }, null) : null;\n            return null;\n\n        },\n        reset: (exeComp, { hardReset }) => {\n            if (hardReset) {\n                exeComp.data.rom.fill(0);\n                exeComp.data.updateCntr = 0;\n            }\n        },\n        copyStatefulData: (src, dest) => {\n            dest.rom.set(src.rom);\n            dest.updateCntr = dest.updateCntr === 0 ? 1 : 0;\n        },\n    };\n\n    let ramW = 35;\n    let ramH = 30;\n\n    let ram: ICompDef<IRamExeData, IRamConfig> = {\n        defId: 'mem/ram0',\n        altDefIds: ['ram0'],\n        name: \"RAM\",\n        size: new Vec3(ramW, ramH),\n        ports: [\n            { id: 'ctrl', name: 'Ctrl', pos: new Vec3(0, 2), type: PortType.In, width: 5 },\n            { id: 'addr', name: 'Addr', pos: new Vec3(0, 4), type: PortType.In, width: 32 },\n            { id: 'data', name: 'Data', pos: new Vec3(0, 6), type: PortType.Out | PortType.In | PortType.Tristate, width: 32 },\n        ],\n\n        build: (builder) => {\n            let ramUint8 = new Uint8Array(1024);\n            let data = builder.addData({\n                ctrl: builder.getPort('ctrl'),\n                addr: builder.getPort('addr'),\n                data: builder.getPort('data'),\n                ram: ramUint8,\n                ram32View: new Uint32Array(ramUint8.buffer),\n                updateCntr: 0,\n            });\n\n            builder.addPhase(function ramSendPhase({ data: { ctrl, addr, data, ram32View } }) {\n                let isRead = (ctrl.value & 0b11) === 0b11; // read from ram\n                let isWrite = (ctrl.value & 0b11) === 0b01; // write to ram\n                let readType = (ctrl.value >> 2) & 0b11;\n\n                data.ioDir = isRead ? IoDir.Out : IoDir.In;\n                data.ioEnabled = isRead || isWrite;\n\n                // misaligned reads are not supported\n                if (isRead) {\n                    data.ioEnabled = true;\n                    let wordVal = ram32View[addr.value >> 2];\n                    let bitOffset = (addr.value & 0b11) * 8;\n                    data.value = readType === BusMemCtrlType.Byte ? (wordVal >> bitOffset) & 0xff   :\n                                 readType === BusMemCtrlType.Half ? (wordVal >> bitOffset) & 0xffff : wordVal;\n                } else if (isWrite) {\n                    data.ioEnabled = true;\n                } else {\n                    data.ioEnabled = false;\n                }\n\n            }, [data.ctrl, data.addr, data.data], [data.data]);\n\n            /*\n            builder.addPhase(function ramWritePhase({ data: { ctrl, data: dataPort, ram32View, addr } }) {\n                let isWrite = (ctrl.value & 0b11) === 0b01; // write to ram\n                let writeType = (ctrl.value >> 2) & 0b11;\n\n                if (isWrite) {\n                    dataPort.ioEnabled = true;\n\n                    // let existing = ram32View[addr.value >> 2];\n                    // let bitOffset = (addr.value & 0b11) * 8;\n                    // let mask = writeType === BusMemCtrlType.Byte ? 0xff << bitOffset :\n                    //            writeType === BusMemCtrlType.Half ? 0xffff << bitOffset :\n                    //                                                0xffffffff;\n\n                    // let wordVal = (existing & ~mask) | ((dataPort.value << bitOffset) & mask);\n\n                    // console.log(`reading data from data-port with value ${dataPort.value.toString(16)}`);\n                    // console.log('mask:', mask.toString(16), 'bitOffset:', bitOffset, 'existing:', existing.toString(16), 'data:', dataPort.value.toString(16), 'wordVal:', wordVal.toString(16));\n                }\n            }, [], [data.data]);\n            */\n\n            builder.addLatchedPhase(function ramWritePhase({ data }) {\n                let { ctrl, addr, data: dataPort, ram32View } = data;\n                let isWrite = (ctrl.value & 0b11) === 0b01; // write to ram\n                let writeType = (ctrl.value >> 2) & 0b11;\n\n                if (isWrite) {\n                    let existing = ram32View[addr.value >> 2];\n                    let bitOffset = (addr.value & 0b11) * 8;\n                    let mask = writeType === BusMemCtrlType.Byte ? 0xff << bitOffset :\n                               writeType === BusMemCtrlType.Half ? 0xffff << bitOffset :\n                                                                   0xffffffff;\n\n                    let wordVal = (existing & ~mask) | ((dataPort.value << bitOffset) & mask);\n\n                    // console.log('mask:', mask.toString(16), 'bitOffset:', bitOffset, 'existing:', existing.toString(16), 'data:', dataPort.value.toString(16), 'wordVal:', wordVal.toString(16));\n\n                    ram32View[addr.value >> 2] = wordVal;\n                    data.updateCntr += 1;\n                }\n            }, [], []);\n\n            return builder.build();\n        },\n\n        copyStatefulData: (src, dest) => {\n            dest.ram.set(src.ram);\n        },\n\n        reset: (exeComp) => {\n            exeComp.data.ram.fill(0);\n            exeComp.data.updateCntr = 0;\n        },\n\n        renderDom: ({ comp, exeComp, styles }) => {\n            if (!exeComp || true) {\n                return null;\n            }\n            let data = exeComp.data;\n            let ctrl = data.ctrl;\n            let isRead = (ctrl.value & 0b11) === 0b11;\n            let isWrite = (ctrl.value & 0b11) === 0b01;\n            let writeType = (ctrl.value >> 2) & 0b11;\n            let addr = data.addr.value;\n            let value = data.data.value;\n            let numBytes = writeType === BusMemCtrlType.Byte ? 1 : writeType === BusMemCtrlType.Half ? 2 : 4;\n            return renderData(comp, exeComp.data.ram, exeComp.data.updateCntr,\n                isRead ? { addr, numBytes, value } : null,\n                isWrite ? { addr, numBytes, value } : null);\n        },\n    };\n\n    return [rom, ram];\n}\n\ninterface IReadWriteInfo {\n    addr: number;\n    numBytes: number;\n    value: number; // only used for writes\n}\n\nfunction renderData(comp: IComp, bytes: Uint8Array, updateCntr: number, read: IReadWriteInfo | null, write: IReadWriteInfo | null) {\n\n    return <CompRectBase comp={comp}>\n        <MemoryContents\n            bytes={bytes}\n            readAddr={read ? read.addr : null}\n            readNumBytes={read ? read.numBytes : null}\n            writeAddr={write ? write.addr : null}\n            writeNumBytes={write ? write.numBytes : 0}\n            writeValue={write ? write.value : null}\n            updateCntr={updateCntr}\n        />\n    </CompRectBase>;\n}\n\nexport const MemoryContents: React.FC<{\n    bytes: Uint8Array,\n    readAddr: number | null,\n    readNumBytes: number | null,\n    writeAddr: number | null,\n    writeNumBytes: number,\n    writeValue: number | null,\n    updateCntr: number,\n}> = memo(function MemoryContents({ bytes, readAddr, readNumBytes, writeAddr, writeNumBytes, writeValue }) {\n    let bytesPerCol = 16;\n\n    let read: IReadWriteInfo | null = isNotNil(readAddr) && readNumBytes ? { addr: readAddr, numBytes: readNumBytes, value: 0 } : null;\n    let write: IReadWriteInfo | null = isNotNil(writeAddr) && writeNumBytes ? { addr: writeAddr, numBytes: writeNumBytes, value: writeValue || 0 } : null;\n\n    interface IRow {\n        addr: number;\n        bytes: Uint8Array;\n        allZeros: boolean;\n    }\n\n    let rows: IRow[] = [];\n    for (let i = 0; i < bytes.length; i += bytesPerCol) {\n        let rowBytes = bytes.slice(i, i + bytesPerCol);\n        let allZeros = true;\n        for (let b of rowBytes) {\n            if (b !== 0) {\n                allZeros = false;\n                break;\n            }\n        }\n        rows.push({\n            addr: i,\n            bytes: bytes.slice(i, i + bytesPerCol),\n            allZeros: allZeros,\n        });\n    }\n\n    return <div className={s.memTable}>\n        {rows.map((row, i) => {\n            return <div key={i} className={s.memRow}>\n                <div className={s.memRowAddr}>{row.addr.toString(16).padStart(2, '0')}</div>\n                <div className={clsx(s.memRowBytes, row.allZeros && s.allZeros)}>\n                    {[...row.bytes].map((b, j) => {\n                        let isRead = read && (row.addr + j >= read.addr && row.addr + j < read.addr + read.numBytes);\n                        let isWrite = write && (row.addr + j >= write.addr && row.addr + j < write.addr + write.numBytes);\n\n                        let topVal: number | null = null;\n                        let contents: React.ReactNode = b.toString(16).padStart(2, '0');\n                        if (write && isWrite) {\n                            let byteOffset = row.addr + j - write.addr;\n                            topVal = (write.value >> (byteOffset * 8)) & 0xff;\n                            contents = <>\n                                <div>{topVal.toString(16).padStart(2, '0')}</div>\n                                <div>{contents}</div>\n                            </>;\n                        }\n\n                        return <div key={j} className={clsx(s.memRowByte, isRead && s.byteRead, isWrite && s.byteWrite)}>{contents}</div>;\n                    })}\n                </div>\n            </div>;\n        })}\n    </div>;\n});\n","import React from \"react\";\nimport { AffineMat2d } from \"@/src/utils/AffineMat2d\";\nimport { Vec3 } from \"@/src/utils/vector\";\nimport { IComp, IEditContext, IExeComp, IExePort, PortType } from \"../CpuModel\";\nimport { ICompBuilderArgs, ICompDef } from \"./CompBuilder\";\nimport { editCompConfig, useEditorContext } from \"../Editor\";\nimport { CompRectBase } from \"./RenderHelpers\";\nimport { assignImm } from \"@/src/utils/data\";\nimport { KeyboardOrder, isKeyWithModifiers, useGlobalKeyboard } from \"@/src/utils/keyboard\";\n\ninterface IBinGateConfig {\n    rotate: number; // 0, 1, 2, 3\n}\n\ninterface IBinGateData {\n    inAPort: IExePort;\n    inBPort: IExePort;\n    outPort: IExePort;\n}\n\ninterface INotGateData {\n    inPort: IExePort;\n    outPort: IExePort;\n}\n\n\nexport function rotateAffineInt(r: number) {\n    switch (r) {\n        case 0: return new AffineMat2d(1, 0, 0, 1, 0, 0);\n        case 1: return new AffineMat2d(0, 1, -1, 0, 0, 0);\n        case 2: return new AffineMat2d(-1, 0, 0, -1, 0, 0);\n        case 3: return new AffineMat2d(0, -1, 1, 0, 0, 0);\n        default: return new AffineMat2d();\n    }\n}\n\nexport function rotateAboutAffineInt(r: number, center: Vec3) {\n    return AffineMat2d.multiply(\n        AffineMat2d.translateVec(center),          // 3) translate back\n        rotateAffineInt(r),                        // 2) rotate\n        AffineMat2d.translateVec(center.mul(-1))); // 1) translate to origin\n}\n\nexport function createBinaryGateComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let w = 3;\n    let h = 4;\n    let rotateCenter = new Vec3(1, 2);\n    let orGate: ICompDef<IBinGateData, IBinGateConfig> = {\n        defId: 'gate/or',\n        altDefIds: ['or'],\n        name: \"Or\",\n        size: new Vec3(w, h),\n        ports: [\n            { id: 'a', name: '', pos: new Vec3(0, 1), type: PortType.In, width: 1 },\n            { id: 'b', name: '', pos: new Vec3(0, 3), type: PortType.In, width: 1 },\n            { id: 'o', name: '', pos: new Vec3(w, 2), type: PortType.Out, width: 1 },\n        ],\n        initConfig: () => ({ rotate: 0 }),\n        applyConfig(comp, args) {\n            let mat = rotateAboutAffineInt(args.rotate, rotateCenter);\n            comp.ports = comp.ports.map(p => {\n                return { ...p, pos: mat.mulVec3(p.pos) }\n            });\n        },\n        build: (builder) => {\n            let data = builder.addData({\n                inAPort: builder.getPort('a'),\n                inBPort: builder.getPort('b'),\n                outPort: builder.getPort('o'),\n            });\n\n            builder.addPhase(({ data: { inAPort, inBPort, outPort } }) => {\n                outPort.value = inAPort.value | inBPort.value;\n            }, [data.inAPort, data.inBPort], [data.outPort]);\n\n            return builder.build();\n        },\n        renderAll: true,\n        render: ({ comp, ctx, cvs, exeComp }) => {\n            ctx.save();\n\n            let mtx = rotateAboutAffineInt(comp.args.rotate, comp.pos.add(rotateCenter));\n            ctx.transform(...mtx.toTransformParams());\n\n            ctx.beginPath();\n            // basic structure is a trapezoid, narrower on the right, with slopes of 45deg\n            let dx = 0.2;\n            let x = comp.pos.x - dx;\n            let y = comp.pos.y + 0.5;\n            let rightX = x + comp.size.x;\n            let w = comp.size.x + dx;\n            let h = comp.size.y - 1;\n            let frontRad = h * 0.9;\n            ctx.moveTo(x, y);\n            ctx.arcTo(rightX - 1, y    , x + w, y + h / 2, frontRad);\n            ctx.lineTo(x + w, y + h / 2);\n\n            ctx.arcTo(rightX - 1, y + h, x    , y + h, frontRad);\n            ctx.lineTo(x, y + h);\n            ctx.arcTo(x + 0.7, y + h / 2, x, y, h * 0.8);\n\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            ctx.restore();\n        },\n        renderDom: ({ comp, exeComp, editCtx, isActive }) => {\n\n            return <CompRectBase comp={comp} hideHover>\n                <BinGate editCtx={editCtx} comp={comp} exeComp={exeComp} isActive={isActive} />\n            </CompRectBase>;\n        },\n    };\n\n    let xorGate: ICompDef<IBinGateData, IBinGateConfig> = {\n        defId: 'gate/xor',\n        altDefIds: ['xor'],\n        name: \"Xor\",\n        size: new Vec3(w, h),\n        ports: [\n            { id: 'a', name: '', pos: new Vec3(0, 1), type: PortType.In, width: 1 },\n            { id: 'b', name: '', pos: new Vec3(0, 3), type: PortType.In, width: 1 },\n            { id: 'o', name: '', pos: new Vec3(w, 2), type: PortType.Out, width: 1 },\n        ],\n        initConfig: () => ({ rotate: 0 }),\n        applyConfig(comp, args) {\n            let mat = rotateAboutAffineInt(args.rotate, rotateCenter);\n            comp.ports = comp.ports.map(p => {\n                return { ...p, pos: mat.mulVec3(p.pos) }\n            });\n        },\n        build: (builder) => {\n            let data = builder.addData({\n                inAPort: builder.getPort('a'),\n                inBPort: builder.getPort('b'),\n                outPort: builder.getPort('o'),\n            });\n\n            builder.addPhase(({ data: { inAPort, inBPort, outPort } }) => {\n                outPort.value = inAPort.value ^ inBPort.value;\n            }, [data.inAPort, data.inBPort], [data.outPort]);\n\n            return builder.build();\n        },\n        renderAll: true,\n        render: ({ comp, ctx, cvs, exeComp }) => {\n            ctx.save();\n\n            let mtx = rotateAboutAffineInt(comp.args.rotate, comp.pos.add(rotateCenter));\n            ctx.transform(...mtx.toTransformParams());\n\n            ctx.beginPath();\n            // basic structure is a trapezoid, narrower on the right, with slopes of 45deg\n            let dx = 0.2;\n            let x = comp.pos.x - dx;\n            let y = comp.pos.y + 0.5;\n            let rightX = x + comp.size.x;\n            let w = comp.size.x + dx;\n            let h = comp.size.y - 1;\n            let frontRad = h * 0.9;\n            ctx.moveTo(x, y);\n            ctx.arcTo(rightX - 1, y    , x + w, y + h / 2, frontRad);\n            ctx.lineTo(x + w, y + h / 2);\n\n            ctx.arcTo(rightX - 1, y + h, x    , y + h, frontRad);\n            ctx.lineTo(x, y + h);\n            ctx.arcTo(x + 0.7, y + h / 2, x, y, h * 0.8);\n\n            ctx.closePath();\n\n            ctx.fill();\n\n            ctx.moveTo(x - 0.5, y + h);\n            ctx.arcTo(x + 0.7 - 0.5, y + h / 2, x - 0.5, y, h * 0.8);\n            ctx.lineTo(x - 0.5, y);\n\n            ctx.stroke();\n            ctx.restore();\n        },\n        renderDom: ({ comp, exeComp, editCtx, isActive }) => {\n\n            return <CompRectBase comp={comp} hideHover>\n                <BinGate editCtx={editCtx} comp={comp} exeComp={exeComp} isActive={isActive} />\n            </CompRectBase>;\n        },\n    };\n\n    let andGate: ICompDef<IBinGateData, IBinGateConfig> = {\n        defId: 'gate/and',\n        altDefIds: ['and'],\n        name: \"And\",\n        size: new Vec3(w, h),\n        ports: [\n            { id: 'a', name: '', pos: new Vec3(0, 1), type: PortType.In, width: 1 },\n            { id: 'b', name: '', pos: new Vec3(0, 3), type: PortType.In, width: 1 },\n            { id: 'o', name: '', pos: new Vec3(w, 2), type: PortType.Out, width: 1 },\n        ],\n        initConfig: () => ({ rotate: 0 }),\n        applyConfig(comp, args) {\n            let mat = rotateAboutAffineInt(args.rotate, rotateCenter);\n            comp.ports = comp.ports.map(p => {\n                return { ...p, pos: mat.mulVec3(p.pos) }\n            });\n        },\n        build: (builder) => {\n            let data = builder.addData({\n                inAPort: builder.getPort('a'),\n                inBPort: builder.getPort('b'),\n                outPort: builder.getPort('o'),\n            });\n\n            builder.addPhase(({ data: { inAPort, inBPort, outPort } }) => {\n                outPort.value = inAPort.value & inBPort.value;\n            }, [data.inAPort, data.inBPort], [data.outPort]);\n\n            return builder.build();\n        },\n        renderAll: true,\n        render: ({ comp, ctx, cvs, exeComp }) => {\n            ctx.save();\n\n            let mtx = rotateAboutAffineInt(comp.args.rotate, comp.pos.add(rotateCenter));\n            ctx.transform(...mtx.toTransformParams());\n\n            ctx.beginPath();\n            // basic structure is a trapezoid, narrower on the right, with slopes of 45deg\n            let dx = 0.0;\n            let x = comp.pos.x - dx;\n            let y = comp.pos.y + 0.5;\n            let rightX = x + comp.size.x;\n            let w = comp.size.x + dx;\n            let h = comp.size.y - 1;\n            let frontRad = h * 0.9;\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + w * 0.4, y);\n            ctx.arc(rightX - h/2, y + h / 2, h / 2, -Math.PI / 2, Math.PI / 2);\n            // ctx.arcTo(rightX - 1, y    , x + w, y + h / 2, frontRad);\n            // ctx.lineTo(x + w, y + h / 2);\n\n            // ctx.arcTo(rightX - 1, y + h, x    , y + h, frontRad);\n            ctx.lineTo(x, y + h);\n            ctx.lineTo(x, y);\n            // ctx.arcTo(x + 0.7, y + h / 2, x, y, h * 0.8);\n\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            ctx.restore();\n        },\n        renderDom: ({ comp, exeComp, editCtx, isActive }) => {\n\n            return <CompRectBase comp={comp} hideHover>\n                <BinGate editCtx={editCtx} comp={comp} exeComp={exeComp} isActive={isActive} />\n            </CompRectBase>;\n        },\n    };\n\n    let notW = 3;\n    let notH = 4;\n    let notGate: ICompDef<INotGateData> = {\n        defId: 'gate/not',\n        altDefIds: ['not'],\n        name: \"NOT\",\n        size: new Vec3(notW, notH),\n        ports: [\n            { id: 'i', name: '', pos: new Vec3(0, notH/2), type: PortType.In, width: 1 },\n            { id: 'o', name: '', pos: new Vec3(notW, notH/2), type: PortType.Out, width: 1 },\n        ],\n        build: (builder) => {\n            let data = builder.addData({\n                inPort: builder.getPort('i'),\n                outPort: builder.getPort('o'),\n            });\n\n            builder.addPhase(({ data: { inPort, outPort } }) => {\n                outPort.value = !inPort.value ? 1 : 0;\n            }, [data.inPort], [data.outPort]);\n\n            return builder.build();\n        },\n        renderAll: true,\n        render: ({ comp, ctx, cvs, exeComp }) => {\n            ctx.beginPath();\n            let dy = 0.7;\n            let dx = 0.5;\n            let x = comp.pos.x;\n            let y = comp.pos.y + dy;\n            let rightX = x + comp.size.x - dx;\n            let w = comp.size.x;\n            let h = comp.size.y - dy * 2;\n            ctx.moveTo(x, y);\n            ctx.lineTo(rightX, y + h / 2);\n            ctx.lineTo(x, y + h);\n            ctx.closePath();\n            ctx.moveTo(x + w, y + h / 2);\n            ctx.arc(rightX + dx/2, y + h / 2, dx/2, 0, Math.PI * 2);\n            ctx.moveTo(rightX + dx*0.9, y + h / 2)\n            ctx.arc(rightX + dx/2, y + h / 2, dx * (0.5 - 0.1), 0, Math.PI * 2);\n            ctx.fill(\"evenodd\");\n            ctx.stroke();\n        },\n    };\n\n    return [orGate, xorGate, andGate, notGate];\n}\n\nexport const BinGate: React.FC<{\n    editCtx: IEditContext,\n    comp: IComp<IBinGateConfig>,\n    exeComp: IExeComp<IBinGateData>,\n    isActive: boolean,\n}> = ({ editCtx, comp, isActive }) => {\n    let { setEditorState } = useEditorContext();\n\n\n    useGlobalKeyboard(KeyboardOrder.Element, ev => {\n        if (isKeyWithModifiers(ev, 'r')) {\n            setEditorState(editCompConfig(editCtx, true, comp, a => assignImm(a, { rotate: (a.rotate + 1) % 4 })));\n            ev.preventDefault();\n            ev.stopPropagation();\n        }\n    }, { isActive });\n\n    function handleRotate() {\n        let newRotate = (comp.args.rotate + 1) % 4;\n        setEditorState(editCompConfig(editCtx, true, comp, a => assignImm(a, { rotate: newRotate })));\n    }\n\n    return <div className={\"\"} onClick={handleRotate}></div>;\n};\n","import React from 'react';\nimport { Vec3 } from \"@/src/utils/vector\";\nimport { ICanvasState, IComp, IEditContext, IExeComp, IExePort, IoDir, PortType } from \"../CpuModel\";\nimport { ICompBuilderArgs, ICompDef } from \"./CompBuilder\";\nimport { CompRectBase } from \"./RenderHelpers\";\nimport s from './CompStyles.module.scss';\nimport { editCompConfig, useEditorContext } from '../Editor';\nimport { assignImm } from '@/src/utils/data';\nimport { HexValueEditor, HexValueInputType } from '../displayTools/HexValueEditor';\n\ninterface ICompAddressMapper {\n    busCtrl: IExePort;\n    busData: IExePort;\n    busAddr: IExePort;\n\n    localCtrl: IExePort;\n    localData: IExePort;\n    localAddr: IExePort;\n\n    addrOffset: number;\n    addrMask: number;\n}\n\ninterface IAddressMapperConfig {\n    addrOffset: number;\n    addrMask: number;\n}\n\nexport function createAddressingComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let w = 10;\n    let h = 12;\n    let addrMapper: ICompDef<ICompAddressMapper, IAddressMapperConfig> = {\n        defId: 'bus/addrMap',\n        altDefIds: ['addrMap'],\n        name: \"Address Map\",\n        size: new Vec3(w, h),\n        ports: [\n            { id: 'busCtrl', name: 'Bus Ctrl', pos: new Vec3(0, 2), type: PortType.In | PortType.Ctrl, width: 4 },\n            { id: 'busAddr', name: 'Bus Addr', pos: new Vec3(0, 4), type: PortType.In | PortType.Addr, width: 32 },\n            { id: 'busData', name: 'Bus Data', pos: new Vec3(0, 6), type: PortType.In | PortType.Out | PortType.Tristate, width: 32 },\n\n            { id: 'localCtrl', name: 'Local Ctrl', pos: new Vec3(w, 2), type: PortType.Out | PortType.Ctrl, width: 4 },\n            { id: 'localAddr', name: 'Local Addr', pos: new Vec3(w, 4), type: PortType.Out | PortType.Addr, width: 32 },\n            { id: 'localData', name: 'Local Data', pos: new Vec3(w, 6), type: PortType.In | PortType.Out | PortType.Tristate, width: 32 },\n        ],\n        initConfig: () => ({ addrOffset: 0x1_0000, addrMask: 0xffff }),\n        build: (builder) => {\n            let data = builder.addData({\n                busCtrl: builder.getPort('busCtrl'),\n                busData: builder.getPort('busData'),\n                busAddr: builder.getPort('busAddr'),\n                localCtrl: builder.getPort('localCtrl'),\n                localData: builder.getPort('localData'),\n                localAddr: builder.getPort('localAddr'),\n                addrOffset: builder.comp.args!.addrOffset,\n                addrMask: builder.comp.args!.addrMask,\n            });\n\n            // addresser phases:\n            // read from busCtrl, busAddr\n            // write to localCtrl, localAddr\n            // we're not reading/writing the data lines at this point!\n\n            // read from localData\n            // write to busData\n            // read from busData\n            // write to localData\n\n\n            // hmm, can't make it so we do all writes first, then all reads first, if our addresser straddles 2 buses\n            // since at least one of them has to be re-orded based on read vs write\n\n            // since the choice of read/write decides which bus needs to be evaluated first\n            // so need at least 2 phases on each bus for this to work\n\n            // read from bus: ctrl, addr, data & wrte to local\n            builder.addPhase(({ data: { busCtrl, busAddr, busData, localCtrl, localAddr, localData, addrOffset } }) => {\n                let ctrl = busCtrl.value;\n                let isEnabled = (ctrl & 0b1) === 0b1; // enabled\n                let isWrite = (ctrl & 0b11) === 0b01; // write\n                let isRead = (ctrl & 0b11) === 0b11; // read\n                let addr = busAddr.value;\n                let addrUpperBits = addr & ~data.addrMask;\n                let addrLowerBits = addr & data.addrMask;\n                let isMatch = addrUpperBits === data.addrOffset;\n\n                localCtrl.value = 0b00;\n                // localData.value = 0;\n                // localData.ioEnabled = false;\n                // localData.ioDir = isWrite ? IoDir.Output : IoDir.Input;\n                localAddr.value = 0;\n                // busData.ioEnabled = false;\n                localData.ioEnabled = isEnabled;\n                localData.ioDir = isWrite ? IoDir.Out : IoDir.In;\n                busData.ioEnabled = isEnabled;\n                // console.log('setting busData.ioDir to', IoDir[busData.ioDir]);\n\n                if (isMatch && isEnabled) {\n                    localCtrl.value = ctrl;\n                    localAddr.value = addrLowerBits;\n                    if (isWrite) {\n                        localData.value = busData.value;\n                        localData.ioEnabled = true;\n                        localData.ioDir = IoDir.Out;\n                    }\n                }\n\n            }, [data.busCtrl, data.busAddr, data.busData], [data.localCtrl, data.localAddr, data.localData]);\n\n            // read from local & write to bus: ctrl, addr, data\n            builder.addPhase(({ data: { localCtrl, localData, busData } }) => {\n                busData.ioDir = IoDir.In;\n                let ctrl = localCtrl.value;\n                let isEnabled = (ctrl & 0b1) === 0b1; // enabled\n                let isRead = (ctrl & 0b11) === 0b11; // read\n                if (isRead) {\n                    busData.value = localData.value;\n                    busData.ioDir = isRead ? IoDir.Out : IoDir.In;\n                }\n                busData.ioEnabled = isEnabled; // isRead;\n            }, [data.localData, data.busCtrl], [data.busData]);\n\n            return builder.build();\n        },\n        // renderAll: true,\n        render: ({ comp, ctx, cvs, exeComp }) => {\n            /*\n            ctx.beginPath();\n            // basic structure is a trapezoid, narrower on the right, with slopes of 45deg\n            let dx = 0.2;\n            let x = comp.pos.x - dx;\n            let y = comp.pos.y + 0.5;\n            let rightX = x + comp.size.x;\n            let w = comp.size.x + dx;\n            let h = comp.size.y - 1;\n            let frontRad = h * 0.9;\n            ctx.moveTo(x, y);\n            ctx.arcTo(rightX - 1, y    , x + w, y + h / 2, frontRad);\n            ctx.lineTo(x + w, y + h / 2);\n\n            ctx.arcTo(rightX - 1, y + h, x    , y + h, frontRad);\n            ctx.lineTo(x, y + h);\n            // ctx.arcTo(x + w, y + h, x    , y + h, w / 2);\n\n            ctx.arcTo(x + 0.7, y + h / 2, x, y, h * 0.8);\n\n            // ctx.lineTo(x, y + h);\n            // ctx.lineTo(x + w, y + h / 2);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            */\n        },\n        renderDom: ({ comp, exeComp, editCtx }) => {\n            return <Addressing editCtx={editCtx} comp={comp} exeComp={exeComp} />;\n        },\n    };\n\n    return [addrMapper];\n}\n\nexport const Addressing: React.FC<{\n    editCtx: IEditContext,\n    comp: IComp<IAddressMapperConfig>,\n    exeComp: IExeComp<ICompAddressMapper>,\n}> = ({ editCtx, comp, exeComp }) => {\n\n    let { setEditorState } = useEditorContext();\n\n    function editAddrOffset(end: boolean, value: number) {\n        setEditorState(editCompConfig(editCtx, end, comp, a => assignImm(a, { addrOffset: value })));\n    }\n\n    function editAddrMask(end: boolean, value: number) {\n        setEditorState(editCompConfig(editCtx, end, comp, a => assignImm(a, { addrMask: value })));\n    }\n\n    return <CompRectBase comp={comp} className={s.compAddressing} hideHover>\n        <HexValueEditor value={comp.args.addrOffset} update={editAddrOffset} inputType={HexValueInputType.Hex} fixedInputType minimalBackground padBits={32} />\n        <HexValueEditor value={comp.args.addrMask} update={editAddrMask} inputType={HexValueInputType.Hex} fixedInputType minimalBackground padBits={32} />\n        {/* <input type={'number'} value={comp.args.addrOffset} className={s.addrInput} onChange={ev => editAddrOffset(ev, false)} onBlur={ev => editAddrOffset(ev, true)} />\n        <input type={'number'} value={comp.args.addrMask} className={s.addrInput} onChange={ev => editAddrMask(ev, false)} onBlur={ev => editAddrMask(ev, true)} /> */}\n    </CompRectBase>;\n\n};\n","import React, { memo, useState } from 'react';\nimport { Vec3 } from \"@/src/utils/vector\";\nimport { IComp, IEditContext, IExeComp, IExePort, PortType } from \"../CpuModel\";\nimport { ICompBuilderArgs, ICompDef } from \"./CompBuilder\";\nimport { editCompConfig, useEditorContext } from '../Editor';\nimport { assignImm } from '@/src/utils/data';\nimport { CompRectBase, CompRectUnscaled, makeEditFunction, CheckboxMenuTitle, ConfigMenu, MenuRow } from './RenderHelpers';\nimport s from './CompStyles.module.scss';\nimport { HexValueEditor, HexValueInputType, clampToSignedWidth } from '../displayTools/HexValueEditor';\nimport { FontType, makeCanvasFont } from '../CanvasRenderHelpers';\nimport { PortPlacement, PortResizer, portPlacementToPos } from './CompPort';\n\ninterface IInputConfig {\n    value: number;\n    valueMode: HexValueInputType;\n    bitWidth: number;\n    w: number;\n    h: number;\n    portPos: PortPlacement;\n    signed: boolean;\n}\n\ninterface ICompDataOutput {\n    inPort: IExePort;\n}\n\nexport interface ICompDataInput {\n    outPort: IExePort;\n    value: number;\n}\n\nexport function createInputOutputComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let w = 6;\n    let h = 4;\n    let output: ICompDef<ICompDataOutput> = {\n        defId: 'io/output0',\n        altDefIds: ['output0'],\n        name: \"Output\",\n        size: new Vec3(w, h),\n        ports: [\n            { id: 'x', name: 'x', pos: new Vec3(0, 2), type: PortType.In, width: 32 },\n        ],\n        build: (builder) => {\n            let data = builder.addData({\n                inPort: builder.getPort('x'),\n            });\n\n            builder.addPhase(() => { }, [data.inPort], []);\n\n            return builder.build();\n        },\n        render: ({ comp, cvs, ctx, exeComp, styles }) => {\n            if (!exeComp) {\n                return;\n            }\n\n            ctx.save();\n            ctx.font = makeCanvasFont(styles.fontSize, FontType.Mono);\n            ctx.fillStyle = '#000';\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n\n            let value = exeComp.data.inPort.value;\n            ctx.fillText(value.toString(), comp.pos.x + comp.size.x / 2, comp.pos.y + comp.size.y / 2);\n\n            ctx.restore();\n        },\n    };\n\n\n    let constW = 10;\n    let const32: ICompDef<ICompDataInput, IInputConfig> = {\n        defId: 'io/const32',\n        altDefIds: ['const32'],\n        name: \"Const32\",\n        size: new Vec3(constW, h),\n        ports: (args, compDef) => {\n            let portType = PortType.Out;\n            let pos = portPlacementToPos(args.portPos, args.w, args.h);\n\n            return [\n                { id: 'out', name: '', pos, type: portType, width: args.bitWidth },\n            ];\n        },\n        initConfig: () => ({\n            value: 4,\n            valueMode: HexValueInputType.Hex,\n            bitWidth: 32,\n            h: 4,\n            w: constW,\n            portPos: PortPlacement.Right,\n            signed: false,\n        }),\n        applyConfig: (comp, args) => {\n            comp.size = new Vec3(args.w, args.h);\n        },\n        build: (builder) => {\n            let data = builder.addData({\n                value: builder.comp.args.value,\n                outPort: builder.getPort('out'),\n            });\n\n            builder.addPhase(({ data }) => {\n                data.outPort.value = data.value;\n            }, [], [data.outPort]);\n\n            return builder.build();\n        },\n        render: ({ comp, ctx, cvs, exeComp, styles }) => {\n            // ctx.textAlign = 'center';\n            // ctx.textBaseline = 'middle';\n            // ctx.font = `${styles.fontSize}px monospace`;\n            // ctx.fillStyle = 'black';\n            // ctx.fillText('' + ensureSigned32Bit(exeComp?.data.value ?? 0), comp.pos.x + comp.size.x / 2, comp.pos.y + comp.size.y * 0.5);\n        },\n\n        renderDom: ({ comp, exeComp, styles, editCtx, isActive }) => {\n            return <InputEditor editCtx={editCtx} isActive={isActive} comp={comp} exeComp={exeComp} styles={styles} />;\n        },\n    };\n\n    return [output, const32];\n}\n\nexport const InputEditor: React.FC<{\n    editCtx: IEditContext,\n    isActive: boolean,\n    comp: IComp<IInputConfig>,\n    exeComp: IExeComp<ICompDataInput>, styles: any,\n}> = memo(function InputEditor({ editCtx, comp, isActive }) {\n    let { setEditorState } = useEditorContext();\n\n    let editBitWidth = makeEditFunction(setEditorState, editCtx, comp, (value: number) => ({ bitWidth: value }));\n    let editSigned = makeEditFunction(setEditorState, editCtx, comp, (value: boolean) => ({\n        signed: value,\n        value: clampToSignedWidth(comp.args.value, comp.args.bitWidth, value),\n    }));\n\n    function editValue(end: boolean, value: number, valueMode: HexValueInputType) {\n        setEditorState(editCompConfig(editCtx, end, comp, a => assignImm(a, { value, valueMode })));\n    }\n\n    return <>\n        <CompRectBase comp={comp} className={s.inputNumber} hideHover={true}>\n            <HexValueEditor\n                    className=\"absolute inset-0 px-2\"\n                    inputType={comp.args.valueMode}\n                    value={comp.args.value}\n                    update={editValue}\n                    minimalBackground\n                    readonly={false}\n                    inputClassName=\"text-center\"\n                    maxBits={comp.args.bitWidth}\n                    // padBits={comp.args.bitWidth}\n                    signed={comp.args.signed}\n                    hidePrefix\n            />\n        </CompRectBase>\n        {isActive && <CompRectUnscaled comp={comp} hideHover>\n            <ConfigMenu className=\"absolute top-1 right-1 text-2xl\">\n                <MenuRow title={\"Value\"}>\n                    <HexValueEditor\n                        inputType={comp.args.valueMode}\n                        value={comp.args.value}\n                        update={editValue}\n                        maxBits={comp.args.bitWidth}\n                        padBits={comp.args.bitWidth}\n                        signed={comp.args.signed}\n                    />\n                </MenuRow>\n                <MenuRow title={\"Bit Width\"}>\n                    <HexValueEditor inputType={HexValueInputType.Dec} hidePrefix value={comp.args.bitWidth} update={editBitWidth} />\n                </MenuRow>\n                <MenuRow title={<CheckboxMenuTitle title=\"Signed\" value={comp.args.signed} update={editSigned} />} />\n            </ConfigMenu>\n        </CompRectUnscaled>}\n        {isActive && <PortResizer editCtx={editCtx} comp={comp} />}\n    </>;\n});\n\n\n","import React, { memo } from 'react';\nimport { Vec3 } from \"@/src/utils/vector\";\nimport { IComp, IExeComp, IExePort, IoDir, PortType } from \"../../CpuModel\";\nimport { ICompBuilderArgs, ICompDef } from \"../CompBuilder\";\nimport { CompRectBase } from \"../RenderHelpers\";\nimport s from '../CompStyles.module.scss';\nimport clsx from 'clsx';\n\ninterface ILedOutputData {\n    busCtrl: IExePort;\n    busData: IExePort;\n    busAddr: IExePort;\n\n    bitsOn: number;\n    bitsOff: number;\n    bitsToggle: number;\n    newValue: number | null;\n\n    value: number;\n}\n\ninterface ILedOutputConfig {\n}\n\n// need to make a list of registers we can read & write to\n// then have functions for reading & writing\n// maybe a list of functions that take in the data object, whether to read or write\n// and the address is given by the order in the list\n\ntype IRegAccess<T> = (data: T, value: number, isWrite: boolean) => number;\n\ninterface IRegDef<T> {\n    regs: IRegAccess<T>[];\n}\n\nlet ledOutputRegAccess: IRegDef<ILedOutputData> = {\n    regs: [\n        function ledState(data, value, isWrite) {\n            if (isWrite) {\n                data.newValue = value;\n            }\n            return data.value;\n        },\n        function ledToggleOn(data, value, isWrite) {\n            if (isWrite) {\n                data.newValue = data.value | value;\n                data.bitsOn = value;\n            }\n            return 0;\n        },\n        function ledToggleOff(data, value, isWrite) {\n            if (isWrite) {\n                data.newValue = data.value & ~value;\n                data.bitsOff = value;\n            }\n            return 0;\n        },\n        function ledToggle(data, value, isWrite) {\n            if (isWrite) {\n                data.newValue = data.value ^ value;\n                data.bitsToggle = value;\n            }\n            return 0;\n        }\n    ],\n};\n\nexport function createLedOutputComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let w = 30;\n    let h = 8;\n    let ledOutputSimple: ICompDef<ILedOutputData, ILedOutputConfig> = {\n        defId: 'io/ledOutput0',\n        altDefIds: ['p_ledOutput'],\n        name: \"LED Output\",\n        size: new Vec3(w, h),\n        ports: [\n            { id: 'busCtrl', name: 'C', pos: new Vec3(0, 2), type: PortType.In | PortType.Ctrl, width: 4 },\n            { id: 'busAddr', name: 'A', pos: new Vec3(0, 4), type: PortType.In | PortType.Addr, width: 32 },\n            { id: 'busData', name: 'D', pos: new Vec3(0, 6), type: PortType.In | PortType.Out | PortType.Tristate, width: 32 },\n        ],\n        // initConfig: () => ({ addrOffset: 0x1_0000, addrMask: 0xffff }),\n        copyStatefulData: (src, dest) => {\n            dest.value = src.value;\n        },\n        reset: (comp) => {\n            comp.data.value = 0;\n        },\n        build: (builder) => {\n            let data = builder.addData({\n                busCtrl: builder.getPort('busCtrl'),\n                busData: builder.getPort('busData'),\n                busAddr: builder.getPort('busAddr'),\n                value: 0,\n                bitsOn: 0,\n                bitsOff: 0,\n                bitsToggle: 0,\n                newValue: null,\n            });\n\n            // read from bus & write to local\n            builder.addPhase(({ data: { busCtrl, busAddr, busData } }) => {\n                let ctrl = busCtrl.value;\n                let isEnabled = (ctrl & 0b1) === 0b1; // enabled\n                let isWrite = (ctrl & 0b11) === 0b01; // write\n                let isRead = (ctrl & 0b11) === 0b11; // read\n                let addr = busAddr.value;\n                data.bitsOn = 0;\n                data.bitsOff = 0;\n                data.bitsToggle = 0;\n                data.newValue = null;\n\n                if (isWrite) {\n                    // write to local with addr\n                    let fn = ledOutputRegAccess.regs[addr];\n                    if (fn) {\n                        fn(data, busData.value, true);\n                    }\n                }\n\n                busData.ioEnabled = isEnabled;\n                busData.ioDir = isRead ? IoDir.Out : IoDir.In;\n\n            }, [data.busCtrl, data.busAddr, data.busData], []);\n\n            // read from local & write to bus\n            builder.addPhase(({ data: { busCtrl, busAddr, busData } }) => {\n                let ctrl = busCtrl.value;\n                let isEnabled = (ctrl & 0b1) === 0b1; // enabled\n                let isRead = (ctrl & 0b11) === 0b11; // read\n                if (isRead) {\n                    let fn = ledOutputRegAccess.regs[busAddr.value];\n                    if (fn) {\n                        busData.value = fn(data, 0, false);\n                    } else {\n                        busData.value = 0;\n                    }\n                }\n                busData.ioEnabled = isEnabled;\n            }, [], [data.busData]);\n\n            builder.addLatchedPhase(({ data: { busCtrl, busAddr, busData } }) => {\n                if (data.newValue !== null) {\n                    data.value = data.newValue;\n                }\n            }, [], []);\n\n            return builder.build();\n        },\n        // renderAll: true,\n        render: ({ comp, ctx, cvs, exeComp }) => {\n        },\n        renderDom: ({ comp, exeComp }) => {\n            return <LedOutputSimple comp={comp} exeComp={exeComp} value={exeComp.data.value} />;\n        },\n    };\n\n    return [ledOutputSimple];\n}\n\nconst LedOutputSimple: React.FC<{\n    comp: IComp<ILedOutputConfig>,\n    exeComp: IExeComp<ILedOutputData>,\n    value: number,\n}> = memo(function LedOutputSimple({ comp, exeComp, value }) {\n\n    let ledBits: boolean[] = [];\n    for (let i = 0; i < 8; i++) {\n        let isOn = (value & (1 << i)) !== 0;\n        ledBits.push(isOn);\n    }\n\n    return <CompRectBase comp={comp} className={s.compLedOutputSimple} hideHover>\n        <div>{'0x' + value.toString(16).padStart(8, '0')}</div>\n        <div className={s.ledOutput}>\n            {ledBits.map((en, i) => {\n                return <div key={i} className={clsx(s.ledOutputBit, en && s.enabled)} />;\n            })}\n        </div>\n    </CompRectBase>;\n\n});\n","\nimport React from 'react';\nimport { Vec3 } from \"@/src/utils/vector\";\nimport s from '../CompStyles.module.scss';\nimport riscvS from './Riscv.module.scss';\n\nimport { assignImm } from '@/src/utils/data';\nimport { ICanvasState, IComp, IEditContext, IExeComp, IExePort, PortType } from '../../CpuModel';\nimport { HexValueEditor, HexValueInputType } from '../../displayTools/HexValueEditor';\nimport { useEditorContext, editCompConfig } from '../../Editor';\nimport { ICompBuilderArgs, ICompDef } from '../CompBuilder';\nimport { CompRectBase } from '../RenderHelpers';\nimport { riscvInColor, riscvOutAColor, riscvOutBColor } from '../Registers';\n\ninterface IRegFileCtrlConfig {\n    inEnable: boolean;\n    inReg: number;\n\n    outAEnable: boolean;\n    outAReg: number;\n\n    outBEnable: boolean;\n    outBReg: number;\n}\n\ninterface IRegFileCtrlData extends IRegFileCtrlConfig {\n    ctrl: IExePort;\n}\n\nexport function createRegFileCtrlComps(_args: ICompBuilderArgs): ICompDef<any>[] {\n\n    let w = 10;\n    let h = 12;\n    let regFileCtrl: ICompDef<IRegFileCtrlData, IRegFileCtrlConfig> = {\n        defId: 'riscv/regFile0Input',\n        altDefIds: ['riscvRegFile0Input'],\n        name: \"Reg File Input\",\n        size: new Vec3(w, h),\n        ports: [\n            { id: 'ctrl', name: 'Ctrl', pos: new Vec3(w/2, h), type: PortType.Out | PortType.Ctrl, width: 3 * 6 },\n        ],\n        initConfig: () => ({ inEnable: false, inReg: 0, outAEnable: false, outAReg: 0, outBEnable: false, outBReg: 0 }),\n        build: (builder) => {\n            let args = builder.comp.args;\n            let data = builder.addData({\n                ...args,\n                ctrl: builder.getPort('ctrl'),\n            });\n\n            // read from bus: ctrl, addr, data & wrte to local\n            builder.addPhase(({ data: { ctrl } }) => {\n\n                    // 0: read LHS, 1: read RHS, 2: write\n                function setRegCtrl(enable: boolean, addr: number, offset: number) {\n                    let a = (enable ? 1 : 0) | (addr & 0b11111) << 1;\n                    let val = ctrl.value;\n                    val = (val & ~(0b111111 << (offset * 6))) | (a << (offset * 6));\n                    ctrl.value = val;\n                }\n\n                setRegCtrl(args.outAEnable, args.outAReg, 0);\n                setRegCtrl(args.outBEnable, args.outBReg, 1);\n                setRegCtrl(args.inEnable, args.inReg, 2);\n\n            }, [], [data.ctrl]);\n\n            return builder.build();\n        },\n        renderDom: ({ editCtx, comp, exeComp }) => {\n            return <RegFileCtrl editCtx={editCtx} comp={comp} exeComp={exeComp} />;\n        },\n    };\n\n    return [regFileCtrl];\n}\n\nexport const RegFileCtrl: React.FC<{\n    editCtx: IEditContext,\n    comp: IComp<IRegFileCtrlConfig>,\n    exeComp: IExeComp<IRegFileCtrlData>,\n}> = ({ editCtx, comp, exeComp }) => {\n\n    let { setEditorState } = useEditorContext();\n\n    function editAddrOffset(end: boolean, enabled: boolean, value: number) {\n        setEditorState(editCompConfig(editCtx, end, comp, a => assignImm(a, { inReg: value, inEnable: enabled })));\n    }\n\n    function editOutRegA(end: boolean, enabled: boolean, value: number) {\n        setEditorState(editCompConfig(editCtx, end, comp, a => assignImm(a, { outAReg: value, outAEnable: enabled })));\n    }\n\n    function editOutRegB(end: boolean, enabled: boolean, value: number) {\n        setEditorState(editCompConfig(editCtx, end, comp, a => assignImm(a, { outBReg: value, outBEnable: enabled })));\n    }\n\n    return <CompRectBase comp={comp} className={s.compRegFileCtrl} hideHover>\n        <RegSelect name={\"In\"} enabled={comp.args.inEnable} value={comp.args.inReg} setValue={editAddrOffset} color={riscvInColor} />\n        <RegSelect name={\"OutA\"} enabled={comp.args.outAEnable} value={comp.args.outAReg} setValue={editOutRegA} color={riscvOutAColor} />\n        <RegSelect name={\"OutB\"} enabled={comp.args.outBEnable} value={comp.args.outBReg} setValue={editOutRegB} color={riscvOutBColor} />\n    </CompRectBase>;\n};\n\nexport const RegSelect: React.FC<{\n    name: string,\n    enabled: boolean,\n    value: number,\n    color?: string,\n    setValue: (end: boolean, enabled: boolean, value: number) => void,\n}> = ({ name, enabled, value, setValue, color }) => {\n\n    function editEnabled(ev: React.ChangeEvent, end: boolean, enabled: boolean) {\n        setValue(end, enabled, value);\n        ev.stopPropagation();\n        ev.preventDefault();\n    }\n\n    function editValue(end: boolean, value: number) {\n        setValue(end, enabled, value);\n    }\n\n    return <div className={s.regSelect}>\n        <label onDoubleClick={ev => ev.preventDefault()}>\n            <div className={s.text} style={{ backgroundColor: color }}>{name}</div>\n            <input type=\"checkbox\" checked={enabled} onChange={ev => editEnabled(ev, true, ev.target.checked)} />\n        </label>\n        <HexValueEditor\n            className={s.regHex}\n            value={value}\n            update={editValue}\n            inputType={HexValueInputType.Dec}\n            fixedInputType\n            hidePrefix\n            minimalBackground\n            padBits={5}\n        />\n    </div>;\n};\n","import { createAluComps } from \"./Alu\";\nimport { CompLibrary as CompLibrary, ICompBuilderArgs } from \"./CompBuilder\";\nimport { createRegisterComps } from \"./Registers\";\nimport { createRiscvInsDecodeComps } from \"./RiscvInsDecode\";\nimport { createRiscvExtraComps } from \"./RiscvExtra\";\nimport { createMuxComps } from \"./Mux\";\nimport { createSimpleMemoryComps } from \"./SimpleMemory\";\nimport { createBinaryGateComps } from \"./BinaryGates\";\nimport { createAddressingComps } from \"./Addressing\";\nimport { createInputOutputComps } from \"./InputOutput\";\nimport { createLedOutputComps } from \"./peripheral/LedOutputSimple\";\nimport { createRegFileCtrlComps } from \"./riscv/RegisterControl\";\nimport { createCompIoComps } from \"./CompPort\";\n\nexport function buildCompLibrary() {\n    let compLibrary = new CompLibrary();\n\n    let args: ICompBuilderArgs = { };\n\n    let comps = [\n        ...createRegisterComps(args),\n        ...createAluComps(args),\n        ...createRiscvExtraComps(args),\n        ...createRiscvInsDecodeComps(args),\n        ...createMuxComps(args),\n        ...createSimpleMemoryComps(args),\n        ...createBinaryGateComps(args),\n        ...createAddressingComps(args),\n        ...createInputOutputComps(args),\n        ...createLedOutputComps(args),\n        ...createRegFileCtrlComps(args),\n        ...createCompIoComps(args),\n    ];\n\n    for (let comp of comps) {\n        let extraId = 'core/' + comp.defId;\n        comp.altDefIds = [...comp.altDefIds ?? [], comp.defId];\n        comp.defId = extraId;\n        compLibrary.addComp(comp);\n    }\n\n    return compLibrary;\n}\n","import React, { createContext, useEffect, useState } from 'react';\nimport { CompLibrary } from '../comps/CompBuilder';\nimport { CodeSuiteManager } from './CodeSuiteManager';\nimport { SchematicLibrary } from '../schematics/SchematicLibrary';\nimport { buildCompLibrary } from '../comps/builtins';\n\nexport interface ISharedContext {\n    compLibrary: CompLibrary;\n    schematicLibrary: SchematicLibrary;\n    codeLibrary: CodeSuiteManager;\n}\n\nexport const SharedContextContext = createContext<ISharedContext | null>(null);\n\n/// Creates shared context for use across an entire page (used by the various editors within a page)\nexport function useCreateSharedContext(): ISharedContext {\n    let [sharedContext, setSharedContext] = useState(() => createSharedContext(true));\n\n    useEffect(() => {\n        setSharedContext(createSharedContext());\n    }, []);\n\n    return sharedContext;\n}\n\n\nexport function createSharedContext(disableLocalStorageLoad?: boolean): ISharedContext {\n\n    let schematicLibrary = new SchematicLibrary();\n    let compLibrary = buildCompLibrary();\n    schematicLibrary.populateSchematicLibrary(compLibrary, !disableLocalStorageLoad);\n    let codeLibrary = new CodeSuiteManager();\n\n    return {\n        compLibrary,\n        schematicLibrary,\n        codeLibrary,\n    };\n}\n","\nimport resolveConfig from 'tailwindcss/resolveConfig'\nimport tailwindConfig from '../..//tailwind.config.js'\n\nlet cfg = resolveConfig(tailwindConfig);\n\nlet colors = cfg.theme!.colors! as Record<Color, Record<Values, string>>;\n\ntype Color = 'current'\n| 'transparent'\n| 'black'\n| 'white'\n| 'slate'\n| 'gray'\n| 'zinc'\n| 'neutral'\n| 'stone'\n| 'red'\n| 'orange'\n| 'amber'\n| 'yellow'\n| 'lime'\n| 'green'\n| 'emerald'\n| 'teal'\n| 'cyan'\n| 'sky'\n| 'blue'\n| 'indigo'\n| 'violet'\n| 'purple'\n| 'fuchsia'\n| 'pink'\n| 'rose';\n\ntype Values = '50'\n| '100'\n| '200'\n| '300'\n| '400'\n| '500'\n| '600'\n| '700'\n| '800'\n| '900'\n| '950';\n\nexport const palette = {\n    compBg: colors.cyan['500'],\n    portInputBg: 'rgb(45 212 191)',\n    portOutputBg: 'rgb(251 146 60)',\n};\n\nexport const paletteTw = {\n    compBg: 'bg-cyan-500',\n    portInputBg: 'bg-teal-400',\n    portOutputBg: 'bg-orange-400',\n};\n","\nimport { ILSSchematic } from \"@/src/cpu/schematics/SchematicLibrary\";\nexport const pcCounterSchematic: ILSSchematic = {\"id\":\"c-a7yetcbo\",\"name\":\"PC Counter\",\"model\":{\"wires\":[{\"nodes\":[{\"id\":0,\"x\":41,\"y\":-12,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"8\",\"compNodeId\":\"out\"}},{\"id\":1,\"x\":44,\"y\":-12,\"edges\":[0,2]},{\"id\":2,\"x\":44,\"y\":-6,\"edges\":[1,3]},{\"id\":3,\"x\":47,\"y\":-6,\"edges\":[2],\"ref\":{\"type\":3,\"id\":\"7\",\"compNodeId\":\"a\"}}]},{\"nodes\":[{\"id\":0,\"x\":41,\"y\":-4,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"6\",\"compNodeId\":\"out\"}},{\"id\":1,\"x\":45,\"y\":-4,\"edges\":[0,2]},{\"id\":2,\"x\":45,\"y\":-4,\"edges\":[1,3]},{\"id\":3,\"x\":47,\"y\":-4,\"edges\":[2],\"ref\":{\"type\":3,\"id\":\"7\",\"compNodeId\":\"b\"}}]},{\"nodes\":[{\"id\":0,\"x\":49,\"y\":-4,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"7\",\"compNodeId\":\"out\"}},{\"id\":1,\"x\":52,\"y\":-4,\"edges\":[0,2]},{\"id\":2,\"x\":52,\"y\":3,\"edges\":[1,3]},{\"id\":3,\"x\":-2,\"y\":3,\"edges\":[2,4]},{\"id\":4,\"x\":-2,\"y\":-4,\"edges\":[3,5]},{\"id\":5,\"x\":1,\"y\":-4,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"6\",\"compNodeId\":\"in\"}}]}],\"comps\":[{\"id\":\"6\",\"defId\":\"core/flipflop/reg1\",\"x\":1,\"y\":-7,\"args\":null},{\"id\":\"7\",\"defId\":\"core/math/adder\",\"x\":47,\"y\":-7,\"args\":null},{\"id\":\"8\",\"defId\":\"core/io/const32\",\"x\":37,\"y\":-14,\"args\":{\"value\":4,\"valueMode\":0,\"bitWidth\":32,\"h\":4,\"w\":4,\"portPos\":0,\"signed\":false}}]}};\n\nexport const pcCounterSchematicStr = `#wire-schema 1\nC 6 core/flipflop/reg1 p:1,-7\nC 7 core/math/adder p:47,-7\nC 8 core/io/const32 p:37,-14 c:{\"value\":4,\"valueMode\":0,\"bitWidth\":32,\"h\":4,\"w\":4,\"portPos\":0,\"signed\":false}\nW 0 ns:[41,-12 p:8/out|44,-12,0|44,-6,1|47,-6,2 p:7/a]\nW 1 ns:[41,-4 p:6/out|45,-4,0|45,-4,1|47,-4,2 p:7/b]\nW 2 ns:[49,-4 p:7/out|52,-4,0|52,3,1|-2,3,2|-2,-4,3|1,-4,4 p:6/in]\n`;\n","\nimport { ILSSchematic } from \"@/src/cpu/schematics/SchematicLibrary\";\nexport const regFileDemoSchematic: ILSSchematic = {\"id\":\"reg-file-demo\",\"name\":\"Reg File Demo\",\"model\":{\"wires\":[{\"nodes\":[{\"id\":0,\"x\":587,\"y\":351,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"1\",\"compNodeId\":\"ctrl\"}},{\"id\":1,\"x\":587,\"y\":350,\"edges\":[0,2]},{\"id\":2,\"x\":601,\"y\":350,\"edges\":[1,3]},{\"id\":3,\"x\":601,\"y\":347,\"edges\":[2],\"ref\":{\"type\":3,\"id\":\"0\",\"compNodeId\":\"ctrl\"}}]},{\"nodes\":[{\"id\":0,\"x\":623,\"y\":354,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"1\",\"compNodeId\":\"outA\"}},{\"id\":1,\"x\":624,\"y\":354,\"edges\":[0,2]},{\"id\":2,\"x\":624,\"y\":350,\"edges\":[1,3]},{\"id\":3,\"x\":608,\"y\":350,\"edges\":[2,4]},{\"id\":4,\"x\":608,\"y\":345,\"edges\":[3,5]},{\"id\":5,\"x\":609,\"y\":345,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"3\",\"compNodeId\":\"x\"}}]},{\"nodes\":[{\"id\":0,\"x\":623,\"y\":357,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"1\",\"compNodeId\":\"outB\"}},{\"id\":1,\"x\":625,\"y\":357,\"edges\":[0,2]},{\"id\":2,\"x\":625,\"y\":349,\"edges\":[1,3]},{\"id\":3,\"x\":616,\"y\":349,\"edges\":[2,4]},{\"id\":4,\"x\":616,\"y\":345,\"edges\":[3,5]},{\"id\":5,\"x\":617,\"y\":345,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"4\",\"compNodeId\":\"x\"}}]},{\"nodes\":[{\"id\":0,\"x\":594,\"y\":345,\"edges\":[1,2]},{\"id\":1,\"x\":594,\"y\":349,\"edges\":[0,3]},{\"id\":2,\"x\":593,\"y\":345,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"2\",\"compNodeId\":\"out\"}},{\"id\":3,\"x\":582,\"y\":349,\"edges\":[1,4]},{\"id\":4,\"x\":582,\"y\":354,\"edges\":[3,5]},{\"id\":5,\"x\":583,\"y\":354,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"1\",\"compNodeId\":\"in\"}}]}],\"comps\":[{\"id\":\"0\",\"defId\":\"core/riscv/regFile0Input\",\"x\":596,\"y\":335,\"args\":{\"inEnable\":true,\"inReg\":3,\"outAEnable\":true,\"outAReg\":3,\"outBEnable\":true,\"outBReg\":4}},{\"id\":\"1\",\"defId\":\"core/riscv/reg32\",\"x\":583,\"y\":351,\"args\":null},{\"id\":\"2\",\"defId\":\"core/io/const32\",\"x\":583,\"y\":343,\"args\":{\"value\":7,\"valueMode\":0,\"bitWidth\":32,\"h\":4,\"w\":10,\"portPos\":0,\"signed\":false}},{\"id\":\"3\",\"defId\":\"core/io/output0\",\"x\":609,\"y\":343,\"args\":null},{\"id\":\"4\",\"defId\":\"core/io/output0\",\"x\":617,\"y\":343,\"args\":null}]}};\n\nexport const regFileDemoSchematicStr = `#wire-schema 1\nC 0 core/riscv/regFile0Input p:596,335 c:{\"inEnable\":true,\"inReg\":3,\"outAEnable\":true,\"outAReg\":3,\"outBEnable\":true,\"outBReg\":4}\nC 1 core/riscv/reg32 p:583,351\nC 2 core/io/const32 p:583,343 c:{\"value\":7,\"valueMode\":0,\"bitWidth\":32,\"h\":4,\"w\":10,\"portPos\":0,\"signed\":false}\nC 3 core/io/output0 p:609,343\nC 4 core/io/output0 p:617,343\nW 0 ns:[587,351 p:1/ctrl|587,350,0|601,350,1|601,347,2 p:0/ctrl]\nW 1 ns:[623,354 p:1/outA|624,354,0|624,350,1|608,350,2|608,345,3|609,345,4 p:3/x]\nW 2 ns:[623,357 p:1/outB|625,357,0|625,349,1|616,349,2|616,345,3|617,345,4 p:4/x]\nW 3 ns:[594,345|594,349,0|593,345,0 p:2/out|582,349,1|582,354,3|583,354,4 p:1/in]\n`;\n","\nimport { ILSSchematic } from \"@/src/cpu/schematics/SchematicLibrary\";\nexport const riscvBasicSchematic: ILSSchematic = {\"id\":\"riscv-basic\",\"name\":\"RISCV Basic\",\"model\":{\"wires\":[{\"nodes\":[{\"id\":0,\"x\":-6,\"y\":44,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"1\",\"compNodeId\":\"in\"}},{\"id\":1,\"x\":-11,\"y\":44,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"7\",\"compNodeId\":\"out\"}}]},{\"nodes\":[{\"id\":0,\"x\":-14,\"y\":31,\"edges\":[1,2]},{\"id\":1,\"x\":-14,\"y\":35,\"edges\":[0,3,4]},{\"id\":2,\"x\":-13,\"y\":31,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"8\",\"compNodeId\":\"b\"}},{\"id\":3,\"x\":42,\"y\":35,\"edges\":[1,5]},{\"id\":4,\"x\":-14,\"y\":43,\"edges\":[1,6]},{\"id\":5,\"x\":42,\"y\":30,\"edges\":[3,7]},{\"id\":6,\"x\":-13,\"y\":43,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"7\",\"compNodeId\":\"a\"}},{\"id\":7,\"x\":41,\"y\":30,\"edges\":[5],\"ref\":{\"type\":3,\"id\":\"9\",\"compNodeId\":\"out\"}}]},{\"nodes\":[{\"id\":0,\"x\":35,\"y\":19,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"13\",\"compNodeId\":\"a\"}},{\"id\":1,\"x\":31,\"y\":19,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"12\",\"compNodeId\":\"out\"}}]},{\"nodes\":[{\"id\":0,\"x\":-2,\"y\":41,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"1\",\"compNodeId\":\"ctrl\"}},{\"id\":1,\"x\":-2,\"y\":14,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"5\",\"compNodeId\":\"regCtrl\"}}]},{\"nodes\":[{\"id\":0,\"x\":36,\"y\":17,\"edges\":[1,2]},{\"id\":1,\"x\":36,\"y\":18,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"13\",\"compNodeId\":\"sel\"}},{\"id\":2,\"x\":41,\"y\":17,\"edges\":[0,3]},{\"id\":3,\"x\":41,\"y\":26,\"edges\":[2,4]},{\"id\":4,\"x\":53,\"y\":26,\"edges\":[3,5]},{\"id\":5,\"x\":53,\"y\":25,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"2\",\"compNodeId\":\"branch\"}}]},{\"nodes\":[{\"id\":0,\"x\":34,\"y\":-5,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"5\",\"compNodeId\":\"loadStoreCtrl\"}},{\"id\":1,\"x\":40,\"y\":-5,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"14\",\"compNodeId\":\"ctrl\"}}]},{\"nodes\":[{\"id\":0,\"x\":34,\"y\":-4,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"5\",\"compNodeId\":\"addrOffset\"}},{\"id\":1,\"x\":40,\"y\":-4,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"14\",\"compNodeId\":\"addrOffset\"}}]},{\"nodes\":[{\"id\":0,\"x\":-11,\"y\":30,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"8\",\"compNodeId\":\"out\"}},{\"id\":1,\"x\":-6,\"y\":30,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"3\",\"compNodeId\":\"in\"}}]},{\"nodes\":[{\"id\":0,\"x\":34,\"y\":44,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"1\",\"compNodeId\":\"outA\"}},{\"id\":1,\"x\":40,\"y\":44,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"10\",\"compNodeId\":\"b\"}}]},{\"nodes\":[{\"id\":0,\"x\":37,\"y\":20,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"13\",\"compNodeId\":\"out\"}},{\"id\":1,\"x\":38,\"y\":20,\"edges\":[0,2]},{\"id\":2,\"x\":38,\"y\":28,\"edges\":[1,3]},{\"id\":3,\"x\":39,\"y\":28,\"edges\":[2],\"ref\":{\"type\":3,\"id\":\"9\",\"compNodeId\":\"a\"}}]},{\"nodes\":[{\"id\":0,\"x\":34,\"y\":30,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"3\",\"compNodeId\":\"out\"}},{\"id\":1,\"x\":36,\"y\":30,\"edges\":[0,2,3,4]},{\"id\":2,\"x\":36,\"y\":24,\"edges\":[1,5]},{\"id\":3,\"x\":36,\"y\":42,\"edges\":[1,6]},{\"id\":4,\"x\":39,\"y\":30,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"9\",\"compNodeId\":\"b\"}},{\"id\":5,\"x\":-12,\"y\":24,\"edges\":[2,7]},{\"id\":6,\"x\":40,\"y\":42,\"edges\":[3],\"ref\":{\"type\":3,\"id\":\"10\",\"compNodeId\":\"a\"}},{\"id\":7,\"x\":-12,\"y\":-4,\"edges\":[5,8]},{\"id\":8,\"x\":-19,\"y\":-4,\"edges\":[7],\"ref\":{\"type\":3,\"id\":\"11\",\"compNodeId\":\"addr\"}}]},{\"nodes\":[{\"id\":0,\"x\":-12,\"y\":42,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"7\",\"compNodeId\":\"sel\"}},{\"id\":1,\"x\":-9,\"y\":42,\"edges\":[0,2]},{\"id\":2,\"x\":-9,\"y\":28,\"edges\":[1,3,4]},{\"id\":3,\"x\":-12,\"y\":28,\"edges\":[2],\"ref\":{\"type\":3,\"id\":\"8\",\"compNodeId\":\"sel\"}},{\"id\":4,\"x\":-9,\"y\":18,\"edges\":[2,5]},{\"id\":5,\"x\":-5,\"y\":18,\"edges\":[4,6]},{\"id\":6,\"x\":-5,\"y\":14,\"edges\":[5],\"ref\":{\"type\":3,\"id\":\"5\",\"compNodeId\":\"pcRegMuxCtrl\"}}]},{\"nodes\":[{\"id\":0,\"x\":64,\"y\":0,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"14\",\"compNodeId\":\"dataOut\"}},{\"id\":1,\"x\":67,\"y\":0,\"edges\":[0,2]},{\"id\":2,\"x\":67,\"y\":27,\"edges\":[1,3]},{\"id\":3,\"x\":57,\"y\":27,\"edges\":[2,4,5]},{\"id\":4,\"x\":57,\"y\":37,\"edges\":[3,6]},{\"id\":5,\"x\":57,\"y\":25,\"edges\":[3],\"ref\":{\"type\":3,\"id\":\"2\",\"compNodeId\":\"result\"}},{\"id\":6,\"x\":-16,\"y\":37,\"edges\":[4,7,8]},{\"id\":7,\"x\":-16,\"y\":45,\"edges\":[6,9]},{\"id\":8,\"x\":-16,\"y\":29,\"edges\":[6,10]},{\"id\":9,\"x\":-13,\"y\":45,\"edges\":[7],\"ref\":{\"type\":3,\"id\":\"7\",\"compNodeId\":\"b\"}},{\"id\":10,\"x\":-13,\"y\":29,\"edges\":[8],\"ref\":{\"type\":3,\"id\":\"8\",\"compNodeId\":\"a\"}}]},{\"nodes\":[{\"id\":0,\"x\":-66,\"y\":29,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"16\",\"compNodeId\":\"busCtrl\"}},{\"id\":1,\"x\":-68,\"y\":29,\"edges\":[0,2,3]},{\"id\":2,\"x\":-68,\"y\":-8,\"edges\":[1,4]},{\"id\":3,\"x\":-68,\"y\":62,\"edges\":[1,5]},{\"id\":4,\"x\":44,\"y\":-8,\"edges\":[2,6]},{\"id\":5,\"x\":-66,\"y\":62,\"edges\":[3],\"ref\":{\"type\":3,\"id\":\"17\",\"compNodeId\":\"busCtrl\"}},{\"id\":6,\"x\":44,\"y\":-6,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"14\",\"compNodeId\":\"busCtrl\"}}]},{\"nodes\":[{\"id\":0,\"x\":-66,\"y\":31,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"16\",\"compNodeId\":\"busAddr\"}},{\"id\":1,\"x\":-70,\"y\":31,\"edges\":[0,2,3]},{\"id\":2,\"x\":-70,\"y\":-10,\"edges\":[1,4]},{\"id\":3,\"x\":-70,\"y\":64,\"edges\":[1,5]},{\"id\":4,\"x\":48,\"y\":-10,\"edges\":[2,6]},{\"id\":5,\"x\":-66,\"y\":64,\"edges\":[3],\"ref\":{\"type\":3,\"id\":\"17\",\"compNodeId\":\"busAddr\"}},{\"id\":6,\"x\":48,\"y\":-6,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"14\",\"compNodeId\":\"busAddr\"}}]},{\"nodes\":[{\"id\":0,\"x\":-66,\"y\":33,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"16\",\"compNodeId\":\"busData\"}},{\"id\":1,\"x\":-72,\"y\":33,\"edges\":[0,2,3]},{\"id\":2,\"x\":-72,\"y\":-12,\"edges\":[1,4]},{\"id\":3,\"x\":-72,\"y\":66,\"edges\":[1,5]},{\"id\":4,\"x\":52,\"y\":-12,\"edges\":[2,6]},{\"id\":5,\"x\":-66,\"y\":66,\"edges\":[3],\"ref\":{\"type\":3,\"id\":\"17\",\"compNodeId\":\"busData\"}},{\"id\":6,\"x\":52,\"y\":-6,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"14\",\"compNodeId\":\"busData\"}}]},{\"nodes\":[{\"id\":0,\"x\":-56,\"y\":29,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"16\",\"compNodeId\":\"localCtrl\"}},{\"id\":1,\"x\":-54,\"y\":29,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"15\",\"compNodeId\":\"ctrl\"}}]},{\"nodes\":[{\"id\":0,\"x\":-56,\"y\":31,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"16\",\"compNodeId\":\"localAddr\"}},{\"id\":1,\"x\":-54,\"y\":31,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"15\",\"compNodeId\":\"addr\"}}]},{\"nodes\":[{\"id\":0,\"x\":-56,\"y\":33,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"16\",\"compNodeId\":\"localData\"}},{\"id\":1,\"x\":-54,\"y\":33,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"15\",\"compNodeId\":\"data\"}}]},{\"nodes\":[{\"id\":0,\"x\":34,\"y\":22,\"edges\":[1,2]},{\"id\":1,\"x\":1,\"y\":22,\"edges\":[0,3]},{\"id\":2,\"x\":34,\"y\":21,\"edges\":[0,4]},{\"id\":3,\"x\":1,\"y\":14,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"5\",\"compNodeId\":\"pcAddImm\"}},{\"id\":4,\"x\":35,\"y\":21,\"edges\":[2],\"ref\":{\"type\":3,\"id\":\"13\",\"compNodeId\":\"b\"}}]},{\"nodes\":[{\"id\":0,\"x\":-56,\"y\":62,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"17\",\"compNodeId\":\"localCtrl\"}},{\"id\":1,\"x\":-54,\"y\":62,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"18\",\"compNodeId\":\"busCtrl\"}}]},{\"nodes\":[{\"id\":0,\"x\":-56,\"y\":64,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"17\",\"compNodeId\":\"localAddr\"}},{\"id\":1,\"x\":-54,\"y\":64,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"18\",\"compNodeId\":\"busAddr\"}}]},{\"nodes\":[{\"id\":0,\"x\":-56,\"y\":66,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"17\",\"compNodeId\":\"localData\"}},{\"id\":1,\"x\":-54,\"y\":66,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"18\",\"compNodeId\":\"busData\"}}]},{\"nodes\":[{\"id\":0,\"x\":38,\"y\":9,\"edges\":[1,2]},{\"id\":1,\"x\":38,\"y\":0,\"edges\":[0,3]},{\"id\":2,\"x\":41,\"y\":9,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"19\",\"compNodeId\":\"a\"}},{\"id\":3,\"x\":34,\"y\":0,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"5\",\"compNodeId\":\"rhsImm\"}}]},{\"nodes\":[{\"id\":0,\"x\":43,\"y\":10,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"19\",\"compNodeId\":\"out\"}},{\"id\":1,\"x\":52,\"y\":10,\"edges\":[0,2,3]},{\"id\":2,\"x\":52,\"y\":6,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"14\",\"compNodeId\":\"dataIn\"}},{\"id\":3,\"x\":62,\"y\":10,\"edges\":[1,4]},{\"id\":4,\"x\":62,\"y\":13,\"edges\":[3],\"ref\":{\"type\":3,\"id\":\"2\",\"compNodeId\":\"rhs\"}}]},{\"nodes\":[{\"id\":0,\"x\":47,\"y\":47,\"edges\":[1,2]},{\"id\":1,\"x\":34,\"y\":47,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"1\",\"compNodeId\":\"outB\"}},{\"id\":2,\"x\":47,\"y\":14,\"edges\":[0,3]},{\"id\":3,\"x\":38,\"y\":14,\"edges\":[2,4]},{\"id\":4,\"x\":38,\"y\":11,\"edges\":[3,5]},{\"id\":5,\"x\":41,\"y\":11,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"19\",\"compNodeId\":\"b\"}}]},{\"nodes\":[{\"id\":0,\"x\":36,\"y\":7,\"edges\":[1,2]},{\"id\":1,\"x\":42,\"y\":7,\"edges\":[0,3]},{\"id\":2,\"x\":36,\"y\":2,\"edges\":[0,4]},{\"id\":3,\"x\":42,\"y\":8,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"19\",\"compNodeId\":\"sel\"}},{\"id\":4,\"x\":34,\"y\":2,\"edges\":[2],\"ref\":{\"type\":3,\"id\":\"5\",\"compNodeId\":\"rhsSel\"}}]},{\"nodes\":[{\"id\":0,\"x\":9,\"y\":14,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"5\",\"compNodeId\":\"lhsSel\"}},{\"id\":1,\"x\":9,\"y\":16,\"edges\":[0,2]},{\"id\":2,\"x\":43,\"y\":16,\"edges\":[1,3]},{\"id\":3,\"x\":43,\"y\":40,\"edges\":[2,4]},{\"id\":4,\"x\":41,\"y\":40,\"edges\":[3,5]},{\"id\":5,\"x\":41,\"y\":41,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"10\",\"compNodeId\":\"sel\"}}]},{\"nodes\":[{\"id\":0,\"x\":49,\"y\":16,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"2\",\"compNodeId\":\"ctrl\"}},{\"id\":1,\"x\":12,\"y\":16,\"edges\":[2,0]},{\"id\":2,\"x\":12,\"y\":14,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"5\",\"compNodeId\":\"aluCtrl\"}}]},{\"nodes\":[{\"id\":0,\"x\":-19,\"y\":-5,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"11\",\"compNodeId\":\"data\"}},{\"id\":1,\"x\":-6,\"y\":-5,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"5\",\"compNodeId\":\"ins\"}}]},{\"nodes\":[{\"id\":0,\"x\":45,\"y\":6,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"14\",\"compNodeId\":\"addrBase\"}},{\"id\":1,\"x\":45,\"y\":7,\"edges\":[0,2]},{\"id\":2,\"x\":45,\"y\":7,\"edges\":[1,3]},{\"id\":3,\"x\":45,\"y\":12,\"edges\":[4,5,2]},{\"id\":4,\"x\":52,\"y\":12,\"edges\":[3,6]},{\"id\":5,\"x\":45,\"y\":43,\"edges\":[3,7]},{\"id\":6,\"x\":52,\"y\":13,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"2\",\"compNodeId\":\"lhs\"}},{\"id\":7,\"x\":42,\"y\":43,\"edges\":[5],\"ref\":{\"type\":3,\"id\":\"10\",\"compNodeId\":\"out\"}}]}],\"comps\":[{\"id\":\"1\",\"defId\":\"core/riscv/reg32\",\"x\":-6,\"y\":41,\"args\":null},{\"id\":\"2\",\"defId\":\"core/riscv/alu0\",\"x\":49,\"y\":13,\"args\":null},{\"id\":\"3\",\"defId\":\"core/flipflop/reg1\",\"x\":-6,\"y\":27,\"args\":null},{\"id\":\"5\",\"defId\":\"core/riscv/insDecode0\",\"x\":-6,\"y\":-6,\"args\":null},{\"id\":\"7\",\"defId\":\"core/flow/mux2\",\"x\":-13,\"y\":41,\"args\":null},{\"id\":\"8\",\"defId\":\"core/flow/mux2\",\"x\":-13,\"y\":27,\"args\":null},{\"id\":\"9\",\"defId\":\"core/math/adder\",\"x\":39,\"y\":27,\"args\":null},{\"id\":\"10\",\"defId\":\"core/flow/mux2\",\"x\":40,\"y\":40,\"args\":null},{\"id\":\"11\",\"defId\":\"core/mem/rom0\",\"x\":-54,\"y\":-6,\"args\":null},{\"id\":\"12\",\"defId\":\"core/io/const32\",\"x\":21,\"y\":17,\"args\":{\"value\":4,\"valueMode\":0,\"bitWidth\":32,\"h\":4,\"w\":10,\"portPos\":0,\"signed\":false}},{\"id\":\"13\",\"defId\":\"core/flow/mux2\",\"x\":35,\"y\":17,\"args\":null},{\"id\":\"14\",\"defId\":\"core/riscv/loadStore0\",\"x\":40,\"y\":-6,\"args\":null},{\"id\":\"15\",\"defId\":\"core/mem/ram0\",\"x\":-54,\"y\":27,\"args\":null},{\"id\":\"16\",\"defId\":\"core/bus/addrMap\",\"x\":-66,\"y\":27,\"args\":{\"addrOffset\":65536,\"addrMask\":65535}},{\"id\":\"17\",\"defId\":\"core/bus/addrMap\",\"x\":-66,\"y\":60,\"args\":{\"addrOffset\":1073872896,\"addrMask\":65535}},{\"id\":\"18\",\"defId\":\"core/io/ledOutput0\",\"x\":-54,\"y\":60,\"args\":null},{\"id\":\"19\",\"defId\":\"core/flow/mux2\",\"x\":41,\"y\":7,\"args\":null}]}};\n\nexport const riscvBasicSchematicStr = `#wire-schema 1\nC 1 core/riscv/reg32 p:-6,41\nC 2 core/riscv/alu0 p:49,13\nC 3 core/flipflop/reg1 p:-6,27\nC 5 core/riscv/insDecode0 p:-6,-6\nC 7 core/flow/mux2 p:-13,41\nC 8 core/flow/mux2 p:-13,27\nC 9 core/math/adder p:39,27\nC 10 core/flow/mux2 p:40,40\nC 11 core/mem/rom0 p:-54,-6\nC 12 core/io/const32 p:21,17 c:{\"value\":4,\"valueMode\":0,\"bitWidth\":32,\"h\":4,\"w\":10,\"portPos\":0,\"signed\":false}\nC 13 core/flow/mux2 p:35,17\nC 14 core/riscv/loadStore0 p:40,-6\nC 15 core/mem/ram0 p:-54,27\nC 16 core/bus/addrMap p:-66,27 c:{\"addrOffset\":65536,\"addrMask\":65535}\nC 17 core/bus/addrMap p:-66,60 c:{\"addrOffset\":1073872896,\"addrMask\":65535}\nC 18 core/io/ledOutput0 p:-54,60\nC 19 core/flow/mux2 p:41,7\nW 0 ns:[-6,44 p:1/in|-11,44,0 p:7/out]\nW 1 ns:[-14,31|-14,35,0|-13,31,0 p:8/b|42,35,1|-14,43,1|42,30,3|-13,43,4 p:7/a|41,30,5 p:9/out]\nW 2 ns:[35,19 p:13/a|31,19,0 p:12/out]\nW 3 ns:[-2,41 p:1/ctrl|-2,14,0 p:5/regCtrl]\nW 4 ns:[36,17|36,18,0 p:13/sel|41,17,0|41,26,2|53,26,3|53,25,4 p:2/branch]\nW 5 ns:[34,-5 p:5/loadStoreCtrl|40,-5,0 p:14/ctrl]\nW 6 ns:[34,-4 p:5/addrOffset|40,-4,0 p:14/addrOffset]\nW 7 ns:[-11,30 p:8/out|-6,30,0 p:3/in]\nW 8 ns:[34,44 p:1/outA|40,44,0 p:10/b]\nW 9 ns:[37,20 p:13/out|38,20,0|38,28,1|39,28,2 p:9/a]\nW 10 ns:[34,30 p:3/out|36,30,0|36,24,1|36,42,1|39,30,1 p:9/b|-12,24,2|40,42,3 p:10/a|-12,-4,5|-19,-4,7 p:11/addr]\nW 11 ns:[-12,42 p:7/sel|-9,42,0|-9,28,1|-12,28,2 p:8/sel|-9,18,2|-5,18,4|-5,14,5 p:5/pcRegMuxCtrl]\nW 12 ns:[64,0 p:14/dataOut|67,0,0|67,27,1|57,27,2|57,37,3|57,25,3 p:2/result|-16,37,4|-16,45,6|-16,29,6|-13,45,7 p:7/b|-13,29,8 p:8/a]\nW 13 ns:[-66,29 p:16/busCtrl|-68,29,0|-68,-8,1|-68,62,1|44,-8,2|-66,62,3 p:17/busCtrl|44,-6,4 p:14/busCtrl]\nW 14 ns:[-66,31 p:16/busAddr|-70,31,0|-70,-10,1|-70,64,1|48,-10,2|-66,64,3 p:17/busAddr|48,-6,4 p:14/busAddr]\nW 15 ns:[-66,33 p:16/busData|-72,33,0|-72,-12,1|-72,66,1|52,-12,2|-66,66,3 p:17/busData|52,-6,4 p:14/busData]\nW 16 ns:[-56,29 p:16/localCtrl|-54,29,0 p:15/ctrl]\nW 17 ns:[-56,31 p:16/localAddr|-54,31,0 p:15/addr]\nW 18 ns:[-56,33 p:16/localData|-54,33,0 p:15/data]\nW 19 ns:[34,22|1,22,0|34,21,0|1,14,1 p:5/pcAddImm|35,21,2 p:13/b]\nW 20 ns:[-56,62 p:17/localCtrl|-54,62,0 p:18/busCtrl]\nW 21 ns:[-56,64 p:17/localAddr|-54,64,0 p:18/busAddr]\nW 22 ns:[-56,66 p:17/localData|-54,66,0 p:18/busData]\nW 23 ns:[38,9|38,0,0|41,9,0 p:19/a|34,0,1 p:5/rhsImm]\nW 24 ns:[43,10 p:19/out|52,10,0|52,6,1 p:14/dataIn|62,10,1|62,13,3 p:2/rhs]\nW 25 ns:[47,47|34,47,0 p:1/outB|47,14,0|38,14,2|38,11,3|41,11,4 p:19/b]\nW 26 ns:[36,7|42,7,0|36,2,0|42,8,1 p:19/sel|34,2,2 p:5/rhsSel]\nW 27 ns:[9,14 p:5/lhsSel|9,16,0|43,16,1|43,40,2|41,40,3|41,41,4 p:10/sel]\nW 28 ns:[49,16 p:2/ctrl|12,16,0|12,14,1 p:5/aluCtrl]\nW 30 ns:[-19,-5 p:11/data|-6,-5,0 p:5/ins]\nW 31 ns:[45,6 p:14/addrBase|45,7,0|45,7,1|45,12,2|52,12,3|45,43,3|52,13,4 p:2/lhs|42,43,5 p:10/out]\n`;\n","\nimport { ILSSchematic } from \"@/src/cpu/schematics/SchematicLibrary\";\nexport const romUsageSchematic: ILSSchematic = {\"id\":\"c-s1m3zs3x\",\"name\":\"ROM Usage\",\"model\":{\"wires\":[{\"nodes\":[{\"id\":0,\"x\":40,\"y\":15,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"7\",\"compNodeId\":\"addr\"}},{\"id\":1,\"x\":44,\"y\":15,\"edges\":[0,2]},{\"id\":2,\"x\":44,\"y\":26,\"edges\":[1,3]},{\"id\":3,\"x\":92,\"y\":26,\"edges\":[2,4]},{\"id\":4,\"x\":92,\"y\":32,\"edges\":[3,5,6]},{\"id\":5,\"x\":98,\"y\":32,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"10\",\"compNodeId\":\"b\"}},{\"id\":6,\"x\":89,\"y\":32,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"9\",\"compNodeId\":\"out\"}}]},{\"nodes\":[{\"id\":0,\"x\":100,\"y\":32,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"10\",\"compNodeId\":\"out\"}},{\"id\":1,\"x\":101,\"y\":32,\"edges\":[0,2]},{\"id\":2,\"x\":101,\"y\":39,\"edges\":[1,3]},{\"id\":3,\"x\":44,\"y\":39,\"edges\":[2,4]},{\"id\":4,\"x\":44,\"y\":32,\"edges\":[3,5]},{\"id\":5,\"x\":49,\"y\":32,\"edges\":[4],\"ref\":{\"type\":3,\"id\":\"9\",\"compNodeId\":\"in\"}}]},{\"nodes\":[{\"id\":0,\"x\":96,\"y\":27,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"11\",\"compNodeId\":\"out\"}},{\"id\":1,\"x\":96,\"y\":30,\"edges\":[0,2]},{\"id\":2,\"x\":98,\"y\":30,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"10\",\"compNodeId\":\"a\"}}]},{\"nodes\":[{\"id\":0,\"x\":49,\"y\":14,\"edges\":[1,2]},{\"id\":1,\"x\":49,\"y\":18,\"edges\":[0,3]},{\"id\":2,\"x\":40,\"y\":14,\"edges\":[0],\"ref\":{\"type\":3,\"id\":\"7\",\"compNodeId\":\"data\"}},{\"id\":3,\"x\":60,\"y\":18,\"edges\":[1],\"ref\":{\"type\":3,\"id\":\"8\",\"compNodeId\":\"a\"}}]}],\"comps\":[{\"id\":\"7\",\"defId\":\"core/mem/rom0\",\"x\":5,\"y\":13,\"args\":null},{\"id\":\"8\",\"defId\":\"core/comp/port\",\"x\":60,\"y\":16,\"args\":{\"portId\":\"data\",\"name\":\"Data Out\",\"w\":14,\"h\":4,\"type\":2,\"portPos\":2,\"bitWidth\":32,\"signed\":true,\"valueMode\":0,\"inputOverride\":false,\"inputValueOverride\":0}},{\"id\":\"9\",\"defId\":\"core/flipflop/reg1\",\"x\":49,\"y\":29,\"args\":null},{\"id\":\"10\",\"defId\":\"core/math/adder\",\"x\":98,\"y\":29,\"args\":null},{\"id\":\"11\",\"defId\":\"core/io/const32\",\"x\":94,\"y\":23,\"args\":{\"value\":4,\"valueMode\":0,\"bitWidth\":32,\"h\":4,\"w\":4,\"portPos\":1,\"signed\":false}}]}};\n\nexport const romUsageSchematicStr = `#wire-schema 1\nC 7 core/mem/rom0 p:5,13\nC 8 core/comp/port p:60,16 c:{\"portId\":\"data\",\"name\":\"Data Out\",\"w\":14,\"h\":4,\"type\":2,\"portPos\":2,\"bitWidth\":32,\"signed\":true,\"valueMode\":0,\"inputOverride\":false,\"inputValueOverride\":0}\nC 9 core/flipflop/reg1 p:49,29\nC 10 core/math/adder p:98,29\nC 11 core/io/const32 p:94,23 c:{\"value\":4,\"valueMode\":0,\"bitWidth\":32,\"h\":4,\"w\":4,\"portPos\":1,\"signed\":false}\nW 0 ns:[40,15 p:7/addr|44,15,0|44,26,1|92,26,2|92,32,3|98,32,4 p:10/b|89,32,4 p:9/out]\nW 1 ns:[100,32 p:10/out|101,32,0|101,39,1|44,39,2|44,32,3|49,32,4 p:9/in]\nW 2 ns:[96,27 p:11/out|96,30,0|98,30,1 p:10/a]\nW 4 ns:[49,14|49,18,0|40,14,0 p:7/data|60,18,1 p:8/a]\n`;\n","import { ILSSchematic } from \"./SchematicLibrary\";\r\nimport { pcCounterSchematic } from \"./pcCounterSchematic\";\r\nimport { regFileDemoSchematic } from \"./regFileDemoSchematic\";\r\nimport { riscvBasicSchematic } from \"./riscvBasicSchematic\";\r\nimport { romUsageSchematic } from \"./romUsageSchematic\";\r\n\r\nexport const schematicManifest: ILSSchematic[] = [\r\n    pcCounterSchematic,\r\n    regFileDemoSchematic,\r\n    riscvBasicSchematic,\r\n    romUsageSchematic,\r\n];\r\n\r\n","import { AffineMat2d } from \"@/src/utils/AffineMat2d\";\nimport { iterLocalStorageEntries } from \"@/src/utils/localstorage\";\nimport { Vec3 } from \"@/src/utils/vector\";\nimport { CompLibrary, ISubLayoutPort } from \"../comps/CompBuilder\";\nimport { IEditSchematic, IEditSnapshot, PortType } from \"../CpuModel\";\nimport { ILSState, wiresFromLsState, schematicToLsState, exportData } from \"../ImportExport\";\nimport { assignImm } from \"@/src/utils/data\";\nimport { createSchematicCompDef } from \"../comps/SchematicComp\";\nimport { schematicManifest } from \"./SchematicManifest\";\nimport { constructEditSnapshot } from \"../ModelHelpers\";\n\nexport interface ILocalSchematic {\n    id: string;\n    name: string;\n    cpuStateStr: string;\n}\n\nexport class SchematicLibrary {\n\n    // builtins are shipped with this app\n    // customs are from local-storage\n\n    builtinSchematics = new Map<string, ISchematicDef>();\n    customSchematics = new Map<string, ISchematicDef>();\n\n    localStorageSchematicsLoaded = false;\n\n    constructor() {\n    }\n\n    public populateSchematicLibrary(compLibrary: CompLibrary, loadFromLocalStorage = true) {\n        this.builtinSchematics.clear();\n        this.customSchematics.clear();\n\n        this.addLocalSchematics(compLibrary);\n\n        if (loadFromLocalStorage) {\n            this.readFromLocalStorage(compLibrary);\n        }\n\n        this.addSchematicsToCompLibrary(compLibrary);\n\n        this.resolveSchematicRefs(compLibrary);\n    }\n\n    public addSchematicsToCompLibrary(compLibrary: CompLibrary) {\n        for (let schem of [...this.builtinSchematics.values(), ...this.customSchematics.values()]) {\n            if (schem.compArgs) {\n                let libItem = createSchematicCompDef(schem.id, schem.name, schem.model.mainSchematic, schem.compArgs);\n                compLibrary.addLibraryItem(libItem);\n            }\n        }\n    }\n\n    public addLocalSchematics(compLibrary: CompLibrary) {\n        for (let lsSchematic of schematicManifest) {\n            this.builtinSchematics.set(lsSchematic.id, this.lsSchematicToSchematicDef(lsSchematic, compLibrary));\n        }\n    }\n\n    deleteCustomSchematic(id: string) {\n        this.customSchematics.delete(id);\n        localStorage.removeItem(this.schematicLocalStorageKey(id));\n    }\n\n    public getSchematic(id: string): ISchematicDef | undefined {\n        return this.builtinSchematics.get(id) || this.customSchematics.get(id);\n    }\n\n    private readFromLocalStorage(compLibrary: CompLibrary) {\n        let customSchematics = this.customSchematics;\n        iterLocalStorageEntries((key, schematicStr) => {\n            let lsSchematic: ILSSchematic | undefined;\n            if (!key.startsWith('schematic-')) {\n                return;\n            }\n\n            try {\n                lsSchematic = JSON.parse(schematicStr!) as ILSSchematic;\n\n            } catch (e) {\n                console.error(`Error parsing schematic ${key}: ${e}`);\n                return;\n            }\n\n            if (!lsSchematic) {\n                return;\n            }\n\n            customSchematics.set(lsSchematic.id, this.lsSchematicToSchematicDef(lsSchematic, compLibrary))\n        });\n\n        this.localStorageSchematicsLoaded = true;\n    }\n\n    private lsSchematicToSchematicDef(lsSchematic: ILSSchematic, compLibrary: CompLibrary): ISchematicDef {\n        let compArgs = compArgsFromLsState(lsSchematic.compArgs);\n\n        let snapshot = constructEditSnapshot();\n        snapshot = wiresFromLsState(snapshot, lsSchematic.model, compLibrary);\n        snapshot.mainSchematic = addCompArgsToSnapshot(snapshot.mainSchematic, compArgs);\n        snapshot.mainSchematic.id = lsSchematic.id;\n        snapshot.mainSchematic.name = lsSchematic.name;\n        // if (snapshot.compBbox.empty) {\n        //     snapshot.compBbox = computeModelBoundingBox(snapshot, { excludePorts: true });\n        // }\n\n        return {\n            id: lsSchematic.id,\n            name: lsSchematic.name,\n            model: snapshot,\n            compArgs: compArgs || undefined,\n            hasEdits: false,\n            schematicStr: \"\",\n        };\n    }\n\n    private resolveSchematicRefs(compLibrary: CompLibrary) {\n        for (let schematic of this.customSchematics.values()) {\n            for (let i = 0; i < schematic.model.mainSchematic.comps.length; i++) {\n                let comp = schematic.model.mainSchematic.comps[i];\n                if (!comp.resolved) {\n                    let newComp = compLibrary.create(comp.defId, comp.args);\n                    newComp.id = comp.id;\n                    newComp.pos = comp.pos;\n                    if (!newComp.resolved) {\n                        console.error(`Schematic ${schematic.id} references unknown component ${comp.defId}`);\n                        continue;\n                    }\n\n                    schematic.model.mainSchematic.comps[i] = newComp;\n                }\n            }\n        }\n    }\n\n    public addCustomSchematic(name: string) {\n        // create random string of 8 chars\n        let id = `c-${Math.random().toString(36).substring(2, 10)}`;\n\n        let schematic: ISchematicDef = {\n            id: id,\n            name: name,\n            model: constructEditSnapshot(),\n            hasEdits: false,\n        };\n        schematic.model.mainSchematic.id = id;\n        this.customSchematics.set(id, schematic);\n        this.saveToLocalStorage(schematic.id);\n        return schematic;\n    }\n\n    public saveToLocalStorage(id: string) {\n        let schematic = this.customSchematics.get(id);\n\n        if (schematic) {\n            let lsSchematic = editSnapshotToLsSchematic(id, schematic.model);\n            // console.log('saving schematic', lsSchematic, 'based on snapshot', schematic.model);\n            localStorage.setItem(this.schematicLocalStorageKey(schematic.id), JSON.stringify(lsSchematic));\n        } else if (this.builtinSchematics.get(id)) {\n            // console.log(`Can't update builtin schematic ${id}`);\n        } else {\n            console.error(`Schematic ${id} not found`);\n        }\n    }\n\n    async saveToFile(id: string, editSnapshot: IEditSnapshot) {\n        let lsSchematic = editSnapshotToLsSchematic(id, editSnapshot);\n\n        let lsStr = JSON.stringify(lsSchematic);\n\n        let dataStr = exportData(editSnapshot.mainSchematic);\n\n        let name = (editSnapshot.mainSchematic.name || id).replace(/[^a-z0-9]/gi, '_').toLowerCase();\n\n        let nameToCamel = name.replace(/[_ ^]([a-z])/g, (g) => g[1].toUpperCase());\n\n        let body = `\nimport { ILSSchematic } from \"@/src/cpu/schematics/SchematicLibrary\";\nexport const ${nameToCamel}Schematic: ILSSchematic = ${lsStr};\n\nexport const ${nameToCamel}SchematicStr = \\`${dataStr}\\`;\n`;\n\n        await fetch(`/cpu/api/save-schematic-to-file?filename=${nameToCamel}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'text/plain',\n            },\n            body: body,\n        });\n    }\n\n    private schematicLocalStorageKey(id: string) {\n        return `schematic-${id}`;\n    }\n}\n\nexport function editSnapshotToLsSchematic(id: string, editSnapshot: IEditSnapshot): ILSSchematic {\n    return {\n        id: id,\n        name: editSnapshot.mainSchematic.name,\n        // parentCompDefId: editSnapshot.mainSchematic.parentCompDefId,\n        model: schematicToLsState(editSnapshot.mainSchematic),\n        compArgs: compArgsToLsState(editSnapshot),\n    };\n}\n\nexport interface ILSSchematic {\n    id: string;\n    name: string;\n    model: ILSState;\n    compArgs?: ILSCompArgs;\n}\n\nexport interface ILSCompArgs {\n    w: number;\n    h: number;\n    ports: ILSCompPort[];\n}\n\nexport interface ILSCompPort {\n    id: string;\n    name: string;\n    type: PortType;\n    x: number;\n    y: number;\n    width?: number;\n}\n\nexport interface ISchematicDef {\n    id: string;\n    name: string;\n    model: IEditSnapshot;\n    compArgs?: ISchematicCompArgs; // a schematic may get wrapped into a component\n\n    hasEdits: boolean;\n    // when we switch between models, want to keep as much state around as possible\n    undoStack?: IEditSnapshot[];\n    redoStack?: IEditSnapshot[];\n    mtx?: AffineMat2d;\n    schematicStr?: string; // for LS update detection\n}\n\nexport interface ISchematicCompArgs {\n    size: Vec3;\n    ports: ISubLayoutPort[];\n}\n\nfunction compArgsToLsState(snapshot: IEditSnapshot): ILSCompArgs | undefined {\n    let schematic = snapshot.mainSchematic;\n    if (schematic.compSize.len() < 0.001) {\n        return undefined;\n    }\n    return {\n        w: schematic.compSize.x,\n        h: schematic.compSize.y,\n        ports: schematic.compPorts.map(p => ({\n            id: p.id,\n            name: p.name,\n            type: p.type,\n            x: p.pos.x,\n            y: p.pos.y,\n            width: p.width,\n        })),\n    };\n}\n\nfunction compArgsFromLsState(lsCompArgs?: ILSCompArgs): ISchematicCompArgs | null {\n    if (!lsCompArgs) {\n        return null;\n    }\n\n    return {\n        size: new Vec3(lsCompArgs.w, lsCompArgs.h),\n        ports: lsCompArgs.ports.map(p => ({\n            id: p.id,\n            name: p.name,\n            type: p.type,\n            pos: new Vec3(p.x, p.y),\n            width: p.width,\n        })),\n    };\n}\n\nfunction addCompArgsToSnapshot(schematic: IEditSchematic, compArgs: ISchematicCompArgs | null): IEditSchematic {\n    if (!compArgs) {\n        return schematic;\n    }\n\n    return assignImm(schematic, {\n        compSize: compArgs.size,\n        compPorts: compArgs.ports,\n    });\n}\n","import Link from \"next/link\";\nimport React from \"react\";\n\nexport const Header: React.FC<{\n    title: React.ReactNode;\n    children?: React.ReactNode;\n}> = ({ title, children }) => {\n\n    return <div className=\"flex justify-between items-center px-2 py-1 bg-blue-950 text-white h-[2.5rem] flex-shrink-0\">\n        <div className=\"flex items-center\">{children}</div>\n        {title && <div className=\"text-2xl\">{title}</div>}\n        <div className=\"hover:underline\">\n            <Link href={\"/\"}>Home</Link>\n        </div>\n    </div>;\n\n};\n","import { BoundingBox3d, Vec3 } from \"./vector\";\n\nexport class AffineMat2d {\n    constructor(\n        public a: number = 1.0,\n        public b: number = 0.0,\n        public c: number = 0.0,\n        public d: number = 1.0,\n        public e: number = 0.0,\n        public f: number = 0.0,\n    ) {\n\n    }\n\n    mul(rhs: AffineMat2d) {\n        return new AffineMat2d(\n            this.a * rhs.a + this.c * rhs.b,\n            this.b * rhs.a + this.d * rhs.b,\n            this.a * rhs.c + this.c * rhs.d,\n            this.b * rhs.c + this.d * rhs.d,\n            this.a * rhs.e + this.c * rhs.f + this.e,\n            this.b * rhs.e + this.d * rhs.f + this.f,\n        );\n    }\n\n    inv() {\n        let detInv = 1.0 / (this.a * this.d - this.b * this.c);\n        return new AffineMat2d(\n            this.d * detInv,\n            -this.b * detInv,\n            -this.c * detInv,\n            this.a * detInv,\n            (this.c * this.f - this.d * this.e) * detInv,\n            (this.b * this.e - this.a * this.f) * detInv,\n        );\n    }\n\n    mulVec3(v: Vec3) {\n        return new Vec3(\n            this.a * v.x + this.c * v.y + this.e,\n            this.b * v.x + this.d * v.y + this.f,\n            v.z,\n        );\n    }\n\n    mulVec3Inv(v: Vec3) {\n        let detInv = 1.0 / (this.a * this.d - this.b * this.c);\n        let x = v.x - this.e;\n        let y = v.y - this.f;\n        return new Vec3(\n            (this.d * x - this.b * y) * detInv,\n            (this.a * y - this.c * x) * detInv,\n            v.z,\n        );\n    }\n\n    mulBb(bb: BoundingBox3d) {\n        return new BoundingBox3d(this.mulVec3(bb.min), this.mulVec3(bb.max));\n    }\n\n    mulBbInv(bb: BoundingBox3d) {\n        return new BoundingBox3d(this.mulVec3Inv(bb.min), this.mulVec3Inv(bb.max));\n    }\n\n    toTransformParams(): [number, number, number, number, number, number] {\n        return [this.a, this.b, this.c, this.d, this.e, this.f];\n    }\n\n    static identity() {\n        return new AffineMat2d();\n    }\n\n    static translateVec(v: Vec3) {\n        return new AffineMat2d(1, 0, 0, 1, v.x, v.y);\n    }\n\n    static scale1(x: number) {\n        return new AffineMat2d(x, 0, 0, x, 0, 0);\n    }\n\n    static scaleVec(v: Vec3) {\n        return new AffineMat2d(v.x, 0, 0, v.y, 0, 0);\n    }\n\n    static translateScale(x: number, y: number, sx: number, sy: number) {\n        return new AffineMat2d(sx, 0, 0, sy, x, y);\n    }\n\n    static multiply(...mats: AffineMat2d[]) {\n        let result = mats[0];\n        for (let i = 1; i < mats.length; ++i) {\n            result = result.mul(mats[i]);\n        }\n        return result;\n    }\n}\n","import React, { memo } from \"react\";\nimport { Portal } from \"./Portal\";\nimport clsx from \"clsx\";\n\nexport const CursorDragOverlay: React.FC<{\n    className?: string;\n}> = memo(function CursorDragOverlay({ className }) {\n\n    return <Portal>\n        <div className={clsx(\"fixed inset-0 z-50 pointer-events-auto\", className)} />\n    </Portal>;\n});\n","import React, { CSSProperties, useMemo, useState } from \"react\";\nimport { Portal } from \"./Portal\";\nimport clsx from \"clsx\";\nimport { useResizeChangeHandler } from \"./layout\";\nimport { assignImm, clamp } from \"./data\";\n\nconst PosStart = 16;\nconst PosEnd = 32;\n\nenum TipPos {\n    Top = 1,\n    Right = 2,\n    Left = 4,\n    Bottom = 8,\n\n    TopStart = Top | PosStart,\n    TopEnd = Top | PosEnd,\n\n    BottomStart = Bottom | PosStart,\n    BottomEnd = Bottom | PosEnd,\n\n    LeftStart = Left | PosStart,\n    LeftEnd = Left | PosEnd,\n\n    RightStart = Right | PosStart,\n    RightEnd = Right | PosEnd,\n}\n\nenum TipStyle {\n    Gray,\n}\n\nexport const Tooltip: React.FC<{\n    tip: React.ReactNode,\n    tipStyle?: TipStyle,\n    pos?: TipPos,\n    arrow?: boolean,\n    className?: string,\n    children: React.ReactNode,\n}> = ({ tip, className, pos = TipPos.Bottom, tipStyle = TipStyle.Gray, arrow = true, children }) => {\n    let [isVisible, setIsVisible] = useState(false);\n    let [targetEl, setTargetEl] = useState<HTMLElement | null>(null);\n    let [tooltipEl, setTooltipEl] = useState<HTMLElement | null>(null);\n    let [tooltipInfo, setTooltipInfo] = useState<ITooltipInfo>({ });\n\n    useResizeChangeHandler(isVisible ? targetEl : null, () => {\n        setTooltipInfo(a => assignImm(a, { targetBcr: targetEl?.getBoundingClientRect() }));\n    });\n\n    useResizeChangeHandler(isVisible && targetEl ? tooltipEl : null, () => {\n        setTooltipInfo(a => assignImm(a, { tooltipBcr: tooltipEl?.getBoundingClientRect() }));\n    });\n\n    let { tooltipStyle, arrowStyle } = useMemo(() => {\n        if (!isVisible || !tooltipInfo.targetBcr || !tooltipInfo.tooltipBcr) {\n            return {};\n        }\n\n        let arrowHalfWidth = 8;\n        let offset = 14;\n        let pageMargin = 8;\n        let targetBcr = tooltipInfo.targetBcr;\n        let tooltipBcr = tooltipInfo.tooltipBcr;\n\n        let isBottom = !!(pos & TipPos.Bottom);\n\n        let isStart = !!(pos & PosStart);\n        let isEnd = !!(pos & PosEnd);\n\n        // applies to bottom & top\n        let x = isStart ? targetBcr.left : isEnd ? targetBcr.right - tooltipBcr.width : targetBcr.left + targetBcr.width / 2 - tooltipBcr.width / 2;\n        let y = isBottom ? targetBcr.bottom + offset : targetBcr.top - tooltipBcr.height - offset;\n\n        x = clamp(x, pageMargin, window.innerWidth - tooltipBcr.width - pageMargin);\n\n\n        let arrowXGlobal = isStart ? targetBcr.left + arrowHalfWidth : isEnd ? targetBcr.right - arrowHalfWidth : targetBcr.left + targetBcr.width / 2;\n\n        let arrowX = clamp(arrowXGlobal - x, arrowHalfWidth, tooltipBcr.width - arrowHalfWidth);\n        let arrowY = isBottom ? 1 : tooltipBcr.height;\n\n        return {\n            tooltipStyle: {\n                visibility: \"visible\",\n                transform: `translate(${x}px, ${y}px)`,\n            } as CSSProperties,\n            arrowStyle: {\n                transform: `translate(-50%, -100%) translate(${arrowX}px, ${arrowY}px)`,\n            } as CSSProperties,\n        };\n\n    }, [tooltipInfo, isVisible, pos]);\n\n    return <>\n        {React.cloneElement(React.Children.only(children) as React.ReactElement, { onMouseEnter: () => setIsVisible(true), onMouseLeave: () => setIsVisible(false), ref: setTargetEl })}\n        {isVisible && <Portal>\n            <div ref={setTooltipEl} className={clsx(className,\n                    \"invisible absolute pointer-events-auto flex justify-center items-center z-0 min-h-[2.5rem] rounded px-3 py-1 min-w-[2.5rem] shadow-lg\",\n                    tipStyle === TipStyle.Gray && \"bg-gray-600 text-white\",\n                )} style={tooltipStyle}>\n                {tip}\n                {arrow && <div className={clsx(\n                    \"absolute w-0 h-0 top-0 left-0 origin-center border-8 z-[1] shadow-lg\",\n                    tipStyle === TipStyle.Gray && \"border-gray-600\",\n                    (pos & TipPos.Bottom) && \"border-t-transparent border-l-transparent border-r-transparent\",\n                )}\n                style={arrowStyle}>\n\n                </div>}\n            </div>\n        </Portal>}\n    </>;\n};\n\ninterface ITooltipInfo {\n    targetBcr?: DOMRect;\n    tooltipBcr?: DOMRect;\n}\n","/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/**/*.{html,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"exampleView\":\"CompExampleView_exampleView__YNvvo\",\"header\":\"CompExampleView_header__NiisV\",\"body\":\"CompExampleView_body__ejAPo\",\"entry\":\"CompExampleView_entry__ZImOR\",\"divider\":\"CompExampleView_divider__uYgex\",\"btn\":\"CompExampleView_btn__d1qh_\",\"reloadBtn\":\"CompExampleView_reloadBtn__geR9u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"libraryView\":\"CompLibraryView_libraryView__ai9XH\",\"header\":\"CompLibraryView_header__oNb05\",\"body\":\"CompLibraryView_body__5yhHo\",\"entry\":\"CompLibraryView_entry__nWrNg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvasWrap\":\"CpuCanvas_canvasWrap__6tK8U\",\"canvas\":\"CpuCanvas_canvas__OVzQd\",\"canvasEventSurface\":\"CpuCanvas_canvasEventSurface__y8I_h\",\"toolsLeftTop\":\"CpuCanvas_toolsLeftTop__PPlvK\",\"compDomElements\":\"CpuCanvas_compDomElements__8fzbz\",\"compDomElementsInner\":\"CpuCanvas_compDomElementsInner__LkAII\",\"compDomEventMask\":\"CpuCanvas_compDomEventMask__GVjxJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverDisplay\":\"HoverDisplay_hoverDisplay__9Qo5P\",\"numVal\":\"HoverDisplay_numVal__nROBg\",\"hexVal\":\"HoverDisplay_hexVal__HNS2h\",\"bitVal\":\"HoverDisplay_bitVal__BbL5C\",\"compId\":\"HoverDisplay_compId__0PWXt\",\"bitWidth\":\"HoverDisplay_bitWidth__wp3I0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"baseComp\":\"CompStyles_baseComp__MsInX\",\"rectComp\":\"CompStyles_rectComp__w8Btj\",\"memTable\":\"CompStyles_memTable__Bfa8P\",\"memRow\":\"CompStyles_memRow__sadPT\",\"memRowAddr\":\"CompStyles_memRowAddr__ihs4N\",\"memRowBytes\":\"CompStyles_memRowBytes__LGBva\",\"allZeros\":\"CompStyles_allZeros__p2RqS\",\"memRowByte\":\"CompStyles_memRowByte__U_vpL\",\"byteRead\":\"CompStyles_byteRead__hh8TN\",\"byteWrite\":\"CompStyles_byteWrite__XazFV\",\"addrInput\":\"CompStyles_addrInput__0P4V_\",\"inputNumber\":\"CompStyles_inputNumber__7yyVH\",\"configMenuTopRight\":\"CompStyles_configMenuTopRight__ZfWya\",\"inputNumber_configMenu\":\"CompStyles_inputNumber_configMenu__4L48g\",\"compPopup\":\"CompStyles_compPopup__0CpBs\",\"configMenuBtn\":\"CompStyles_configMenuBtn__epbEv\",\"menuRow\":\"CompStyles_menuRow__QNGdo\",\"title\":\"CompStyles_title__gOcAl\",\"compAddressing\":\"CompStyles_compAddressing__DiWlT\",\"compLedOutputSimple\":\"CompStyles_compLedOutputSimple__yjlib\",\"ledOutput\":\"CompStyles_ledOutput__2fvHJ\",\"ledOutputBit\":\"CompStyles_ledOutputBit__Wrsar\",\"enabled\":\"CompStyles_enabled__mo3B6\",\"compRegFileCtrl\":\"CompStyles_compRegFileCtrl__xbgWd\",\"compBinGate\":\"CompStyles_compBinGate__KO2YZ\",\"regSelect\":\"CompStyles_regSelect__2TQs_\",\"text\":\"CompStyles_text__oHJZq\",\"regHex\":\"CompStyles_regHex__KuwiW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hexValueEditor\":\"HexValueEditor_hexValueEditor__esrQu\",\"prefix\":\"HexValueEditor_prefix__9THK5\",\"input\":\"HexValueEditor_input__P1ly_\",\"readonly\":\"HexValueEditor_readonly__IXzXd\",\"minimal\":\"HexValueEditor_minimal__VjDPd\",\"invalid\":\"HexValueEditor_invalid__fkpdr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"libraryView\":\"SchematicLibraryView_libraryView__Tk5z4\",\"header\":\"SchematicLibraryView_header__suC_f\",\"entry\":\"SchematicLibraryView_entry__zyAkt\",\"name\":\"SchematicLibraryView_name__fwIqk\",\"divider\":\"SchematicLibraryView_divider__miBJE\",\"btn\":\"SchematicLibraryView_btn__gpiWg\",\"btnIcon\":\"SchematicLibraryView_btnIcon__vuLFd\",\"input\":\"SchematicLibraryView_input__Fbz72\"};"],"names":["FontType","makeCanvasFont","fontSize","fontType","Default","baseType","Mono","str","hasFlag","Italic","concat","drawGrid","mtx","ctx","gridState","tl2","br2","fillStyle","special","tl","mulVec3Inv","region","min","br","max","gridCvs","getOrAddToMap","tileCanvases","document","createElement","width","height","gridCtx","getContext","save","clearRect","beginPath","moveTo","gridSize","arc","Math","PI","fill","restore","gridPattern","createPattern","translate","scale","sub","Vec3","mul","fillRect","x","y","None","RectSide","KeymapAction","stepExecutionCombinatorial","exeModel","disableBackProp","exeSteps","executionSteps","comp","runArgs","halt","comps","port","ports","type","PortType","Tristate","ioEnabled","i","length","step","compIdx","phases","phaseIdx","func","net","nets","netIdx","runNet","tristate","enabledCount","enabledPortValue","portRef","outputs","exePort","valid","InOutTri","ioDir","IoDir","Out","value","inputs","backpropagateUnusedSignals","exeSystem","phase","portIdx","readPortIdxs","writePortIdxs","dataUsed","Ctrl","allOutputsUnused","stepExecutionLatch","latchSteps","resetExeModel","opts","def","compLibrary","getCompDef","defId","reset","CompLibraryView","editorState","setEditorState","useEditorContext","compDefs","Set","libraryLookup","values","setDragStart","useGlobalDrag","ev","ds","end","a","dragCreateComp","applyFunc","editSnapshot","assignImm","undefined","jsx_runtime","jsxs","div","className","s","jsx","map","idx","onMouseDown","compDef","newComp","create","compOrig","preventDefault","stopPropagation","name","CompExampleView","examples","setExamples","useState","reloadCntr","setReloadCntr","loadEntryData","example","romComp","findCompByDefId","romArr","data","rom","set","elfSection","arr","updateCntr","runTestsQuickly","test","hardReset","completed","Promise","resolve","setTimeout","regs","getRegsComp","resRegValue","file","testNumValue","console","log","ensureSigned32Bit","expectFail","find","useEffect","run","resp","fetch","basePath","ok","elfFile","Uint8Array","arrayBuffer","header","readElfHeader","sections","listElfTextSections","section","slice","startsWith","onClick","FontAwesomeIcon","icon","faRotate","button","disabled","startTime","performance","now","successCount","totalCount","insCount","repeatCount","timeMs","endTime","toFixed","HoverDisplay","canvasEl","param","hovered","content","ref","RefType","WireSeg","WireNode","lookup","wireIdToNetIdx","get","id","portStr","topLine","bitWidth","bitVals","push","span","toString","padStart","ensureUnsigned32Bit","val","exeComp","tristateStr","portId","compFullId","join","wire","compIdToIdx","idxFound","isNotNil","portElNode","portIdStr","CompNode","portInfo","lookupPortInfo","system","compExe","findIndex","p","compNodeId","portExe","typeStr","In","Data","Addr","isInOut","dirStr","Fragment","schematic","snapshot","mainSchematic","subParts","split","c","subSchematic","getCompSubSchematic","subMtx","computeSubLayoutMatrix","offset","pos","mulVec3","modelPt","add","Popup","placement","PopupPos","TopLeft","targetEl","offsetX","offsetY","SchematicLibraryView","schematicLib","schematicLibrary","saveFromState","useCallback","schemId","activeSchematicId","getSchematic","model","undoStack","redoStack","compArgs","libItem","createSchematicCompDef","addLibraryItem","saveToLocalStorage","loadIntoEditor","desiredSchematicId","nameEdit","setNameEdit","handleDelete","confirm","deleteCustomSchematic","builtinSchematics","customSchematics","isEditing","faPencil","faTrash","input","onChange","target","faCheck","faTimes","newSchematic","addCustomSchematic","deleteSelection","idPrefix","selected","getPrefixForSelection","editCtx","prefix","lastSelected","splitIdx","lastIndexOf","substring","filter","refStrs","refToString","selectionPerWire","Map","newSnapshot","updateSubSchematic","Comp","has","wires","w","refs","copyWireGraph","node","nodes","wireNode0Id","e","edges","wireUnlinkNodes","node0","node1","wireNode1Id","repackGraphIds","newNodes","n","writeToClipboard","text","navigator","clipboard","writeText","selectionToSchematic","selectedCompIds","selectedWireIds","nodeIdsToInclude","r","trimmedWire","keep","subWire","splitIntoIslands","compBbox","CanvasEventHandler","memo","dragStart","cvsState","cursor","dragCursor","embedded","children","ctrlDown","setCtrlDown","canvasWrapEl","setCanvasWrapEl","useGlobalKeyboard","KeyboardOrder","MainPage","key","isKeyWithModifiers","Modifiers","showExeOrder","transparentComps","CtrlOrCmd","exportData","readFromClipboard","readText","then","res","importData","issues","focusedIdPrefix","newSelectionRefs","mergeInSchematic","srcSchematic","compIdRemap","delta","nextCompId","args","wireCopy","nextWireId","edge","receiveKeyUp","handleWheelFuncRef","useFunctionRef","newScale","clamp","pow","deltaY","evToModel","newMtx","AffineMat2d","multiply","translateVec","scale1","wheelHandler","hasModifiers","current","addEventListener","passive","removeEventListener","useTouchEvents","alwaysSendDragEvent","aPt0","touches","clientX","clientY","bPt0","aPt1","bPt1","aCenter","lerp","bCenter","aLen","dist","bLen","useCombinedMouseTouchDrag","canvas","editCtxFromElRef","getMatrixForEditContext","baseMtx","modelPos","isSelecting","selection","getSelection","removeAllRanges","endPos","startPos","bb","BoundingBox3d","getActiveSubSchematic","compRefs","bb2","size","intersects","wireRefs","flatMap","nodeRefs","contains","segRefs","iterWireGraphSegments","selectRegion","bbox","origModelPos","newModelPos","hoveredRef","editMainSchematic","state","snappedDelta","snapToGrid","moveSelectedComponents","globalRefToLocal","editSubSchematic","startComp","startNode","startPt","endPt","isHorizStart","segments","p0","p1","comp0Ref","newWire","fixWire","wireToGraph","newWires","applyWires","wireIdx","layout","dragSegment","grabDirRef","checkWires","screenPos","modelToScreen","mouseDir","mouseScreenPos","mouseDirSnapped","normalize","round","len","grabDir","moveDelta","isReversing","allDirs","node1Idx","dir","dot","EPSILON","newNode0Id","newNode1Id","midPos","projectOntoVector","showTransparentComponents","useRef","getSchematicForRef","isHoriz","pt","evToScreen","bcr","getBoundingClientRect","screenToModel","onMouseMove","mousePos","isect","getRefUnderCursor","refsUnderCursor","mousePt","mousePtScreen","nodeScreenPos","modelDist","screenDist","distPx","hasSubSchematic","subSchematicId","maskHover","screenBb","mulBb","shrinkInPlaceXY","subRef","pScreen","p0Screen","p1Screen","isectPt","segmentNearestPoint","assignImmFull","onMouseEnter","onMouseLeave","onContextMenu","style","CursorDragOverlay","pluralize","count","parseId","path","version","pathParts","schematicToLibraryItem","isBuiltin","LibraryBrowser","selectedFolderId","setSelectedFolderId","selectedItemId","setSelectedItemId","folders","libraryItemsToFolders","libraryItems","folderLookup","byKey","item","libraryItem","folder","items","groups","groupId","group","useMemo","Modal","handleClose","selectedFolder","selectedGroupId","selectedGroup","selectedItem","compLibraryVisible","useLayoutEffect","isNil","FullscreenOverlay","Resizer","defaultFraction","h2","isSelected","itemCount","groupCount","clsx","vertical","gridTemplateColumns","entries","gId","g","isActive","GroupEntryFileCell","SelectedGroupInfo","nItems","FileCell","CompImage","IconButton","faClone","faTrashAlt","props","h1","url","img","src","alt","faImage","multiSortStableAsc","sorters","numSorters","sort","b","CompLayoutToolbar","isExpanded","setIsExpanded","snapshotTemp","hasComponent","compSize","numPorts","compPortDefId","snap","faPlus","faCaretRight","rotation","CompLayoutEditor","canvaEl","setCanvasEl","compPos","setCompPos","dragPortIdx","setDragPortIdx","redraw","useReducer","setMtx","useResizeChangeHandler","parentElement","cvsBitsRef","extraCanvases","ctxPos","left","top","pr","window","devicePixelRatio","desiredWidth","floor","clientWidth","desiredHeight","clientHeight","transform","toTransformParams","schematicPortComps","portIds","compPorts","schematicPortIds","portsToAdd","currPortPoses","autogenPorts","schemPort","targetPos","iterPorts","some","newPorts","editSnapshotDirect","ViewLayoutContext","Provider","el","CompBoxEditor","setPos","schematicComp","CompPortEditor","draggingPortIdx","setDraggingPortIdx","isInput","paletteTw","portInputBg","portOutputBg","useViewLayout","boxEl","setBoxEl","handleResize","resizeCompBox","newSize","newCompPorts","edgeLen","fixedXPos","getEdgeInfo","newEdgeLen","fixedPos","newFixedPos","portsOnEdge","getPortsOnEdge","newPortsOnEdge","edgePort","insertPos","linePos","insertPortAtPos","srcIdx","setAt","zoom","compBg","makeArray","_","Gripper","gripPos","onResize","portEl","setPortEl","newPos","movePortToNewLocation","xMax","yMax","bestEdge","bestPos","bestDist","portToAdd","getEdgeOfPort","Left","Right","Top","Bottom","portToInsert","tryMovePorts","startIdx","deltas","prevPos","movedPos","insertPosRounded","matchIdx","matchPos","comparePos","modifiersToString","modifiers","Alt","Shift","trim","ToolbarDivider","ToolbarButton","notImpl","tip","btn","Tooltip","ComponentAdder","MainToolbar","readonly","toolbars","undo","undoAction","redo","redoAction","undoAvailable","redoAvailable","includes","ToolbarTypes","PlayPause","StepperControls","Viewport","ViewportControls","faFloppyDisk","faCodeFork","faFileArrowDown","saveToFile","faUndo","faRedo","faBook","ToolbarNameEditor","setValue","editingName","setEditingName","isEditingName","inputEl","setInputEl","applyEditName","cancelEditName","focus","select","onKeyDown","onKeyUp","resetSoft","isPlaying","stepSpeed","intervalEnabled","interval","animFrameEnabled","stepOrStop","useInterval","runImmediately","iterAcc","useRequestAnimationFrame","dt","perfStart","numIterationsFloat","itersToRun","halted","faPowerOff","faClockRotateLeft","faChevronRight","faPause","faPlay","faForward","faForwardFast","faExpand","needsZoomExtent","CompBoundingBox","viewLayout","compBb","handleEdgeDrag","side","dest","prev","clone","roundToHalfway","handleCornerDrag","corner","RectCorner","IsLeft","IsTop","dirs","corners","TopRight","BottomRight","BottomLeft","position","transformOrigin","EdgeHitTarget","onEdgeDrag","CornerHitTarget","onCornerDrag","setEl","_ds","isVertical","isMainDiag","CompDetails","singleComp","numSelected","singleCompRef","getCompFromRef","EditKvp","label","code","StringEditor","update","editComp","extId","parentCompDefId","CpuCanvas","schematicId","setCvsState","sharedContext","useContext","SharedContextContext","createCpuEditorState","isClient","setIsClient","computeModelBoundingBox","empty","computeZoomExtentMatrix","createSharedContext","codeLibrary","updateAllCompsFromDefs","localStorageSchematicsLoaded","prevExeModel","displayModel","existingSystem","executionOrder","sameId","populateExecutionModel","subTreePrefix","connectedWires","connectedComps","compIdToLocalIdx","localCompToExeCompIdx","nestedCompPortLookup","getCompSubSchematicForSnapshot","fullCompId","build","existingIdx","existingExeComp","copyStatefulData","newCompIdx","innerSchematicPorts","nestedComps","dests","srcs","nestedPortComps","bindOutPort","nestedExeComp","externalPortBound","nestedPort","wireFullId","calcCompExecutionOrder","numComps","inDegree","compPhaseToNodeId","netToNodeId","nodeIdToCompPhaseIdx","nodeId","nodeIdToNetIdx","netNumPhases","numPhases","topoNodeOrder","numExeNodes","cId","pIdx","hasNextPhase","nodeEdges","nextNodeId","netPhaseCount","netPhaseId","calculatePhaseId","prevPhaseIdx","prevPhase","netNodeId","nId","nPId","destComp","readPhaseIdx","writePortIdx","outputNodeId","destIds","destId","deg","queue","degree","splice","destNodeId","numPhasesRun","compPhase","isLatch","phaseStepCount","identity","h","renderCpu","cvs","compIdxToExeOrder","exeNet","renderWire","isHover","isCtrl","fullWireId","isNonZero","portBindings","flowSegs","flowNodes","segKey","id0","id1","inputNodeCount","compId","exePortRef","nodeIdToPortBinding","portBinding","inputNodeIds","outputNodeIds","binding","inputNodeId","visited","prevNodeId","shift","prevId","hoverRef","selectedNodes","selectedSegs","sel","lineCap","lineJoin","strokeStyle","lineWidth","lineTo","stroke","noFlowColor","flowColor","isForwardFlow","isBackwardFlow","dirsUsed","edgeId","edgeDir","node2","isFlow","font","textBaseline","textAlign","fillText","exeNetIdx","order","singleElRef","globalAlpha","exeCompIdx","isValidExe","palette","renderAll","rect","compRenderArgs","styles","lineHeight","fillColor","strokeColor","render","renderDom","textHeight","renderCompPort","isTristate","isTop","isBot","isLeft","isRight","deltaAmt","deltaX","innerMtx","inv","orders","px","py","strokeText","selectedCompSet","renderSelectRegion","compDivs","getCompDomElements","subLayout","subLayoutDom","React","EditorContext","OutTri","PortHandling","editCompConfig","updateConfig","compEditArgs","updateComp","comp2","comp3","updateCompFromDef","updateWiresForComp","portHandling","Move","updateEditSchematic","getCompSubSchematicForPrefix","subSchematics","updateSnapshot","changed","Detach","createContext","subs","notify","constructor","Subscriptions","magic","subarray","class_","endian","osAbi","abiVersion","machine","version2","read32UintLe","class","entryPoint","phOff","shOff","flags","ehSize","read16UintLe","phEntSize","phNum","shEntSize","shNum","shStrNdx","shStrTabOffset","base","shName","shType","shFlags","shOffset","shSize","readString","String","fromCharCode","buffer","configStr","JSON","stringify","j","nodeStr","initParts","lines","makeIssue","issue","lineIdx","colNo","lineNo","lineContent","parseInt","parseLine","match","re","exec","endsWith","line","lineRaw","parts","resolved","part","posParts","parseFloat","isNaN","parse","nodeParts","posAndEdges","nodePart","compNodeParts","outStr","replaceAll","wiresFromLsState","layoutBase","ls","maxWireId","lsCompLookup","maxCompId","schematicToLsState","options","modelBbb","excludePorts","addInPlace","combineInPlace","modelBb","viewBb","expandFraction","expandInPlace","modelSize","viewSize","center","constructEditSnapshot","addLine","OpCode","Funct3Op","Funct3OpImm","Funct3Branch","Funct3LoadStore","Funct3CSR","CSR_Reg","OPIMM","OP","BRANCH","LUI","AUIPC","JAL","JALR","SYSTEM","LOAD","STORE","FENCE","ADDI","SLTI","SLTIU","XORI","ORI","ANDI","SLLI","SRLI","SRAI","SUB","ADD","SLL","SLT","SLTU","XOR","SRL","SRx","OR","AND","SRxI","BEQ","BNE","BLT","BGE","BLTU","BGEU","LB","LH","LW","LBU","LHU","SB","SH","SW","CSRRW","CSRRS","CSRRC","CSRRWI","CSRRSI","CSRRCI","mstatus","misa","mdeleg","mideleg","mie","mtvec","mcounteren","mstatush","mscratch","mepc","mcause","mtval","mip","mtinst","mtval2","editCtxFromRefId","prefixIdx","partId","bbSize","mulAdd","localRef","schemLibEntry","editSchematic","refId","lastPartId","zero","wireLookup","compsToMove","wiresAndNodesToMove","nodeIdsToMove","nodeRefStr","refStr","segDir","segDirPerp","perpDelta","dragNodes","nodeIdsToClean","nodesToMove","initialNodes","keys","isPinnedNode","nodeIdx","node0Idx","dirPerp","maybeMoves","anyPinnedNodes","iterColinearNodes","cb","seenIds","nodeStack","pop","abs","moveAmt","newNode","wireLinkNodes","move","d","nodeIdx0","nodeIdx1","editIdx","editedWires","fixWires","editWire","wireIdxsToMerge","merged","seg1","editNode0","editNode1","seg2","segAttachedTo","graphToWire","seg","idxsBelowNewIdx","Array","from","editWireGraph","nodePosMap","createNodePosMap","nodePos","posStr","islands","allWires","graph","stack","island","idCntr","idMap","newId","isects","getNode","seg0","nodesOnLine","t","comp1Ref","segAttachedToInner","segmentNearestT","nodeA","nodeB","wireGraph","segs","segIdsToRemove","seg0Idx","seg1Idx","newSegs","distSq","segNode0","segNode1","nodesRemoved","dir0","dir1","nearest","v","CompDefType","Builtin","UserDefined","CompLibrary","addComp","altIds","altDefIds","altId","cfg","initConfig","Function","applyConfig","builder","ExeCompBuilder","buildDefault","inPorts","outPorts","addPhase","defaultPhase0","getPort","portNameToIdx","validPortsMsg","createExternalPort","newPort","addData","addLatchedPhase","seenLatch","_this_data","PortPlacement","portPlacementToPos","portPos","midXSnapped","midYSnapped","createCompIoComps","newDir","internalPortDir","signed","valueMode","HexValueInputType","Dec","inputOverride","inputValueOverride","externalPort","roundRect","closePath","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","PortEditor","makeEditFunction","updateFn","editIsOverriden","editBitWidth","clampToSignedWidth","editSigned","editPortType","isInputPort","editValueOverride","isInputOverride","isBound","CompRectBase","hideHover","HexValueEditor","inputType","minimalBackground","inputClassName","maxBits","padBits","hidePrefix","_val","ConfigMenu","MenuRow","title","CheckboxMenuTitle","PortResizer","Element","centerY","_ev","oldPos","oldSize","classNameHit","faEllipsisVertical","faEllipsis","createRegisterComps","_args","inCtrlPort","inDataPort","outAPort","outBPort","Uint32Array","writeEnabled","writeReg","writeData","readAReg","readBReg","regFilePhase0","regFilePhase1","regFilePhase2Latch","renderRegisterFile","inPort","outPort","renderPc","ctrl","outBitsA","outBitsB","outAEnabled","outBEnabled","inData","inBits","inEnabled","riscvRegNames","riscvInColor","riscvOutAColor","riscvOutBColor","pcValue","boxSize","boxOffset","xRight","registerOpts","innerPadX","yMid","currText","regValToStr","xNewRight","measureText","padX","newValStr","clip","regValue","padY","drawReadCircle","xStart","xEnd","color","regCurrStr","textWidth","xLeft","isARead","isBRead","xMid","writeStr","writeTextWidth","valU32","valS32","pcHexStr","toUpperCase","pcValStr","handleHover","createCanvasDivStyle","CompRectUnscaled","checked","btnRef","setBtnRef","visible","setVisible","faCog","onClose","closeBackdrop","createRiscvInsDecodeComps","ins","addrOffset","rhsImm","regCtrl","loadStoreCtrl","aluCtrl","pcRegMuxCtrl","pcAddImm","lhsSel","rhsSel","pcBranchCtrl","insDecoderPhase0","renderInsDecoder","opCode","funct3","rd","rs1","rs2","isArithShiftOrSub","setRegCtrl","signExtend12Bit","setAluCtrl","signExtend20Bit","offsetRaw","setLoadStoreCtrl","enable","addr","isBranch","isSpecial","isLoad","signExtend8Bit","signExtend16Bit","u32Arr","s32Arr","Int32Array","funct3BranchIcon","funct3OpIcon","createInsetGradient","inset","colorOuter","isTB","isBR","insetX","insetY","oppDir","grad","createLinearGradient","hexWithOpacity","hex","stop","opacity","d3Color","formatHex","addColorStop","SchematicComp","faCodeBranch","faMagnifyingGlass","Hex","Bin","fixedInputType","setText","formatValue","textPrefix","isValid","parseValue","clampValue","editValue","parsed","cursorPos","selectionStart","setSelectionRange","textValid","faAngleUp","faAngleDown","readOnly","onBlur","isArrowKeyWithModifiers","ceil","maxVal","CodeSuiteManager","registerSuite","fileName","suites","loaded","getSuite","ensureSuiteLoaded","suite","loadPromise","loadSuite","respBody","loadError","status","statusText","useGetCodeSuite","manager","useSubscriptions","BusMemCtrlType","aluPhase0","inAPort","inBPort","branchPort","lhs","rhs","isEnabled","Byte","Half","Word","rotateAboutAffineInt","rotateAffineInt","BinGate","rotate","newRotate","Addressing","addrMask","InputEditor","ledOutputRegAccess","isWrite","newValue","bitsOn","bitsOff","bitsToggle","LedOutputSimple","ledBits","isOn","en","RegFileCtrl","RegSelect","enabled","inEnable","inReg","outAEnable","outAReg","outBEnable","outBReg","onDoubleClick","backgroundColor","useCreateSharedContext","setSharedContext","disableLocalStorageLoad","SchematicLibrary","buildCompLibrary","rotateCenter","fontFamily","opStr","takeBranch","display","flexDirection","alignItems","addrBase","dataIn","dataOut","busCtrl","busAddr","busData","ctrlVal","loadFlag","mask","pc","word","inSelPort","isAPort","yTl","slope","yTr","yBl","yBr","srcPos","destPos","setLineDash","rom32View","loc","widthPerChar","widthPerWord","space","padLeft","xOffset","yOffset","rowHeight","numBytesPerRow","numWordsPerRow","targetAddr","targetAddrY","targetAddrRow","targetAddrX","targetAddrCol","wordStr","byte","ramUint8","ram","ram32View","isRead","readType","wordVal","bitOffset","dataPort","writeType","existing","mat","rightX","frontRad","arcTo","notH","dy","dx","localCtrl","localData","localAddr","addrUpperBits","addrLowerBits","isMatch","portType","fn","extraId","populateSchematicLibrary","colors","tailwindConfig","theme","cyan","schematicManifest","loadFromLocalStorage","clear","addLocalSchematics","readFromLocalStorage","addSchematicsToCompLibrary","resolveSchematicRefs","schem","lsSchematic","lsSchematicToSchematicDef","delete","localStorage","removeItem","schematicLocalStorageKey","iterLocalStorageEntries","schematicStr","error","lsCompArgs","hasEdits","random","editSnapshotToLsSchematic","setItem","lsStr","dataStr","nameToCamel","replace","toLowerCase","body","method","headers","compArgsToLsState","Header","Link","href","f","detInv","z","mulBbInv","scaleVec","translateScale","sx","sy","_len","arguments","mats","_key","result","Portal","TipPos","TipStyle","TopStart","PosStart","TopEnd","PosEnd","BottomStart","BottomEnd","LeftStart","LeftEnd","RightStart","RightEnd","Gray","tipStyle","arrow","isVisible","setIsVisible","setTargetEl","tooltipEl","setTooltipEl","tooltipInfo","setTooltipInfo","targetBcr","tooltipBcr","tooltipStyle","arrowStyle","isBottom","isStart","isEnd","right","bottom","innerWidth","arrowXGlobal","arrowX","arrowY","visibility","only","module","exports","extend","plugins"],"sourceRoot":""}
{"version":3,"file":"static/chunks/app/cpu/guide/01-riscv-basic/page-1c476cedb8a69e7e.js","mappings":"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","sources":["webpack://_N_E/?2e9e","webpack://_N_E/./src/cpu/guide/AutoLoadCode.tsx","webpack://_N_E/./src/cpu/guide/GuideIndex.tsx","webpack://_N_E/./src/cpu/guide/NavSidebar.tsx","webpack://_N_E/./src/cpu/guide/CpuEnabledGuide.tsx","webpack://_N_E/./src/cpu/guide/guideStyle.css","webpack://_N_E/<anon>"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"/home/runner/work/llm-viz/llm-viz/src/cpu/CpuCanvas.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/llm-viz/llm-viz/src/cpu/guide/CpuEnabledGuide.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/llm-viz/llm-viz/src/cpu/guide/AutoLoadCode.tsx\")","'use client';\n\nimport { useEffect } from \"react\";\nimport { useEditorContext } from \"../Editor\";\nimport { useGetCodeSuite } from \"../library/CodeSuiteManager\";\nimport { isNotNil } from \"@/src/utils/data\";\nimport { IExeComp } from \"../CpuModel\";\nimport { IRomExeData } from \"../comps/SimpleMemory\";\n\nexport const AutoLoadCode: React.FC<{\n    fileName: string,\n    section?: string;\n}> = ({ fileName, section }) => {\n    let { editorState, setEditorState, exeModel } = useEditorContext();\n    let codeSuite = useGetCodeSuite(editorState.codeLibrary, fileName);\n\n    useEffect(() => {\n        if (exeModel && codeSuite && codeSuite.entries.length > 0 && editorState.snapshot.mainSchematic.comps.length > 0) {\n\n            let entry = section ? codeSuite.entries.find(e => e.name === section) : codeSuite.entries[0];\n\n            if (!entry) {\n                console.warn(`Could not find code entry ${section} in ${fileName}`);\n                return;\n            }\n\n            let romComp = editorState.snapshot.mainSchematic.comps.find(c => c.defId === 'core/mem/rom0');\n\n            if (romComp) {\n                let exeCompIdx = exeModel.lookup.compIdToIdx.get(romComp.id);\n                if (isNotNil(exeCompIdx)) {\n                    let exeComp = exeModel.comps[exeCompIdx!] as IExeComp<IRomExeData>;\n\n                    let romArr = exeComp.data.rom;\n                    romArr.set(entry.elfSection.arr);\n                    romArr.fill(0, entry.elfSection.arr.length);\n                    exeComp.data.updateCntr += 1;\n                    setEditorState(e => ({ ...e }));\n                }\n            } else {\n                console.log(editorState.snapshot.mainSchematic.comps);\n            }\n        }\n    }, [setEditorState, exeModel, codeSuite, editorState.snapshot.mainSchematic.comps, section, fileName]);\n\n    return null;\n}\n","import { Metadata } from \"next\";\n\nexport enum CPUDirectory {\n    RiscvBasic,\n}\n\nexport interface IGuideEntry {\n    id: CPUDirectory;\n    name: string;\n    description?: string;\n    path: string;\n}\n\nexport const guideEntries: IGuideEntry[] = [{\n    id: CPUDirectory.RiscvBasic,\n    name: 'RISC-V Minimal Computer',\n    description: 'Basics of RISC-V CPU model',\n    path: '01-riscv-basic',\n}];\n\nexport function makeCpuMetadata(dir: CPUDirectory): Metadata {\n    let entry = guideEntries.find(x => x.id === dir)!;\n    return {\n        title: entry.name + ' - CPU Guide',\n        description: entry.description,\n        keywords: [],\n    };\n}\n","import React from \"react\";\nimport { CPUDirectory, IGuideEntry, guideEntries } from \"./GuideIndex\";\nimport Link from \"next/link\";\nimport clsx from \"clsx\";\n\nexport const NavSidebar: React.FC<{\n    className?: string;\n    activeEntry: CPUDirectory;\n}> = ({ className, activeEntry }) => {\n\n    return <div className={clsx(\"\", className)}>\n        <div className=\"py-2 px-2\">\n            <Link href={'/cpu/guide'}>Guide Home</Link>\n        </div>\n        <div>\n            {guideEntries.map(x => {\n                return <IndexEntry key={x.id} entry={x} isActive={x.id === activeEntry} />;\n            })}\n        </div>\n    </div>;\n};\n\nconst IndexEntry: React.FC<{\n    entry: IGuideEntry;\n    isActive: boolean;\n}> = ({ entry, isActive }) => {\n\n    return <div className={clsx(\"px-2\")}>\n        <Link href={'/cpu/guide/' + entry.path}>{entry.name}</Link>\n    </div>;\n};\n\n","'use client';\nimport React, { useMemo } from 'react';\nimport { CPUDirectory, guideEntries } from './GuideIndex';\nimport { Header } from '@/src/homepage/Header';\nimport { NavSidebar } from './NavSidebar';\nimport { useCreateGlobalKeyboardDocumentListener } from '@/src/utils/keyboard';\nimport './guideStyle.css';\nimport { SharedContextContext, useCreateSharedContext } from '../library/SharedContext';\n\nexport const CpuEnabledGuide: React.FC<{\n    dir: CPUDirectory;\n    children?: React.ReactNode;\n}> = ({ dir, children }) => {\n    useCreateGlobalKeyboardDocumentListener();\n    let sharedContext = useCreateSharedContext();\n\n    let entry = useMemo(() => guideEntries.find(x => x.id === dir)!, [dir]);\n\n    return <main className='flex flex-col min-h-screen'>\n        <Header title={entry.name} />\n        <div className='flex flex-grow items-start'>\n            <NavSidebar className='w-3/12 bg-slate-100 min-h-full' activeEntry={dir} />\n            <div className='guide-style w-9/12 flex flex-col py-2 mb-[10rem]'>\n                <SharedContextContext.Provider value={sharedContext}>\n                    {children}\n                </SharedContextContext.Provider>\n            </div>\n            <div className='w-3/12 bg-slate-100 min-h-full'>\n                &nbsp;\n            </div>\n        </div>\n    </main>;\n};\n\nexport const GuideSection: React.FC<{\n    title?: React.ReactNode;\n    children?: React.ReactNode;\n}> = ({ title, children }) => {\n\n    return <section className='px-4 flex flex-col'>\n        {title && <h2 className='text-xl font-bold mb-2 mt-4'>{title}</h2>}\n        {children}\n    </section>;\n};\n\nexport const Para: React.FC<{\n    children?: React.ReactNode;\n}> = ({ children }) => {\n    return <div className='my-2'>{children}</div>;\n};\n\nexport const Ins: React.FC<{\n    children?: React.ReactNode;\n}> = ({ children }) => {\n    return <code>{children}</code>;\n};\n","// extracted by mini-css-extract-plugin"],"names":["Promise","resolve","then","__webpack_require__","bind","AutoLoadCode","fileName","section","param","editorState","setEditorState","exeModel","useEditorContext","codeSuite","useGetCodeSuite","codeLibrary","useEffect","entries","length","snapshot","mainSchematic","comps","entry","find","e","name","console","warn","concat","romComp","c","defId","exeCompIdx","lookup","compIdToIdx","get","id","isNotNil","exeComp","romArr","data","rom","set","elfSection","arr","fill","updateCntr","log","CPUDirectory","RiscvBasic","guideEntries","description","path","NavSidebar","className","activeEntry","jsx_runtime","jsxs","div","clsx","jsx","Link","href","map","x","IndexEntry","isActive","CpuEnabledGuide","dir","children","useCreateGlobalKeyboardDocumentListener","sharedContext","useCreateSharedContext","useMemo","main","Header","title","SharedContextContext","Provider","value","GuideSection","h2","Para","Ins","code"],"sourceRoot":""}